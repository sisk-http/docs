{
  "api/Sisk.BasicAuth.BasicAuthenticateRequestHandler.-ctor.html": {
    "href": "api/Sisk.BasicAuth.BasicAuthenticateRequestHandler.-ctor.html",
    "title": "Constructor BasicAuthenticateRequestHandler | Sisk Framework",
    "keywords": "Constructor BasicAuthenticateRequestHandler Namespace Sisk.BasicAuth Assembly Sisk.BasicAuth.dll BasicAuthenticateRequestHandler() public BasicAuthenticateRequestHandler()"
  },
  "api/Sisk.BasicAuth.BasicAuthenticateRequestHandler.CreateUnauthorizedResponse.html": {
    "href": "api/Sisk.BasicAuth.BasicAuthenticateRequestHandler.CreateUnauthorizedResponse.html",
    "title": "Method CreateUnauthorizedResponse | Sisk Framework",
    "keywords": "Method CreateUnauthorizedResponse Namespace Sisk.BasicAuth Assembly Sisk.BasicAuth.dll CreateUnauthorizedResponse(string) Creates an empty HTTP response with the WWW-Authenticate header and an custom realm message. public HttpResponse CreateUnauthorizedResponse(string realm) Parameters realm string Defines the realm message to send back to the client. Returns HttpResponse CreateUnauthorizedResponse() Creates an empty HTTP response with the WWW-Authenticate header and with the realm message defined in this class instance. public HttpResponse CreateUnauthorizedResponse() Returns HttpResponse"
  },
  "api/Sisk.BasicAuth.BasicAuthenticateRequestHandler.Execute.html": {
    "href": "api/Sisk.BasicAuth.BasicAuthenticateRequestHandler.Execute.html",
    "title": "Method Execute | Sisk Framework",
    "keywords": "Method Execute Namespace Sisk.BasicAuth Assembly Sisk.BasicAuth.dll Execute(HttpRequest, HttpContext) This method is called by the Router before executing a request when the Route instantiates an object that implements this interface. If it returns a HttpResponse object, the route callback is not called and all execution of the route is stopped. If it returns \"null\", the execution is continued. public HttpResponse? Execute(HttpRequest request, HttpContext context) Parameters request HttpRequest context HttpContext Returns HttpResponse"
  },
  "api/Sisk.BasicAuth.BasicAuthenticateRequestHandler.ExecutionMode.html": {
    "href": "api/Sisk.BasicAuth.BasicAuthenticateRequestHandler.ExecutionMode.html",
    "title": "Property ExecutionMode | Sisk Framework",
    "keywords": "Property ExecutionMode Namespace Sisk.BasicAuth Assembly Sisk.BasicAuth.dll ExecutionMode Gets or sets when this RequestHandler should run. public RequestHandlerExecutionMode ExecutionMode { get; init; } Property Value RequestHandlerExecutionMode"
  },
  "api/Sisk.BasicAuth.BasicAuthenticateRequestHandler.OnValidating.html": {
    "href": "api/Sisk.BasicAuth.BasicAuthenticateRequestHandler.OnValidating.html",
    "title": "Method OnValidating | Sisk Framework",
    "keywords": "Method OnValidating Namespace Sisk.BasicAuth Assembly Sisk.BasicAuth.dll OnValidating(BasicAuthenticationCredentials, HttpContext) Indicates the method that is called to validate a request with client credentials. When returning an HttpResponse, it will be sent immediately to the client and the rest of the stack will not be executed. If the return is null, it is interpretable that the authentication was successful and the execution should continue. public virtual HttpResponse? OnValidating(BasicAuthenticationCredentials credentials, HttpContext context) Parameters credentials BasicAuthenticationCredentials Represents the credentials sent by the client, already decoded and ready for use. context HttpContext Represents the Http context. Returns HttpResponse"
  },
  "api/Sisk.BasicAuth.BasicAuthenticateRequestHandler.Realm.html": {
    "href": "api/Sisk.BasicAuth.BasicAuthenticateRequestHandler.Realm.html",
    "title": "Property Realm | Sisk Framework",
    "keywords": "Property Realm Namespace Sisk.BasicAuth Assembly Sisk.BasicAuth.dll Realm Gets or sets a message to show the client which protection scope it needs to authenticate to. public string Realm { get; set; } Property Value string"
  },
  "api/Sisk.BasicAuth.BasicAuthenticateRequestHandler.html": {
    "href": "api/Sisk.BasicAuth.BasicAuthenticateRequestHandler.html",
    "title": "Class BasicAuthenticateRequestHandler | Sisk Framework",
    "keywords": "Class BasicAuthenticateRequestHandler Namespace Sisk.BasicAuth Assembly Sisk.BasicAuth.dll Gets a IRequestHandler that serves as an authenticator for the Basic Authentication scheme, which can validate a user id and password. public class BasicAuthenticateRequestHandler : IRequestHandler Inheritance object BasicAuthenticateRequestHandler Implements IRequestHandler Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors BasicAuthenticateRequestHandler() Properties ExecutionMode Gets or sets when this RequestHandler should run. Realm Gets or sets a message to show the client which protection scope it needs to authenticate to. Methods CreateUnauthorizedResponse() Creates an empty HTTP response with the WWW-Authenticate header and with the realm message defined in this class instance. CreateUnauthorizedResponse(string) Creates an empty HTTP response with the WWW-Authenticate header and an custom realm message. Execute(HttpRequest, HttpContext) This method is called by the Router before executing a request when the Route instantiates an object that implements this interface. If it returns a HttpResponse object, the route callback is not called and all execution of the route is stopped. If it returns \"null\", the execution is continued. OnValidating(BasicAuthenticationCredentials, HttpContext) Indicates the method that is called to validate a request with client credentials. When returning an HttpResponse, it will be sent immediately to the client and the rest of the stack will not be executed. If the return is null, it is interpretable that the authentication was successful and the execution should continue."
  },
  "api/Sisk.BasicAuth.BasicAuthenticationCredentials.Password.html": {
    "href": "api/Sisk.BasicAuth.BasicAuthenticationCredentials.Password.html",
    "title": "Property Password | Sisk Framework",
    "keywords": "Property Password Namespace Sisk.BasicAuth Assembly Sisk.BasicAuth.dll Password Gets the plain password component from this credentials. public string Password { get; } Property Value string"
  },
  "api/Sisk.BasicAuth.BasicAuthenticationCredentials.UserId.html": {
    "href": "api/Sisk.BasicAuth.BasicAuthenticationCredentials.UserId.html",
    "title": "Property UserId | Sisk Framework",
    "keywords": "Property UserId Namespace Sisk.BasicAuth Assembly Sisk.BasicAuth.dll UserId Gets the user id component from this credentials. public string UserId { get; } Property Value string"
  },
  "api/Sisk.BasicAuth.BasicAuthenticationCredentials.html": {
    "href": "api/Sisk.BasicAuth.BasicAuthenticationCredentials.html",
    "title": "Class BasicAuthenticationCredentials | Sisk Framework",
    "keywords": "Class BasicAuthenticationCredentials Namespace Sisk.BasicAuth Assembly Sisk.BasicAuth.dll Represents basic authentication credentials for an HTTP request. public class BasicAuthenticationCredentials Inheritance object BasicAuthenticationCredentials Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties Password Gets the plain password component from this credentials. UserId Gets the user id component from this credentials."
  },
  "api/Sisk.BasicAuth.html": {
    "href": "api/Sisk.BasicAuth.html",
    "title": "Namespace Sisk.BasicAuth | Sisk Framework",
    "keywords": "Namespace Sisk.BasicAuth Classes BasicAuthenticateRequestHandler Gets a IRequestHandler that serves as an authenticator for the Basic Authentication scheme, which can validate a user id and password. BasicAuthenticationCredentials Represents basic authentication credentials for an HTTP request."
  },
  "api/Sisk.Core.Entity.CrossOriginResourceSharingHeaders.-ctor.html": {
    "href": "api/Sisk.Core.Entity.CrossOriginResourceSharingHeaders.-ctor.html",
    "title": "Constructor CrossOriginResourceSharingHeaders | Sisk Framework",
    "keywords": "Constructor CrossOriginResourceSharingHeaders Namespace Sisk.Core.Entity Assembly Sisk.Core.dll CrossOriginResourceSharingHeaders() Creates an empty CrossOriginResourceSharingHeaders instance with no predefined CORS headers. public CrossOriginResourceSharingHeaders()"
  },
  "api/Sisk.Core.Entity.CrossOriginResourceSharingHeaders.AllowCredentials.html": {
    "href": "api/Sisk.Core.Entity.CrossOriginResourceSharingHeaders.AllowCredentials.html",
    "title": "Property AllowCredentials | Sisk Framework",
    "keywords": "Property AllowCredentials Namespace Sisk.Core.Entity Assembly Sisk.Core.dll AllowCredentials Gets or sets the Access-Control-Allow-Credentials header indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials. public bool? AllowCredentials { get; set; } Property Value bool?"
  },
  "api/Sisk.Core.Entity.CrossOriginResourceSharingHeaders.AllowHeaders.html": {
    "href": "api/Sisk.Core.Entity.CrossOriginResourceSharingHeaders.AllowHeaders.html",
    "title": "Property AllowHeaders | Sisk Framework",
    "keywords": "Property AllowHeaders Namespace Sisk.Core.Entity Assembly Sisk.Core.dll AllowHeaders Gets or sets the Access-Control-Allow-Headers header is used in response to a preflight request to indicate which HTTP headers can be used when making the actual request. public string[] AllowHeaders { get; set; } Property Value string[]"
  },
  "api/Sisk.Core.Entity.CrossOriginResourceSharingHeaders.AllowMethods.html": {
    "href": "api/Sisk.Core.Entity.CrossOriginResourceSharingHeaders.AllowMethods.html",
    "title": "Property AllowMethods | Sisk Framework",
    "keywords": "Property AllowMethods Namespace Sisk.Core.Entity Assembly Sisk.Core.dll AllowMethods Gets or sets the Access-Control-Allow-Methods header specifies the method or methods allowed when accessing the resource. public string[] AllowMethods { get; set; } Property Value string[]"
  },
  "api/Sisk.Core.Entity.CrossOriginResourceSharingHeaders.AllowOrigin.html": {
    "href": "api/Sisk.Core.Entity.CrossOriginResourceSharingHeaders.AllowOrigin.html",
    "title": "Property AllowOrigin | Sisk Framework",
    "keywords": "Property AllowOrigin Namespace Sisk.Core.Entity Assembly Sisk.Core.dll AllowOrigin From MDN: Access-Control-Allow-Origin specifies either a single origin which tells browsers to allow that origin to access the resource; or else — for requests without credentials — the \"*\" wildcard tells browsers to allow any origin to access the resource. public string? AllowOrigin { get; set; } Property Value string"
  },
  "api/Sisk.Core.Entity.CrossOriginResourceSharingHeaders.AllowOrigins.html": {
    "href": "api/Sisk.Core.Entity.CrossOriginResourceSharingHeaders.AllowOrigins.html",
    "title": "Property AllowOrigins | Sisk Framework",
    "keywords": "Property AllowOrigins Namespace Sisk.Core.Entity Assembly Sisk.Core.dll AllowOrigins Gets or sets domains which will define the source header according to one of the domains present below. public string[] AllowOrigins { get; set; } Property Value string[] Remarks This property makes the server compare the origin of the request and associate the domain that corresponds to it."
  },
  "api/Sisk.Core.Entity.CrossOriginResourceSharingHeaders.CreatePublicContext.html": {
    "href": "api/Sisk.Core.Entity.CrossOriginResourceSharingHeaders.CreatePublicContext.html",
    "title": "Method CreatePublicContext | Sisk Framework",
    "keywords": "Method CreatePublicContext Namespace Sisk.Core.Entity Assembly Sisk.Core.dll CreatePublicContext() Create an instance of Cross-Origin Resource Sharing that allows any origin, any method and any header in the request. public static CrossOriginResourceSharingHeaders CreatePublicContext() Returns CrossOriginResourceSharingHeaders"
  },
  "api/Sisk.Core.Entity.CrossOriginResourceSharingHeaders.Empty.html": {
    "href": "api/Sisk.Core.Entity.CrossOriginResourceSharingHeaders.Empty.html",
    "title": "Property Empty | Sisk Framework",
    "keywords": "Property Empty Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Empty Gets an instance of an empty CrossOriginResourceSharingHeaders. public static CrossOriginResourceSharingHeaders Empty { get; } Property Value CrossOriginResourceSharingHeaders"
  },
  "api/Sisk.Core.Entity.CrossOriginResourceSharingHeaders.ExposeHeaders.html": {
    "href": "api/Sisk.Core.Entity.CrossOriginResourceSharingHeaders.ExposeHeaders.html",
    "title": "Property ExposeHeaders | Sisk Framework",
    "keywords": "Property ExposeHeaders Namespace Sisk.Core.Entity Assembly Sisk.Core.dll ExposeHeaders Gets or sets the Access-Control-Expose-Headers header adds the specified headers to the allowlist that JavaScript in browsers is allowed to access. public string[] ExposeHeaders { get; set; } Property Value string[]"
  },
  "api/Sisk.Core.Entity.CrossOriginResourceSharingHeaders.MaxAge.html": {
    "href": "api/Sisk.Core.Entity.CrossOriginResourceSharingHeaders.MaxAge.html",
    "title": "Property MaxAge | Sisk Framework",
    "keywords": "Property MaxAge Namespace Sisk.Core.Entity Assembly Sisk.Core.dll MaxAge Gets or sets the Access-Control-Max-Age header indicates how long the results of a preflight request can be cached. public TimeSpan MaxAge { get; set; } Property Value TimeSpan"
  },
  "api/Sisk.Core.Entity.CrossOriginResourceSharingHeaders.html": {
    "href": "api/Sisk.Core.Entity.CrossOriginResourceSharingHeaders.html",
    "title": "Class CrossOriginResourceSharingHeaders | Sisk Framework",
    "keywords": "Class CrossOriginResourceSharingHeaders Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Provides a class to provide Cross Origin response headers for when communicating with a browser. public sealed class CrossOriginResourceSharingHeaders Inheritance object CrossOriginResourceSharingHeaders Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors CrossOriginResourceSharingHeaders() Creates an empty CrossOriginResourceSharingHeaders instance with no predefined CORS headers. Properties AllowCredentials Gets or sets the Access-Control-Allow-Credentials header indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials. AllowHeaders Gets or sets the Access-Control-Allow-Headers header is used in response to a preflight request to indicate which HTTP headers can be used when making the actual request. AllowMethods Gets or sets the Access-Control-Allow-Methods header specifies the method or methods allowed when accessing the resource. AllowOrigin From MDN: Access-Control-Allow-Origin specifies either a single origin which tells browsers to allow that origin to access the resource; or else — for requests without credentials — the \"*\" wildcard tells browsers to allow any origin to access the resource. AllowOrigins Gets or sets domains which will define the source header according to one of the domains present below. Empty Gets an instance of an empty CrossOriginResourceSharingHeaders. ExposeHeaders Gets or sets the Access-Control-Expose-Headers header adds the specified headers to the allowlist that JavaScript in browsers is allowed to access. MaxAge Gets or sets the Access-Control-Max-Age header indicates how long the results of a preflight request can be cached. Methods CreatePublicContext() Create an instance of Cross-Origin Resource Sharing that allows any origin, any method and any header in the request."
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.-ctor.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.-ctor.html",
    "title": "Constructor HttpHeaderCollection | Sisk Framework",
    "keywords": "Constructor HttpHeaderCollection Namespace Sisk.Core.Entity Assembly Sisk.Core.dll HttpHeaderCollection() Create an new instance of the HttpHeaderCollection class. public HttpHeaderCollection() HttpHeaderCollection(IDictionary<string, string[]>) Create an new instance of the HttpHeaderCollection class with values from another collection. public HttpHeaderCollection(IDictionary<string, string[]> items) Parameters items IDictionary<string, string[]> The inner collection to add to this collection. HttpHeaderCollection(IDictionary<string, string?>) Create an new instance of the HttpHeaderCollection class with values from another collection. public HttpHeaderCollection(IDictionary<string, string?> items) Parameters items IDictionary<string, string> The inner collection to add to this collection. HttpHeaderCollection(WebHeaderCollection) Create an new instance of the HttpHeaderCollection class with values from another collection. public HttpHeaderCollection(WebHeaderCollection items) Parameters items WebHeaderCollection The inner collection to add to this collection."
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.Accept.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.Accept.html",
    "title": "Property Accept | Sisk Framework",
    "keywords": "Property Accept Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Accept Gets the value of the HTTP Accept header. Specifies the media types that are acceptable for the response, allowing the client to indicate its preferences. public string? Accept { get; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.AcceptCharset.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.AcceptCharset.html",
    "title": "Property AcceptCharset | Sisk Framework",
    "keywords": "Property AcceptCharset Namespace Sisk.Core.Entity Assembly Sisk.Core.dll AcceptCharset Gets the value of the HTTP Accept-Charset header. Indicates the character sets that are acceptable for the response, allowing the client to specify its preferred encoding. public string? AcceptCharset { get; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.AcceptEncoding.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.AcceptEncoding.html",
    "title": "Property AcceptEncoding | Sisk Framework",
    "keywords": "Property AcceptEncoding Namespace Sisk.Core.Entity Assembly Sisk.Core.dll AcceptEncoding Gets the value of the HTTP Accept-Encoding header. Specifies the content encodings that are acceptable for the response, allowing the client to indicate its preferences for compression. public string? AcceptEncoding { get; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.AcceptLanguage.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.AcceptLanguage.html",
    "title": "Property AcceptLanguage | Sisk Framework",
    "keywords": "Property AcceptLanguage Namespace Sisk.Core.Entity Assembly Sisk.Core.dll AcceptLanguage Gets the value of the HTTP Accept-Language header. Indicates the natural languages that are preferred for the response, allowing the client to specify its language preferences. public string? AcceptLanguage { get; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.AcceptPatch.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.AcceptPatch.html",
    "title": "Property AcceptPatch | Sisk Framework",
    "keywords": "Property AcceptPatch Namespace Sisk.Core.Entity Assembly Sisk.Core.dll AcceptPatch Gets the value of the HTTP Accept-Patch header. Indicates the patch document formats that are acceptable for the response, allowing the client to specify its preferences for patching resources. public string? AcceptPatch { get; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.AcceptRanges.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.AcceptRanges.html",
    "title": "Property AcceptRanges | Sisk Framework",
    "keywords": "Property AcceptRanges Namespace Sisk.Core.Entity Assembly Sisk.Core.dll AcceptRanges Gets or sets the value of the HTTP Accept-Ranges header. Indicates that the server supports range requests for the resource, allowing clients to request specific byte ranges. public string? AcceptRanges { get; set; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.AccessControlAllowCredentials.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.AccessControlAllowCredentials.html",
    "title": "Property AccessControlAllowCredentials | Sisk Framework",
    "keywords": "Property AccessControlAllowCredentials Namespace Sisk.Core.Entity Assembly Sisk.Core.dll AccessControlAllowCredentials Gets or sets the value of the HTTP Access-Control-Allow-Credentials header. Indicates whether the response to the request can expose credentials, allowing cross-origin requests to include credentials. public string? AccessControlAllowCredentials { get; set; } Property Value string Remarks Note: this header can be overwritten by the current CrossOriginResourceSharingHeaders configuration."
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.AccessControlAllowHeaders.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.AccessControlAllowHeaders.html",
    "title": "Property AccessControlAllowHeaders | Sisk Framework",
    "keywords": "Property AccessControlAllowHeaders Namespace Sisk.Core.Entity Assembly Sisk.Core.dll AccessControlAllowHeaders Gets or sets the value of the HTTP Access-Control-Allow-Headers header. Specifies which headers can be used when making the actual request in a cross-origin resource sharing (CORS) context. public string? AccessControlAllowHeaders { get; set; } Property Value string Remarks Note: this header can be overwritten by the current CrossOriginResourceSharingHeaders configuration."
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.AccessControlAllowMethods.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.AccessControlAllowMethods.html",
    "title": "Property AccessControlAllowMethods | Sisk Framework",
    "keywords": "Property AccessControlAllowMethods Namespace Sisk.Core.Entity Assembly Sisk.Core.dll AccessControlAllowMethods Gets or sets the value of the HTTP Access-Control-Allow-Methods header. Specifies the methods that are allowed when accessing the resource in a CORS context. public string? AccessControlAllowMethods { get; set; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.AccessControlAllowOrigin.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.AccessControlAllowOrigin.html",
    "title": "Property AccessControlAllowOrigin | Sisk Framework",
    "keywords": "Property AccessControlAllowOrigin Namespace Sisk.Core.Entity Assembly Sisk.Core.dll AccessControlAllowOrigin Gets or sets the value of the HTTP Access-Control-Allow-Origin header. Specifies which origins are allowed to access the resource in a CORS context, helping to control cross-origin requests. public string? AccessControlAllowOrigin { get; set; } Property Value string Remarks Note: this header can be overwritten by the current CrossOriginResourceSharingHeaders configuration."
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.AccessControlExposeHeaders.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.AccessControlExposeHeaders.html",
    "title": "Property AccessControlExposeHeaders | Sisk Framework",
    "keywords": "Property AccessControlExposeHeaders Namespace Sisk.Core.Entity Assembly Sisk.Core.dll AccessControlExposeHeaders Gets or sets the value of the HTTP Access-Control-Expose-Headers header. Indicates which headers can be exposed as part of the response to a cross-origin request. public string? AccessControlExposeHeaders { get; set; } Property Value string Remarks Note: this header can be overwritten by the current CrossOriginResourceSharingHeaders configuration."
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.AccessControlMaxAge.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.AccessControlMaxAge.html",
    "title": "Property AccessControlMaxAge | Sisk Framework",
    "keywords": "Property AccessControlMaxAge Namespace Sisk.Core.Entity Assembly Sisk.Core.dll AccessControlMaxAge Gets or sets the value of the HTTP Access-Control-Max-Age header. Specifies how long the results of a preflight request can be cached, reducing the number of preflight requests made. public string? AccessControlMaxAge { get; set; } Property Value string Remarks Note: this header can be overwritten by the current CrossOriginResourceSharingHeaders configuration."
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.Age.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.Age.html",
    "title": "Property Age | Sisk Framework",
    "keywords": "Property Age Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Age Gets or sets the value of the HTTP Age header. Indicates the age of the object in a cache, helping clients understand how fresh the cached response is. public string? Age { get; set; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.Allow.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.Allow.html",
    "title": "Property Allow | Sisk Framework",
    "keywords": "Property Allow Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Allow Gets or sets the value of the HTTP Allow header. Lists the HTTP methods that are supported by the resource, informing clients about the available actions. public string? Allow { get; set; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.Authorization.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.Authorization.html",
    "title": "Property Authorization | Sisk Framework",
    "keywords": "Property Authorization Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Authorization Gets or sets the value of the HTTP Authorization header. Contains credentials for authenticating the client with the server, often used for basic or bearer token authentication. public string? Authorization { get; set; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.CacheControl.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.CacheControl.html",
    "title": "Property CacheControl | Sisk Framework",
    "keywords": "Property CacheControl Namespace Sisk.Core.Entity Assembly Sisk.Core.dll CacheControl Gets or sets the value of the HTTP Cache-Control header. Directs caching mechanisms on how to cache the response, including directives for expiration and revalidation. public string? CacheControl { get; set; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.Connection.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.Connection.html",
    "title": "Property Connection | Sisk Framework",
    "keywords": "Property Connection Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Connection Gets the value of the HTTP Connection header. To set this header in a HTTP response, use the KeepAlive property. public string? Connection { get; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.ContentDisposition.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.ContentDisposition.html",
    "title": "Property ContentDisposition | Sisk Framework",
    "keywords": "Property ContentDisposition Namespace Sisk.Core.Entity Assembly Sisk.Core.dll ContentDisposition Gets or sets the value of the HTTP Content-Disposition header. Indicates if the content should be displayed inline in the browser or treated as an attachment to be downloaded. public string? ContentDisposition { get; set; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.ContentEncoding.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.ContentEncoding.html",
    "title": "Property ContentEncoding | Sisk Framework",
    "keywords": "Property ContentEncoding Namespace Sisk.Core.Entity Assembly Sisk.Core.dll ContentEncoding Gets or sets the value of the HTTP Content-Encoding header. Specifies the encoding transformations that have been applied to the response body, such as gzip or deflate. This header should not be interpreted as the content text charset. public string? ContentEncoding { get; set; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.ContentLanguage.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.ContentLanguage.html",
    "title": "Property ContentLanguage | Sisk Framework",
    "keywords": "Property ContentLanguage Namespace Sisk.Core.Entity Assembly Sisk.Core.dll ContentLanguage Gets or sets the value of the HTTP Content-Language header. Indicates the natural language(s) of the intended audience for the response, helping clients understand the content's language. public string? ContentLanguage { get; set; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.ContentLocation.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.ContentLocation.html",
    "title": "Property ContentLocation | Sisk Framework",
    "keywords": "Property ContentLocation Namespace Sisk.Core.Entity Assembly Sisk.Core.dll ContentLocation Gets or sets the value of the HTTP Content-Location header. Indicates an alternate location for the returned data, often used for redirecting clients to a different resource. public string? ContentLocation { get; set; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.ContentMD5.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.ContentMD5.html",
    "title": "Property ContentMD5 | Sisk Framework",
    "keywords": "Property ContentMD5 Namespace Sisk.Core.Entity Assembly Sisk.Core.dll ContentMD5 Gets or sets the value of the HTTP Content-MD5 header. Contains the MD5 hash of the response body in an base-64 format, allowing clients to verify the integrity of the received data. public string? ContentMD5 { get; set; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.ContentRange.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.ContentRange.html",
    "title": "Property ContentRange | Sisk Framework",
    "keywords": "Property ContentRange Namespace Sisk.Core.Entity Assembly Sisk.Core.dll ContentRange Gets or sets the value of the HTTP Content-Range header. Indicates the size of the response body in bytes, allowing the client to know how much data to expect. public string? ContentRange { get; set; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.ContentSecurityPolicy.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.ContentSecurityPolicy.html",
    "title": "Property ContentSecurityPolicy | Sisk Framework",
    "keywords": "Property ContentSecurityPolicy Namespace Sisk.Core.Entity Assembly Sisk.Core.dll ContentSecurityPolicy Gets or sets the value of the HTTP Content-Security-Policy header. Defines security policies for the content, helping to prevent cross-site scripting (XSS) and other code injection attacks. public string? ContentSecurityPolicy { get; set; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.ContentType.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.ContentType.html",
    "title": "Property ContentType | Sisk Framework",
    "keywords": "Property ContentType Namespace Sisk.Core.Entity Assembly Sisk.Core.dll ContentType Gets or sets the value of the HTTP Content-Type header. Indicates the media type of the resource, allowing the client to understand how to process the response body. public string? ContentType { get; set; } Property Value string Remarks Note: setting the value of this header, the value present in the response's HttpContent will be overwritten."
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.Cookie.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.Cookie.html",
    "title": "Property Cookie | Sisk Framework",
    "keywords": "Property Cookie Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Cookie Gets the value of the HTTP Cookie header. Contains stored HTTP cookies previously sent by the server, allowing the server to identify the client on subsequent requests. public string? Cookie { get; } Property Value string Remarks Tip: use Cookies property to getting cookies values from requests and SetCookie(string, string) on HttpResponse to set cookies."
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.ETag.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.ETag.html",
    "title": "Property ETag | Sisk Framework",
    "keywords": "Property ETag Namespace Sisk.Core.Entity Assembly Sisk.Core.dll ETag Gets or sets the value of the HTTP ETag header. Provides a unique identifier for a specific version of a resource, allowing clients to cache and validate resources efficiently. public string? ETag { get; set; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.Expect.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.Expect.html",
    "title": "Property Expect | Sisk Framework",
    "keywords": "Property Expect Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Expect Gets the value of the HTTP Expect header. Indicates that the client expects certain behaviors from the server, such as support for specific features or conditions. public string? Expect { get; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.Expires.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.Expires.html",
    "title": "Property Expires | Sisk Framework",
    "keywords": "Property Expires Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Expires Gets or sets the value of the HTTP Expires header. Indicates the date and time after which the response is considered stale, helping clients manage caching. public string? Expires { get; set; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.Host.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.Host.html",
    "title": "Property Host | Sisk Framework",
    "keywords": "Property Host Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Host Gets the value of the HTTP Host header. Specifies the domain name of the server and the TCP port number on which the server is listening, allowing for virtual hosting. public string? Host { get; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.IfMatch.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.IfMatch.html",
    "title": "Property IfMatch | Sisk Framework",
    "keywords": "Property IfMatch Namespace Sisk.Core.Entity Assembly Sisk.Core.dll IfMatch Gets the value of the HTTP If-Match header. Used to make a conditional request, allowing the client to specify that the request should only be processed if the resource matches the given ETag. public string? IfMatch { get; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.IfModifiedSince.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.IfModifiedSince.html",
    "title": "Property IfModifiedSince | Sisk Framework",
    "keywords": "Property IfModifiedSince Namespace Sisk.Core.Entity Assembly Sisk.Core.dll IfModifiedSince Gets the value of the HTTP If-Modified-Since header. Used to make a conditional request, allowing the client to specify that the resource should only be returned if it has been modified since the given date. public string? IfModifiedSince { get; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.IfNoneMatch.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.IfNoneMatch.html",
    "title": "Property IfNoneMatch | Sisk Framework",
    "keywords": "Property IfNoneMatch Namespace Sisk.Core.Entity Assembly Sisk.Core.dll IfNoneMatch Gets the value of the HTTP If-None-Match header. Used to make a conditional request, allowing the client to specify that the resource should only be returned if it has been modified since the given date. public string? IfNoneMatch { get; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.IfRange.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.IfRange.html",
    "title": "Property IfRange | Sisk Framework",
    "keywords": "Property IfRange Namespace Sisk.Core.Entity Assembly Sisk.Core.dll IfRange Gets the value of the HTTP If-Range header. Used to make a conditional range request, allowing the client to specify that the range should only be returned if the resource has not changed. public string? IfRange { get; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.IfUnmodifiedSince.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.IfUnmodifiedSince.html",
    "title": "Property IfUnmodifiedSince | Sisk Framework",
    "keywords": "Property IfUnmodifiedSince Namespace Sisk.Core.Entity Assembly Sisk.Core.dll IfUnmodifiedSince Gets the value of the HTTP If-Unmodified-Since header. Used to make a conditional request, allowing the client to specify that the resource should only be returned if it has not been modified since the given date. public string? IfUnmodifiedSince { get; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.Location.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.Location.html",
    "title": "Property Location | Sisk Framework",
    "keywords": "Property Location Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Location Gets or sets the value of the HTTP Location header. Indicates an alternate location for the returned data, often used for redirecting clients to a different resource. public string? Location { get; set; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.MaxForwards.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.MaxForwards.html",
    "title": "Property MaxForwards | Sisk Framework",
    "keywords": "Property MaxForwards Namespace Sisk.Core.Entity Assembly Sisk.Core.dll MaxForwards Gets or sets the value of the HTTP Max-Forwards header. Used in OPTIONS requests to limit the number of times the request can be forwarded by proxies. public string? MaxForwards { get; set; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.Origin.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.Origin.html",
    "title": "Property Origin | Sisk Framework",
    "keywords": "Property Origin Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Origin Gets the value of the HTTP Origin header. Indicates the origin of the request, helping servers implement CORS and manage cross-origin requests. public string? Origin { get; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.Pragma.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.Pragma.html",
    "title": "Property Pragma | Sisk Framework",
    "keywords": "Property Pragma Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Pragma Gets or sets the value of the HTTP Pragma header. Used to include implementation-specific directives that might apply to any recipient along the request/response chain. public string? Pragma { get; set; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.ProxyAuthenticate.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.ProxyAuthenticate.html",
    "title": "Property ProxyAuthenticate | Sisk Framework",
    "keywords": "Property ProxyAuthenticate Namespace Sisk.Core.Entity Assembly Sisk.Core.dll ProxyAuthenticate Gets or sets the value of the HTTP Proxy-Authenticate header. Used by a proxy server to request authentication from the client, indicating the authentication method required. public string? ProxyAuthenticate { get; set; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.ProxyAuthorization.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.ProxyAuthorization.html",
    "title": "Property ProxyAuthorization | Sisk Framework",
    "keywords": "Property ProxyAuthorization Namespace Sisk.Core.Entity Assembly Sisk.Core.dll ProxyAuthorization Gets or sets the value of the HTTP Proxy-Authorization header. Contains credentials for authenticating the client with a proxy server, allowing access to the requested resource. public string? ProxyAuthorization { get; set; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.Range.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.Range.html",
    "title": "Property Range | Sisk Framework",
    "keywords": "Property Range Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Range Gets the value of the HTTP Range header. Used to request a specific range of bytes from a resource, allowing clients to download large files in parts. public string? Range { get; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.Referer.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.Referer.html",
    "title": "Property Referer | Sisk Framework",
    "keywords": "Property Referer Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Referer Gets the value of the HTTP Referer header. Indicates the URL of the resource from which the request originated, helping servers understand the source of traffic. public string? Referer { get; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.RetryAfter.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.RetryAfter.html",
    "title": "Property RetryAfter | Sisk Framework",
    "keywords": "Property RetryAfter Namespace Sisk.Core.Entity Assembly Sisk.Core.dll RetryAfter Gets or sets the value of the HTTP Retry-After header. Indicates how long the client should wait before making a follow-up request, often used in rate limiting scenarios. public string? RetryAfter { get; set; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.SetCookie.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.SetCookie.html",
    "title": "Property SetCookie | Sisk Framework",
    "keywords": "Property SetCookie Namespace Sisk.Core.Entity Assembly Sisk.Core.dll SetCookie Gets or sets the value of the HTTP Set-Cookie header. Used to send cookies from the server to the client, allowing the server to store state information on the client. public string? SetCookie { get; set; } Property Value string Remarks Note: setting this property, it will override all previous Set-Cookie headers. Use the Add(string, string) method to add more than one Set-Cookie header or use the SetCookie(string, string) method."
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.TE.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.TE.html",
    "title": "Property TE | Sisk Framework",
    "keywords": "Property TE Namespace Sisk.Core.Entity Assembly Sisk.Core.dll TE Gets the value of the HTTP TE header. Indicates the transfer encodings that are acceptable for the response, allowing for content negotiation. public string? TE { get; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.UserAgent.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.UserAgent.html",
    "title": "Property UserAgent | Sisk Framework",
    "keywords": "Property UserAgent Namespace Sisk.Core.Entity Assembly Sisk.Core.dll UserAgent Gets the value of the HTTP User-Agent header. Contains information about the user agent (browser or application) making the request, including its version and platform. public string? UserAgent { get; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.Vary.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.Vary.html",
    "title": "Property Vary | Sisk Framework",
    "keywords": "Property Vary Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Vary Gets or sets the value of the HTTP Vary header. Indicates that the response varies based on the value of the specified request headers, allowing for content negotiation. public string? Vary { get; set; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.Via.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.Via.html",
    "title": "Property Via | Sisk Framework",
    "keywords": "Property Via Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Via Gets or sets the value of the HTTP Via header. Used to track message forwards and proxies, indicating the intermediate protocols and recipients involved in the request/response chain. public string? Via { get; set; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.WWWAuthenticate.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.WWWAuthenticate.html",
    "title": "Property WWWAuthenticate | Sisk Framework",
    "keywords": "Property WWWAuthenticate Namespace Sisk.Core.Entity Assembly Sisk.Core.dll WWWAuthenticate Gets or sets the value of the HTTP WWW-Authenticate header. Used in response to a request for authentication, indicating the authentication method that should be used to access the resource. public string? WWWAuthenticate { get; set; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.XForwardedFor.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.XForwardedFor.html",
    "title": "Property XForwardedFor | Sisk Framework",
    "keywords": "Property XForwardedFor Namespace Sisk.Core.Entity Assembly Sisk.Core.dll XForwardedFor Gets the value of the HTTP X-Forwarded-For header. Used to identify the originating IP address of a client connecting to a web server through an HTTP proxy or load balancer. public string? XForwardedFor { get; } Property Value string Remarks Tip: use the ForwardingResolver property to obtain the user client proxied IP throught RemoteAddress."
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.XForwardedHost.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.XForwardedHost.html",
    "title": "Property XForwardedHost | Sisk Framework",
    "keywords": "Property XForwardedHost Namespace Sisk.Core.Entity Assembly Sisk.Core.dll XForwardedHost Gets the value of the HTTP X-Forwarded-Host header Used to identify the original host requested by the client in the Host HTTP request header, often used in proxy setups. public string? XForwardedHost { get; } Property Value string Remarks Tip: use the ForwardingResolver property to obtain the client requested host throught Host."
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.XFrameOptions.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.XFrameOptions.html",
    "title": "Property XFrameOptions | Sisk Framework",
    "keywords": "Property XFrameOptions Namespace Sisk.Core.Entity Assembly Sisk.Core.dll XFrameOptions Gets or sets the value of the HTTP X-Frame-Options header. Used to control whether a browser should be allowed to render a page in a iframe, frame, embed or object tag, helping to prevent clickjacking attacks. public string? XFrameOptions { get; set; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.XUACompatible.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.XUACompatible.html",
    "title": "Property XUACompatible | Sisk Framework",
    "keywords": "Property XUACompatible Namespace Sisk.Core.Entity Assembly Sisk.Core.dll XUACompatible Gets or sets the value of the HTTP X-UA-Compatible header. Used to specify the document mode that Internet Explorer should use to render the page, helping to ensure compatibility with older versions. public string? XUACompatible { get; set; } Property Value string"
  },
  "api/Sisk.Core.Entity.HttpHeaderCollection.html": {
    "href": "api/Sisk.Core.Entity.HttpHeaderCollection.html",
    "title": "Class HttpHeaderCollection | Sisk Framework",
    "keywords": "Class HttpHeaderCollection Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Represents an collection of HTTP headers with their name and values. public sealed class HttpHeaderCollection : StringKeyStore, IDictionary<string, string[]>, ICollection<KeyValuePair<string, string[]>>, IEnumerable<KeyValuePair<string, string[]>>, IEnumerable Inheritance object StringKeyStore HttpHeaderCollection Implements IDictionary<string, string[]> ICollection<KeyValuePair<string, string[]>> IEnumerable<KeyValuePair<string, string[]>> IEnumerable Inherited Members StringKeyStore.FromQueryString(string) StringKeyStore.FromCookieString(string) StringKeyStore.FromNameValueCollection(NameValueCollection) StringKeyStore.ImportNameValueCollection(NameValueCollection) StringKeyStore.ImportQueryString(string) StringKeyStore.ImportCookieString(string) StringKeyStore.Add(string, string[]) StringKeyStore.Add(string, IEnumerable<string>) StringKeyStore.Add(string, string) StringKeyStore.Add(KeyValuePair<string, string[]>) StringKeyStore.AddRange(IEnumerable<KeyValuePair<string, string[]>>) StringKeyStore.AddRange(IEnumerable<KeyValuePair<string, string>>) StringKeyStore.SetRange(IEnumerable<KeyValuePair<string, string[]>>) StringKeyStore.Set(KeyValuePair<string, string[]>) StringKeyStore.Set(string, string) StringKeyStore.Set(string, IEnumerable<string>) StringKeyStore.GetValue(string) StringKeyStore.GetValues(string) StringKeyStore.Clear() StringKeyStore.Remove(string) StringKeyStore.MakeReadOnly() StringKeyStore.ContainsKey(string) StringKeyStore.GetEnumerator() StringKeyStore.TryGetValue(string, out string[]) StringKeyStore.AsDictionary() StringKeyStore.AsNameValueCollection() StringKeyStore.AsStringValueCollection() StringKeyStore.ToString() StringKeyStore.Comparer StringKeyStore.this[string] StringKeyStore.Keys StringKeyStore.Values StringKeyStore.Count StringKeyStore.IsReadOnly object.GetType() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors HttpHeaderCollection() Create an new instance of the HttpHeaderCollection class. HttpHeaderCollection(IDictionary<string, string[]>) Create an new instance of the HttpHeaderCollection class with values from another collection. HttpHeaderCollection(IDictionary<string, string?>) Create an new instance of the HttpHeaderCollection class with values from another collection. HttpHeaderCollection(WebHeaderCollection) Create an new instance of the HttpHeaderCollection class with values from another collection. Properties Accept Gets the value of the HTTP Accept header. Specifies the media types that are acceptable for the response, allowing the client to indicate its preferences. AcceptCharset Gets the value of the HTTP Accept-Charset header. Indicates the character sets that are acceptable for the response, allowing the client to specify its preferred encoding. AcceptEncoding Gets the value of the HTTP Accept-Encoding header. Specifies the content encodings that are acceptable for the response, allowing the client to indicate its preferences for compression. AcceptLanguage Gets the value of the HTTP Accept-Language header. Indicates the natural languages that are preferred for the response, allowing the client to specify its language preferences. AcceptPatch Gets the value of the HTTP Accept-Patch header. Indicates the patch document formats that are acceptable for the response, allowing the client to specify its preferences for patching resources. AcceptRanges Gets or sets the value of the HTTP Accept-Ranges header. Indicates that the server supports range requests for the resource, allowing clients to request specific byte ranges. AccessControlAllowCredentials Gets or sets the value of the HTTP Access-Control-Allow-Credentials header. Indicates whether the response to the request can expose credentials, allowing cross-origin requests to include credentials. AccessControlAllowHeaders Gets or sets the value of the HTTP Access-Control-Allow-Headers header. Specifies which headers can be used when making the actual request in a cross-origin resource sharing (CORS) context. AccessControlAllowMethods Gets or sets the value of the HTTP Access-Control-Allow-Methods header. Specifies the methods that are allowed when accessing the resource in a CORS context. AccessControlAllowOrigin Gets or sets the value of the HTTP Access-Control-Allow-Origin header. Specifies which origins are allowed to access the resource in a CORS context, helping to control cross-origin requests. AccessControlExposeHeaders Gets or sets the value of the HTTP Access-Control-Expose-Headers header. Indicates which headers can be exposed as part of the response to a cross-origin request. AccessControlMaxAge Gets or sets the value of the HTTP Access-Control-Max-Age header. Specifies how long the results of a preflight request can be cached, reducing the number of preflight requests made. Age Gets or sets the value of the HTTP Age header. Indicates the age of the object in a cache, helping clients understand how fresh the cached response is. Allow Gets or sets the value of the HTTP Allow header. Lists the HTTP methods that are supported by the resource, informing clients about the available actions. Authorization Gets or sets the value of the HTTP Authorization header. Contains credentials for authenticating the client with the server, often used for basic or bearer token authentication. CacheControl Gets or sets the value of the HTTP Cache-Control header. Directs caching mechanisms on how to cache the response, including directives for expiration and revalidation. Connection Gets the value of the HTTP Connection header. To set this header in a HTTP response, use the KeepAlive property. ContentDisposition Gets or sets the value of the HTTP Content-Disposition header. Indicates if the content should be displayed inline in the browser or treated as an attachment to be downloaded. ContentEncoding Gets or sets the value of the HTTP Content-Encoding header. Specifies the encoding transformations that have been applied to the response body, such as gzip or deflate. This header should not be interpreted as the content text charset. ContentLanguage Gets or sets the value of the HTTP Content-Language header. Indicates the natural language(s) of the intended audience for the response, helping clients understand the content's language. ContentLocation Gets or sets the value of the HTTP Content-Location header. Indicates an alternate location for the returned data, often used for redirecting clients to a different resource. ContentMD5 Gets or sets the value of the HTTP Content-MD5 header. Contains the MD5 hash of the response body in an base-64 format, allowing clients to verify the integrity of the received data. ContentRange Gets or sets the value of the HTTP Content-Range header. Indicates the size of the response body in bytes, allowing the client to know how much data to expect. ContentSecurityPolicy Gets or sets the value of the HTTP Content-Security-Policy header. Defines security policies for the content, helping to prevent cross-site scripting (XSS) and other code injection attacks. ContentType Gets or sets the value of the HTTP Content-Type header. Indicates the media type of the resource, allowing the client to understand how to process the response body. Cookie Gets the value of the HTTP Cookie header. Contains stored HTTP cookies previously sent by the server, allowing the server to identify the client on subsequent requests. ETag Gets or sets the value of the HTTP ETag header. Provides a unique identifier for a specific version of a resource, allowing clients to cache and validate resources efficiently. Expect Gets the value of the HTTP Expect header. Indicates that the client expects certain behaviors from the server, such as support for specific features or conditions. Expires Gets or sets the value of the HTTP Expires header. Indicates the date and time after which the response is considered stale, helping clients manage caching. Host Gets the value of the HTTP Host header. Specifies the domain name of the server and the TCP port number on which the server is listening, allowing for virtual hosting. IfMatch Gets the value of the HTTP If-Match header. Used to make a conditional request, allowing the client to specify that the request should only be processed if the resource matches the given ETag. IfModifiedSince Gets the value of the HTTP If-Modified-Since header. Used to make a conditional request, allowing the client to specify that the resource should only be returned if it has been modified since the given date. IfNoneMatch Gets the value of the HTTP If-None-Match header. Used to make a conditional request, allowing the client to specify that the resource should only be returned if it has been modified since the given date. IfRange Gets the value of the HTTP If-Range header. Used to make a conditional range request, allowing the client to specify that the range should only be returned if the resource has not changed. IfUnmodifiedSince Gets the value of the HTTP If-Unmodified-Since header. Used to make a conditional request, allowing the client to specify that the resource should only be returned if it has not been modified since the given date. Location Gets or sets the value of the HTTP Location header. Indicates an alternate location for the returned data, often used for redirecting clients to a different resource. MaxForwards Gets or sets the value of the HTTP Max-Forwards header. Used in OPTIONS requests to limit the number of times the request can be forwarded by proxies. Origin Gets the value of the HTTP Origin header. Indicates the origin of the request, helping servers implement CORS and manage cross-origin requests. Pragma Gets or sets the value of the HTTP Pragma header. Used to include implementation-specific directives that might apply to any recipient along the request/response chain. ProxyAuthenticate Gets or sets the value of the HTTP Proxy-Authenticate header. Used by a proxy server to request authentication from the client, indicating the authentication method required. ProxyAuthorization Gets or sets the value of the HTTP Proxy-Authorization header. Contains credentials for authenticating the client with a proxy server, allowing access to the requested resource. Range Gets the value of the HTTP Range header. Used to request a specific range of bytes from a resource, allowing clients to download large files in parts. Referer Gets the value of the HTTP Referer header. Indicates the URL of the resource from which the request originated, helping servers understand the source of traffic. RetryAfter Gets or sets the value of the HTTP Retry-After header. Indicates how long the client should wait before making a follow-up request, often used in rate limiting scenarios. SetCookie Gets or sets the value of the HTTP Set-Cookie header. Used to send cookies from the server to the client, allowing the server to store state information on the client. TE Gets the value of the HTTP TE header. Indicates the transfer encodings that are acceptable for the response, allowing for content negotiation. UserAgent Gets the value of the HTTP User-Agent header. Contains information about the user agent (browser or application) making the request, including its version and platform. Vary Gets or sets the value of the HTTP Vary header. Indicates that the response varies based on the value of the specified request headers, allowing for content negotiation. Via Gets or sets the value of the HTTP Via header. Used to track message forwards and proxies, indicating the intermediate protocols and recipients involved in the request/response chain. WWWAuthenticate Gets or sets the value of the HTTP WWW-Authenticate header. Used in response to a request for authentication, indicating the authentication method that should be used to access the resource. XForwardedFor Gets the value of the HTTP X-Forwarded-For header. Used to identify the originating IP address of a client connecting to a web server through an HTTP proxy or load balancer. XForwardedHost Gets the value of the HTTP X-Forwarded-Host header Used to identify the original host requested by the client in the Host HTTP request header, often used in proxy setups. XFrameOptions Gets or sets the value of the HTTP X-Frame-Options header. Used to control whether a browser should be allowed to render a page in a iframe, frame, embed or object tag, helping to prevent clickjacking attacks. XUACompatible Gets or sets the value of the HTTP X-UA-Compatible header. Used to specify the document mode that Internet Explorer should use to render the page, helping to ensure compatibility with older versions."
  },
  "api/Sisk.Core.Entity.MultipartFormCollection.ContainsKey.html": {
    "href": "api/Sisk.Core.Entity.MultipartFormCollection.ContainsKey.html",
    "title": "Method ContainsKey | Sisk Framework",
    "keywords": "Method ContainsKey Namespace Sisk.Core.Entity Assembly Sisk.Core.dll ContainsKey(string) public bool ContainsKey(string key) Parameters key string Returns bool"
  },
  "api/Sisk.Core.Entity.MultipartFormCollection.Count.html": {
    "href": "api/Sisk.Core.Entity.MultipartFormCollection.Count.html",
    "title": "Property Count | Sisk Framework",
    "keywords": "Property Count Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Count public int Count { get; } Property Value int"
  },
  "api/Sisk.Core.Entity.MultipartFormCollection.GetEnumerator.html": {
    "href": "api/Sisk.Core.Entity.MultipartFormCollection.GetEnumerator.html",
    "title": "Method GetEnumerator | Sisk Framework",
    "keywords": "Method GetEnumerator Namespace Sisk.Core.Entity Assembly Sisk.Core.dll GetEnumerator() public IEnumerator<MultipartObject> GetEnumerator() Returns IEnumerator<MultipartObject>"
  },
  "api/Sisk.Core.Entity.MultipartFormCollection.GetItem.html": {
    "href": "api/Sisk.Core.Entity.MultipartFormCollection.GetItem.html",
    "title": "Method GetItem | Sisk Framework",
    "keywords": "Method GetItem Namespace Sisk.Core.Entity Assembly Sisk.Core.dll GetItem(string) Gets the last form item by their name. This search is case-insensitive. public MultipartObject? GetItem(string name) Parameters name string The form item name. Returns MultipartObject"
  },
  "api/Sisk.Core.Entity.MultipartFormCollection.GetItems.html": {
    "href": "api/Sisk.Core.Entity.MultipartFormCollection.GetItems.html",
    "title": "Method GetItems | Sisk Framework",
    "keywords": "Method GetItems Namespace Sisk.Core.Entity Assembly Sisk.Core.dll GetItems(string) Gets all form items that shares the specified name. This search is case-insensitive. public MultipartObject[] GetItems(string name) Parameters name string The form item name. Returns MultipartObject[] An array of MultipartObject with the specified name."
  },
  "api/Sisk.Core.Entity.MultipartFormCollection.GetStringValue.html": {
    "href": "api/Sisk.Core.Entity.MultipartFormCollection.GetStringValue.html",
    "title": "Method GetStringValue | Sisk Framework",
    "keywords": "Method GetStringValue Namespace Sisk.Core.Entity Assembly Sisk.Core.dll GetStringValue(string) Gets an StringValue object from the form item content string. This method reads the contents of the last matched last item with the request encoding. public StringValue GetStringValue(string name) Parameters name string The form item name. Returns StringValue"
  },
  "api/Sisk.Core.Entity.MultipartFormCollection.Keys.html": {
    "href": "api/Sisk.Core.Entity.MultipartFormCollection.Keys.html",
    "title": "Property Keys | Sisk Framework",
    "keywords": "Property Keys Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Keys public IEnumerable<string> Keys { get; } Property Value IEnumerable<string>"
  },
  "api/Sisk.Core.Entity.MultipartFormCollection.ToArray.html": {
    "href": "api/Sisk.Core.Entity.MultipartFormCollection.ToArray.html",
    "title": "Method ToArray | Sisk Framework",
    "keywords": "Method ToArray Namespace Sisk.Core.Entity Assembly Sisk.Core.dll ToArray() Creates an array with the MultipartObject in this collection. public MultipartObject[] ToArray() Returns MultipartObject[]"
  },
  "api/Sisk.Core.Entity.MultipartFormCollection.TryGetValue.html": {
    "href": "api/Sisk.Core.Entity.MultipartFormCollection.TryGetValue.html",
    "title": "Method TryGetValue | Sisk Framework",
    "keywords": "Method TryGetValue Namespace Sisk.Core.Entity Assembly Sisk.Core.dll TryGetValue(string, out MultipartObject) public bool TryGetValue(string key, out MultipartObject value) Parameters key string value MultipartObject Returns bool"
  },
  "api/Sisk.Core.Entity.MultipartFormCollection.Values.html": {
    "href": "api/Sisk.Core.Entity.MultipartFormCollection.Values.html",
    "title": "Property Values | Sisk Framework",
    "keywords": "Property Values Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Values public IEnumerable<MultipartObject> Values { get; } Property Value IEnumerable<MultipartObject>"
  },
  "api/Sisk.Core.Entity.MultipartFormCollection.html": {
    "href": "api/Sisk.Core.Entity.MultipartFormCollection.html",
    "title": "Class MultipartFormCollection | Sisk Framework",
    "keywords": "Class MultipartFormCollection Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Represents an class which hosts an multipart form data contents. public sealed class MultipartFormCollection : IReadOnlyList<MultipartObject>, IReadOnlyCollection<MultipartObject>, IEnumerable<MultipartObject>, IReadOnlyDictionary<string, MultipartObject>, IReadOnlyCollection<KeyValuePair<string, MultipartObject>>, IEnumerable<KeyValuePair<string, MultipartObject>>, IEnumerable Inheritance object MultipartFormCollection Implements IReadOnlyList<MultipartObject> IReadOnlyCollection<MultipartObject> IEnumerable<MultipartObject> IReadOnlyDictionary<string, MultipartObject> IReadOnlyCollection<KeyValuePair<string, MultipartObject>> IEnumerable<KeyValuePair<string, MultipartObject>> IEnumerable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties Count Keys Values Methods ContainsKey(string) GetEnumerator() GetItem(string) Gets the last form item by their name. This search is case-insensitive. GetItems(string) Gets all form items that shares the specified name. This search is case-insensitive. GetStringValue(string) Gets an StringValue object from the form item content string. This method reads the contents of the last matched last item with the request encoding. ToArray() Creates an array with the MultipartObject in this collection. TryGetValue(string, out MultipartObject)"
  },
  "api/Sisk.Core.Entity.MultipartObject.ContentBytes.html": {
    "href": "api/Sisk.Core.Entity.MultipartObject.ContentBytes.html",
    "title": "Property ContentBytes | Sisk Framework",
    "keywords": "Property ContentBytes Namespace Sisk.Core.Entity Assembly Sisk.Core.dll ContentBytes Gets this MultipartObject form data content in bytes. public byte[] ContentBytes { get; } Property Value byte[]"
  },
  "api/Sisk.Core.Entity.MultipartObject.ContentLength.html": {
    "href": "api/Sisk.Core.Entity.MultipartObject.ContentLength.html",
    "title": "Property ContentLength | Sisk Framework",
    "keywords": "Property ContentLength Namespace Sisk.Core.Entity Assembly Sisk.Core.dll ContentLength Gets this MultipartObject form data content length in byte count. public int ContentLength { get; } Property Value int"
  },
  "api/Sisk.Core.Entity.MultipartObject.Equals.html": {
    "href": "api/Sisk.Core.Entity.MultipartObject.Equals.html",
    "title": "Method Equals | Sisk Framework",
    "keywords": "Method Equals Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Equals(object?) public override bool Equals(object? obj) Parameters obj object Returns bool Equals(MultipartObject?) public bool Equals(MultipartObject? other) Parameters other MultipartObject Returns bool"
  },
  "api/Sisk.Core.Entity.MultipartObject.Filename.html": {
    "href": "api/Sisk.Core.Entity.MultipartObject.Filename.html",
    "title": "Property Filename | Sisk Framework",
    "keywords": "Property Filename Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Filename Gets this MultipartObject provided file name. If this object ins't disposing a file, nothing is returned. public string? Filename { get; } Property Value string"
  },
  "api/Sisk.Core.Entity.MultipartObject.GetCommonFileFormat.html": {
    "href": "api/Sisk.Core.Entity.MultipartObject.GetCommonFileFormat.html",
    "title": "Method GetCommonFileFormat | Sisk Framework",
    "keywords": "Method GetCommonFileFormat Namespace Sisk.Core.Entity Assembly Sisk.Core.dll GetCommonFileFormat() Determines the image format based in the file header for each image content type. public MultipartObjectCommonFormat GetCommonFileFormat() Returns MultipartObjectCommonFormat"
  },
  "api/Sisk.Core.Entity.MultipartObject.GetHashCode.html": {
    "href": "api/Sisk.Core.Entity.MultipartObject.GetHashCode.html",
    "title": "Method GetHashCode | Sisk Framework",
    "keywords": "Method GetHashCode Namespace Sisk.Core.Entity Assembly Sisk.Core.dll GetHashCode() public override int GetHashCode() Returns int"
  },
  "api/Sisk.Core.Entity.MultipartObject.HasContents.html": {
    "href": "api/Sisk.Core.Entity.MultipartObject.HasContents.html",
    "title": "Property HasContents | Sisk Framework",
    "keywords": "Property HasContents Namespace Sisk.Core.Entity Assembly Sisk.Core.dll HasContents Gets an booolean indicating if this MultipartObject has contents or not. public bool HasContents { get; } Property Value bool"
  },
  "api/Sisk.Core.Entity.MultipartObject.Headers.html": {
    "href": "api/Sisk.Core.Entity.MultipartObject.Headers.html",
    "title": "Property Headers | Sisk Framework",
    "keywords": "Property Headers Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Headers Gets this MultipartObject headers. public HttpHeaderCollection Headers { get; } Property Value HttpHeaderCollection"
  },
  "api/Sisk.Core.Entity.MultipartObject.Name.html": {
    "href": "api/Sisk.Core.Entity.MultipartObject.Name.html",
    "title": "Property Name | Sisk Framework",
    "keywords": "Property Name Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Name Gets this MultipartObject field name. public string Name { get; } Property Value string"
  },
  "api/Sisk.Core.Entity.MultipartObject.ReadContentAsString.html": {
    "href": "api/Sisk.Core.Entity.MultipartObject.ReadContentAsString.html",
    "title": "Method ReadContentAsString | Sisk Framework",
    "keywords": "Method ReadContentAsString Namespace Sisk.Core.Entity Assembly Sisk.Core.dll ReadContentAsString(Encoding) Reads the content bytes with the given encoder. public string ReadContentAsString(Encoding encoder) Parameters encoder Encoding Returns string ReadContentAsString() Reads the content bytes using the HTTP request content-encoding. public string ReadContentAsString() Returns string"
  },
  "api/Sisk.Core.Entity.MultipartObject.html": {
    "href": "api/Sisk.Core.Entity.MultipartObject.html",
    "title": "Class MultipartObject | Sisk Framework",
    "keywords": "Class MultipartObject Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Represents an multipart/form-data object. public sealed class MultipartObject : IEquatable<MultipartObject> Inheritance object MultipartObject Implements IEquatable<MultipartObject> Inherited Members object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Properties ContentBytes Gets this MultipartObject form data content in bytes. ContentLength Gets this MultipartObject form data content length in byte count. Filename Gets this MultipartObject provided file name. If this object ins't disposing a file, nothing is returned. HasContents Gets an booolean indicating if this MultipartObject has contents or not. Headers Gets this MultipartObject headers. Name Gets this MultipartObject field name. Methods Equals(MultipartObject?) Equals(object?) GetCommonFileFormat() Determines the image format based in the file header for each image content type. GetHashCode() ReadContentAsString() Reads the content bytes using the HTTP request content-encoding. ReadContentAsString(Encoding) Reads the content bytes with the given encoder."
  },
  "api/Sisk.Core.Entity.MultipartObjectCommonFormat.html": {
    "href": "api/Sisk.Core.Entity.MultipartObjectCommonFormat.html",
    "title": "Enum MultipartObjectCommonFormat | Sisk Framework",
    "keywords": "Enum MultipartObjectCommonFormat Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Represents an image format for Multipart objects. public enum MultipartObjectCommonFormat Fields BMP = 104 Represents an bitmap image. GIF = 101 Represents an GIF image. JPEG = 100 Represents an JPEG/JPG image. PDF = 200 Represents an PDF file. PNG = 102 Represents an PNG image. TIFF = 103 Represents an TIFF image. Unknown = 0 Represents that the object is not a recognized image. WEBP = 105 Represents an WebP image."
  },
  "api/Sisk.Core.Entity.StringKeyStore.-ctor.html": {
    "href": "api/Sisk.Core.Entity.StringKeyStore.-ctor.html",
    "title": "Constructor StringKeyStore | Sisk Framework",
    "keywords": "Constructor StringKeyStore Namespace Sisk.Core.Entity Assembly Sisk.Core.dll StringKeyStore() Initializes a new instance of the StringKeyStore class, public StringKeyStore() StringKeyStore(IEqualityComparer<string>) Initializes a new instance of the StringKeyStore class with a specified comparer. public StringKeyStore(IEqualityComparer<string> comparer) Parameters comparer IEqualityComparer<string> The comparer used for key equality. StringKeyStore(IEqualityComparer<string>, IDictionary<string, string[]>?) Initializes a new instance of the StringKeyStore class, public StringKeyStore(IEqualityComparer<string> comparer, IDictionary<string, string[]>? items) Parameters comparer IEqualityComparer<string> The comparer used for key equality. items IDictionary<string, string[]> The inner collection to add to this instance."
  },
  "api/Sisk.Core.Entity.StringKeyStore.Add.html": {
    "href": "api/Sisk.Core.Entity.StringKeyStore.Add.html",
    "title": "Method Add | Sisk Framework",
    "keywords": "Method Add Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Add(string, string[]) Adds an array of values associated with the specified key. public void Add(string key, string[] value) Parameters key string The key to which the values will be added. value string[] The array of values to associate with the key. Add(string, IEnumerable<string>) Adds a collection of values associated with the specified key. public void Add(string key, IEnumerable<string> value) Parameters key string The key to which the values will be added. value IEnumerable<string> The collection of values to associate with the key. Add(string, string) Adds a single value associated with the specified key. public void Add(string key, string value) Parameters key string The key to which the value will be added. value string The value to associate with the key. Add(KeyValuePair<string, string[]>) Adds a key-value pair to the StringKeyStore. public void Add(KeyValuePair<string, string[]> item) Parameters item KeyValuePair<string, string[]> The key-value pair to add, where the key is associated with an array of values."
  },
  "api/Sisk.Core.Entity.StringKeyStore.AddRange.html": {
    "href": "api/Sisk.Core.Entity.StringKeyStore.AddRange.html",
    "title": "Method AddRange | Sisk Framework",
    "keywords": "Method AddRange Namespace Sisk.Core.Entity Assembly Sisk.Core.dll AddRange(IEnumerable<KeyValuePair<string, string[]>>) Adds the elements of the specified collection to the end of this collection. public void AddRange(IEnumerable<KeyValuePair<string, string[]>> items) Parameters items IEnumerable<KeyValuePair<string, string[]>> The collection whose items should be added to the end of this collection. AddRange(IEnumerable<KeyValuePair<string, string?>>) Adds the elements of the specified collection to the end of this collection. public void AddRange(IEnumerable<KeyValuePair<string, string?>> items) Parameters items IEnumerable<KeyValuePair<string, string>> The collection whose items should be added to the end of this collection."
  },
  "api/Sisk.Core.Entity.StringKeyStore.AsDictionary.html": {
    "href": "api/Sisk.Core.Entity.StringKeyStore.AsDictionary.html",
    "title": "Method AsDictionary | Sisk Framework",
    "keywords": "Method AsDictionary Namespace Sisk.Core.Entity Assembly Sisk.Core.dll AsDictionary() Copies the contents of this StringKeyStore into an Dictionary<TKey, TValue>. public IDictionary<string, string[]> AsDictionary() Returns IDictionary<string, string[]>"
  },
  "api/Sisk.Core.Entity.StringKeyStore.AsNameValueCollection.html": {
    "href": "api/Sisk.Core.Entity.StringKeyStore.AsNameValueCollection.html",
    "title": "Method AsNameValueCollection | Sisk Framework",
    "keywords": "Method AsNameValueCollection Namespace Sisk.Core.Entity Assembly Sisk.Core.dll AsNameValueCollection() Copies the contents of this StringKeyStore into an NameValueCollection, with values separated with an comma (,). public NameValueCollection AsNameValueCollection() Returns NameValueCollection"
  },
  "api/Sisk.Core.Entity.StringKeyStore.AsStringValueCollection.html": {
    "href": "api/Sisk.Core.Entity.StringKeyStore.AsStringValueCollection.html",
    "title": "Method AsStringValueCollection | Sisk Framework",
    "keywords": "Method AsStringValueCollection Namespace Sisk.Core.Entity Assembly Sisk.Core.dll AsStringValueCollection() Copies the contents of this StringKeyStore into an StringValueCollection. public StringValueCollection AsStringValueCollection() Returns StringValueCollection"
  },
  "api/Sisk.Core.Entity.StringKeyStore.Clear.html": {
    "href": "api/Sisk.Core.Entity.StringKeyStore.Clear.html",
    "title": "Method Clear | Sisk Framework",
    "keywords": "Method Clear Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Clear() Removes all key-value pairs from the StringKeyStore. Throws an exception if the store is read-only. public void Clear()"
  },
  "api/Sisk.Core.Entity.StringKeyStore.Comparer.html": {
    "href": "api/Sisk.Core.Entity.StringKeyStore.Comparer.html",
    "title": "Property Comparer | Sisk Framework",
    "keywords": "Property Comparer Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Comparer Gets the IEqualityComparer<T> used to compare keys in this StringKeyStore. public IEqualityComparer<string> Comparer { get; } Property Value IEqualityComparer<string>"
  },
  "api/Sisk.Core.Entity.StringKeyStore.ContainsKey.html": {
    "href": "api/Sisk.Core.Entity.StringKeyStore.ContainsKey.html",
    "title": "Method ContainsKey | Sisk Framework",
    "keywords": "Method ContainsKey Namespace Sisk.Core.Entity Assembly Sisk.Core.dll ContainsKey(string) Determines whether the StringKeyStore contains a specific key. public bool ContainsKey(string key) Parameters key string The key to locate in the StringKeyStore. Returns bool true if the StringKeyStore contains an element with the specified key; otherwise, false."
  },
  "api/Sisk.Core.Entity.StringKeyStore.Count.html": {
    "href": "api/Sisk.Core.Entity.StringKeyStore.Count.html",
    "title": "Property Count | Sisk Framework",
    "keywords": "Property Count Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Count Gets the number of key-value pairs in the StringKeyStore. public int Count { get; } Property Value int"
  },
  "api/Sisk.Core.Entity.StringKeyStore.FromCookieString.html": {
    "href": "api/Sisk.Core.Entity.StringKeyStore.FromCookieString.html",
    "title": "Method FromCookieString | Sisk Framework",
    "keywords": "Method FromCookieString Namespace Sisk.Core.Entity Assembly Sisk.Core.dll FromCookieString(string) Creates a new instance of the StringKeyStore from a cookie string. The query string should be in the format of \"key1=value1; key2=value2\". public static StringKeyStore FromCookieString(string queryString) Parameters queryString string The query string containing the key-value pairs to import. Returns StringKeyStore A new StringKeyStore populated with the key-value pairs from the query string."
  },
  "api/Sisk.Core.Entity.StringKeyStore.FromNameValueCollection.html": {
    "href": "api/Sisk.Core.Entity.StringKeyStore.FromNameValueCollection.html",
    "title": "Method FromNameValueCollection | Sisk Framework",
    "keywords": "Method FromNameValueCollection Namespace Sisk.Core.Entity Assembly Sisk.Core.dll FromNameValueCollection(NameValueCollection) Creates a new instance of the StringKeyStore from a NameValueCollection. public static StringKeyStore FromNameValueCollection(NameValueCollection collection) Parameters collection NameValueCollection The NameValueCollection containing the key-value pairs to import. Returns StringKeyStore A new StringKeyStore populated with the key-value pairs from the query string."
  },
  "api/Sisk.Core.Entity.StringKeyStore.FromQueryString.html": {
    "href": "api/Sisk.Core.Entity.StringKeyStore.FromQueryString.html",
    "title": "Method FromQueryString | Sisk Framework",
    "keywords": "Method FromQueryString Namespace Sisk.Core.Entity Assembly Sisk.Core.dll FromQueryString(string) Creates a new instance of the StringKeyStore from a query string. The query string should be in the format of \"key1=value1&key2=value2\". public static StringKeyStore FromQueryString(string queryString) Parameters queryString string The query string containing the key-value pairs to import. Returns StringKeyStore A new StringKeyStore populated with the key-value pairs from the query string."
  },
  "api/Sisk.Core.Entity.StringKeyStore.GetEnumerator.html": {
    "href": "api/Sisk.Core.Entity.StringKeyStore.GetEnumerator.html",
    "title": "Method GetEnumerator | Sisk Framework",
    "keywords": "Method GetEnumerator Namespace Sisk.Core.Entity Assembly Sisk.Core.dll GetEnumerator() public IEnumerator<KeyValuePair<string, string[]>> GetEnumerator() Returns IEnumerator<KeyValuePair<string, string[]>>"
  },
  "api/Sisk.Core.Entity.StringKeyStore.GetValue.html": {
    "href": "api/Sisk.Core.Entity.StringKeyStore.GetValue.html",
    "title": "Method GetValue | Sisk Framework",
    "keywords": "Method GetValue Namespace Sisk.Core.Entity Assembly Sisk.Core.dll GetValue(string) Retrieves the last value associated with the specified key. Returns null if the key does not exist. public string? GetValue(string name) Parameters name string The key for which to retrieve the value. Returns string The last value associated with the specified key, or null if the key is not found."
  },
  "api/Sisk.Core.Entity.StringKeyStore.GetValues.html": {
    "href": "api/Sisk.Core.Entity.StringKeyStore.GetValues.html",
    "title": "Method GetValues | Sisk Framework",
    "keywords": "Method GetValues Namespace Sisk.Core.Entity Assembly Sisk.Core.dll GetValues(string) Retrieves all values associated with the specified key. Returns an empty array if the key does not exist. public string[] GetValues(string name) Parameters name string The key for which to retrieve the values. Returns string[] An array of values associated with the specified key, or an empty array if the key is not found."
  },
  "api/Sisk.Core.Entity.StringKeyStore.ImportCookieString.html": {
    "href": "api/Sisk.Core.Entity.StringKeyStore.ImportCookieString.html",
    "title": "Method ImportCookieString | Sisk Framework",
    "keywords": "Method ImportCookieString Namespace Sisk.Core.Entity Assembly Sisk.Core.dll ImportCookieString(string) Imports key-value pairs from a cookie string into the StringKeyStore. The query string should be in the format of \"key1=value1; key2=value2\". public void ImportCookieString(string queryString) Parameters queryString string The query string containing the key-value pairs to import."
  },
  "api/Sisk.Core.Entity.StringKeyStore.ImportNameValueCollection.html": {
    "href": "api/Sisk.Core.Entity.StringKeyStore.ImportNameValueCollection.html",
    "title": "Method ImportNameValueCollection | Sisk Framework",
    "keywords": "Method ImportNameValueCollection Namespace Sisk.Core.Entity Assembly Sisk.Core.dll ImportNameValueCollection(NameValueCollection) Imports key-value pairs from a NameValueCollection into the StringKeyStore. Each key can have multiple associated values. public void ImportNameValueCollection(NameValueCollection items) Parameters items NameValueCollection The NameValueCollection containing the key-value pairs to import."
  },
  "api/Sisk.Core.Entity.StringKeyStore.ImportQueryString.html": {
    "href": "api/Sisk.Core.Entity.StringKeyStore.ImportQueryString.html",
    "title": "Method ImportQueryString | Sisk Framework",
    "keywords": "Method ImportQueryString Namespace Sisk.Core.Entity Assembly Sisk.Core.dll ImportQueryString(string) Imports key-value pairs from a query string into the StringKeyStore. The query string should be in the format of \"key1=value1&key2=value2\". public void ImportQueryString(string queryString) Parameters queryString string The query string containing the key-value pairs to import."
  },
  "api/Sisk.Core.Entity.StringKeyStore.IsReadOnly.html": {
    "href": "api/Sisk.Core.Entity.StringKeyStore.IsReadOnly.html",
    "title": "Property IsReadOnly | Sisk Framework",
    "keywords": "Property IsReadOnly Namespace Sisk.Core.Entity Assembly Sisk.Core.dll IsReadOnly Gets a value indicating whether the StringKeyStore is read-only. public bool IsReadOnly { get; } Property Value bool"
  },
  "api/Sisk.Core.Entity.StringKeyStore.Item.html": {
    "href": "api/Sisk.Core.Entity.StringKeyStore.Item.html",
    "title": "Property this | Sisk Framework",
    "keywords": "Property this Namespace Sisk.Core.Entity Assembly Sisk.Core.dll this[string] Gets or sets the array of values associated with the specified key. Returns null if the key does not exist in the store. public string? this[string key] { get; set; } Parameters key string Property Value string"
  },
  "api/Sisk.Core.Entity.StringKeyStore.Keys.html": {
    "href": "api/Sisk.Core.Entity.StringKeyStore.Keys.html",
    "title": "Property Keys | Sisk Framework",
    "keywords": "Property Keys Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Keys Gets the collection of keys in the StringKeyStore. public ICollection<string> Keys { get; } Property Value ICollection<string>"
  },
  "api/Sisk.Core.Entity.StringKeyStore.MakeReadOnly.html": {
    "href": "api/Sisk.Core.Entity.StringKeyStore.MakeReadOnly.html",
    "title": "Method MakeReadOnly | Sisk Framework",
    "keywords": "Method MakeReadOnly Namespace Sisk.Core.Entity Assembly Sisk.Core.dll MakeReadOnly() Marks the StringKeyStore as read-only, preventing further modifications. public void MakeReadOnly()"
  },
  "api/Sisk.Core.Entity.StringKeyStore.Remove.html": {
    "href": "api/Sisk.Core.Entity.StringKeyStore.Remove.html",
    "title": "Method Remove | Sisk Framework",
    "keywords": "Method Remove Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Remove(string) Removes the value associated with the specified key from the StringKeyStore. Throws an exception if the store is read-only. public bool Remove(string key) Parameters key string The key of the value to remove. Returns bool true if the key was successfully removed; otherwise, false."
  },
  "api/Sisk.Core.Entity.StringKeyStore.Set.html": {
    "href": "api/Sisk.Core.Entity.StringKeyStore.Set.html",
    "title": "Method Set | Sisk Framework",
    "keywords": "Method Set Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Set(KeyValuePair<string, string[]>) Sets the value associated with the specified key, replacing any existing values. public void Set(KeyValuePair<string, string[]> item) Parameters item KeyValuePair<string, string[]> The key-value pair to add, where the key is associated with an array of values. Set(string, string) Sets the value associated with the specified key, replacing any existing values. public void Set(string key, string value) Parameters key string The key for which to set the value. value string The value to associate with the key. Set(string, IEnumerable<string>) Sets the collection of values associated with the specified key, replacing any existing values. public void Set(string key, IEnumerable<string> value) Parameters key string The key for which to set the values. value IEnumerable<string> The collection of values to associate with the key."
  },
  "api/Sisk.Core.Entity.StringKeyStore.SetRange.html": {
    "href": "api/Sisk.Core.Entity.StringKeyStore.SetRange.html",
    "title": "Method SetRange | Sisk Framework",
    "keywords": "Method SetRange Namespace Sisk.Core.Entity Assembly Sisk.Core.dll SetRange(IEnumerable<KeyValuePair<string, string[]>>) Sets the elements of the specified collection, replacing existing values. public void SetRange(IEnumerable<KeyValuePair<string, string[]>> items) Parameters items IEnumerable<KeyValuePair<string, string[]>> The collection whose items should be replaced or added to this collection."
  },
  "api/Sisk.Core.Entity.StringKeyStore.ToString.html": {
    "href": "api/Sisk.Core.Entity.StringKeyStore.ToString.html",
    "title": "Method ToString | Sisk Framework",
    "keywords": "Method ToString Namespace Sisk.Core.Entity Assembly Sisk.Core.dll ToString() public override string ToString() Returns string"
  },
  "api/Sisk.Core.Entity.StringKeyStore.TryGetValue.html": {
    "href": "api/Sisk.Core.Entity.StringKeyStore.TryGetValue.html",
    "title": "Method TryGetValue | Sisk Framework",
    "keywords": "Method TryGetValue Namespace Sisk.Core.Entity Assembly Sisk.Core.dll TryGetValue(string, out string[]) Tries to get the array of values associated with the specified key. public bool TryGetValue(string key, out string[] value) Parameters key string The key for which to retrieve the values. value string[] When this method returns, contains the array of values associated with the specified key, or an empty array if the key is not found. Returns bool true if the key was found and the values were retrieved; otherwise, false."
  },
  "api/Sisk.Core.Entity.StringKeyStore.Values.html": {
    "href": "api/Sisk.Core.Entity.StringKeyStore.Values.html",
    "title": "Property Values | Sisk Framework",
    "keywords": "Property Values Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Values Gets the collection of values in the StringKeyStore as arrays. Each key may have multiple associated values. public ICollection<string[]> Values { get; } Property Value ICollection<string[]>"
  },
  "api/Sisk.Core.Entity.StringKeyStore.html": {
    "href": "api/Sisk.Core.Entity.StringKeyStore.html",
    "title": "Class StringKeyStore | Sisk Framework",
    "keywords": "Class StringKeyStore Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Represents a collection of string keys associated with multiple string values. public class StringKeyStore : IDictionary<string, string[]>, ICollection<KeyValuePair<string, string[]>>, IEnumerable<KeyValuePair<string, string[]>>, IEnumerable Inheritance object StringKeyStore Implements IDictionary<string, string[]> ICollection<KeyValuePair<string, string[]>> IEnumerable<KeyValuePair<string, string[]>> IEnumerable Derived HttpHeaderCollection StringValueCollection Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors StringKeyStore() Initializes a new instance of the StringKeyStore class, StringKeyStore(IEqualityComparer<string>) Initializes a new instance of the StringKeyStore class with a specified comparer. StringKeyStore(IEqualityComparer<string>, IDictionary<string, string[]>?) Initializes a new instance of the StringKeyStore class, Properties Comparer Gets the IEqualityComparer<T> used to compare keys in this StringKeyStore. Count Gets the number of key-value pairs in the StringKeyStore. IsReadOnly Gets a value indicating whether the StringKeyStore is read-only. this[string] Gets or sets the array of values associated with the specified key. Returns null if the key does not exist in the store. Keys Gets the collection of keys in the StringKeyStore. Values Gets the collection of values in the StringKeyStore as arrays. Each key may have multiple associated values. Methods Add(KeyValuePair<string, string[]>) Adds a key-value pair to the StringKeyStore. Add(string, IEnumerable<string>) Adds a collection of values associated with the specified key. Add(string, string) Adds a single value associated with the specified key. Add(string, string[]) Adds an array of values associated with the specified key. AddRange(IEnumerable<KeyValuePair<string, string[]>>) Adds the elements of the specified collection to the end of this collection. AddRange(IEnumerable<KeyValuePair<string, string?>>) Adds the elements of the specified collection to the end of this collection. AsDictionary() Copies the contents of this StringKeyStore into an Dictionary<TKey, TValue>. AsNameValueCollection() Copies the contents of this StringKeyStore into an NameValueCollection, with values separated with an comma (,). AsStringValueCollection() Copies the contents of this StringKeyStore into an StringValueCollection. Clear() Removes all key-value pairs from the StringKeyStore. Throws an exception if the store is read-only. ContainsKey(string) Determines whether the StringKeyStore contains a specific key. FromCookieString(string) Creates a new instance of the StringKeyStore from a cookie string. The query string should be in the format of \"key1=value1; key2=value2\". FromNameValueCollection(NameValueCollection) Creates a new instance of the StringKeyStore from a NameValueCollection. FromQueryString(string) Creates a new instance of the StringKeyStore from a query string. The query string should be in the format of \"key1=value1&key2=value2\". GetEnumerator() GetValue(string) Retrieves the last value associated with the specified key. Returns null if the key does not exist. GetValues(string) Retrieves all values associated with the specified key. Returns an empty array if the key does not exist. ImportCookieString(string) Imports key-value pairs from a cookie string into the StringKeyStore. The query string should be in the format of \"key1=value1; key2=value2\". ImportNameValueCollection(NameValueCollection) Imports key-value pairs from a NameValueCollection into the StringKeyStore. Each key can have multiple associated values. ImportQueryString(string) Imports key-value pairs from a query string into the StringKeyStore. The query string should be in the format of \"key1=value1&key2=value2\". MakeReadOnly() Marks the StringKeyStore as read-only, preventing further modifications. Remove(string) Removes the value associated with the specified key from the StringKeyStore. Throws an exception if the store is read-only. Set(KeyValuePair<string, string[]>) Sets the value associated with the specified key, replacing any existing values. Set(string, IEnumerable<string>) Sets the collection of values associated with the specified key, replacing any existing values. Set(string, string) Sets the value associated with the specified key, replacing any existing values. SetRange(IEnumerable<KeyValuePair<string, string[]>>) Sets the elements of the specified collection, replacing existing values. ToString() TryGetValue(string, out string[]) Tries to get the array of values associated with the specified key."
  },
  "api/Sisk.Core.Entity.StringValue.-ctor.html": {
    "href": "api/Sisk.Core.Entity.StringValue.-ctor.html",
    "title": "Constructor StringValue | Sisk Framework",
    "keywords": "Constructor StringValue Namespace Sisk.Core.Entity Assembly Sisk.Core.dll StringValue(string) Creates an new empty value of the StringValue with no predefined value. public StringValue(string name) Parameters name string The StringValue name. StringValue(string, string?) Creates an new value of the StringValue. public StringValue(string name, string? value) Parameters name string The StringValue name. value string The StringValue value."
  },
  "api/Sisk.Core.Entity.StringValue.Clone.html": {
    "href": "api/Sisk.Core.Entity.StringValue.Clone.html",
    "title": "Method Clone | Sisk Framework",
    "keywords": "Method Clone Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Clone() public object Clone() Returns object"
  },
  "api/Sisk.Core.Entity.StringValue.Create.html": {
    "href": "api/Sisk.Core.Entity.StringValue.Create.html",
    "title": "Method Create | Sisk Framework",
    "keywords": "Method Create Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Create(string?) Creates an new StringValue from the specified string. public static StringValue Create(string? value) Parameters value string The string value. Returns StringValue"
  },
  "api/Sisk.Core.Entity.StringValue.Get.html": {
    "href": "api/Sisk.Core.Entity.StringValue.Get.html",
    "title": "Method Get | Sisk Framework",
    "keywords": "Method Get Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Get<T>(IFormatProvider?) Gets an not null value from the specified T. public T Get<T>(IFormatProvider? fmtProvider = null) where T : IParsable<T> Parameters fmtProvider IFormatProvider Returns T Type Parameters T The type to convert the value to."
  },
  "api/Sisk.Core.Entity.StringValue.GetBoolean.html": {
    "href": "api/Sisk.Core.Entity.StringValue.GetBoolean.html",
    "title": "Method GetBoolean | Sisk Framework",
    "keywords": "Method GetBoolean Namespace Sisk.Core.Entity Assembly Sisk.Core.dll GetBoolean() Gets a bool from this StringValue. public bool GetBoolean() Returns bool An non-null boolean value. Exceptions NullReferenceException Thrown when the value stored in this instance is null. FormatException Thrown when the value stored in this instance is not parseable to the desired type."
  },
  "api/Sisk.Core.Entity.StringValue.GetByte.html": {
    "href": "api/Sisk.Core.Entity.StringValue.GetByte.html",
    "title": "Method GetByte | Sisk Framework",
    "keywords": "Method GetByte Namespace Sisk.Core.Entity Assembly Sisk.Core.dll GetByte() Gets a byte from this StringValue. public int GetByte() Returns int An non-null byte value. Exceptions NullReferenceException Thrown when the value stored in this instance is null. FormatException Thrown when the value stored in this instance is not parseable to the desired type."
  },
  "api/Sisk.Core.Entity.StringValue.GetChar.html": {
    "href": "api/Sisk.Core.Entity.StringValue.GetChar.html",
    "title": "Method GetChar | Sisk Framework",
    "keywords": "Method GetChar Namespace Sisk.Core.Entity Assembly Sisk.Core.dll GetChar() Gets a char from this StringValue. This method will throw an NullReferenceException if the value stored in this instance is null. public char GetChar() Returns char An non-null char value."
  },
  "api/Sisk.Core.Entity.StringValue.GetDateTime.html": {
    "href": "api/Sisk.Core.Entity.StringValue.GetDateTime.html",
    "title": "Method GetDateTime | Sisk Framework",
    "keywords": "Method GetDateTime Namespace Sisk.Core.Entity Assembly Sisk.Core.dll GetDateTime(IFormatProvider?) Gets a DateTime from this StringValue. public DateTime GetDateTime(IFormatProvider? fmtProvider = null) Parameters fmtProvider IFormatProvider Optional. Specifies the culture-specific format information. Returns DateTime An non-null DateTime value. Exceptions NullReferenceException Thrown when the value stored in this instance is null. FormatException Thrown when the value stored in this instance is not parseable to the desired type."
  },
  "api/Sisk.Core.Entity.StringValue.GetDouble.html": {
    "href": "api/Sisk.Core.Entity.StringValue.GetDouble.html",
    "title": "Method GetDouble | Sisk Framework",
    "keywords": "Method GetDouble Namespace Sisk.Core.Entity Assembly Sisk.Core.dll GetDouble(IFormatProvider?) Gets a double from this StringValue. public double GetDouble(IFormatProvider? fmtProvider = null) Parameters fmtProvider IFormatProvider Optional. Specifies the culture-specific format information. Returns double An non-null double value. Exceptions NullReferenceException Thrown when the value stored in this instance is null. FormatException Thrown when the value stored in this instance is not parseable to the desired type."
  },
  "api/Sisk.Core.Entity.StringValue.GetEnum.html": {
    "href": "api/Sisk.Core.Entity.StringValue.GetEnum.html",
    "title": "Method GetEnum | Sisk Framework",
    "keywords": "Method GetEnum Namespace Sisk.Core.Entity Assembly Sisk.Core.dll GetEnum<TEnum>() Gets an Enum object representation from this StringValue, parsing the current string expression into an value of TEnum. This method will throw an NullReferenceException if the value stored in this instance is null. public TEnum GetEnum<TEnum>() where TEnum : struct, Enum Returns TEnum Type Parameters TEnum The Enum type."
  },
  "api/Sisk.Core.Entity.StringValue.GetGuid.html": {
    "href": "api/Sisk.Core.Entity.StringValue.GetGuid.html",
    "title": "Method GetGuid | Sisk Framework",
    "keywords": "Method GetGuid Namespace Sisk.Core.Entity Assembly Sisk.Core.dll GetGuid() Gets a Guid from this StringValue. public Guid GetGuid() Returns Guid An non-null Guid value. Exceptions NullReferenceException Thrown when the value stored in this instance is null. FormatException Thrown when the value stored in this instance is not parseable to the desired type."
  },
  "api/Sisk.Core.Entity.StringValue.GetInteger.html": {
    "href": "api/Sisk.Core.Entity.StringValue.GetInteger.html",
    "title": "Method GetInteger | Sisk Framework",
    "keywords": "Method GetInteger Namespace Sisk.Core.Entity Assembly Sisk.Core.dll GetInteger() Gets a int from this StringValue. public int GetInteger() Returns int An non-null Int32 value. Exceptions NullReferenceException Thrown when the value stored in this instance is null. FormatException Thrown when the value stored in this instance is not parseable to the desired type."
  },
  "api/Sisk.Core.Entity.StringValue.GetLong.html": {
    "href": "api/Sisk.Core.Entity.StringValue.GetLong.html",
    "title": "Method GetLong | Sisk Framework",
    "keywords": "Method GetLong Namespace Sisk.Core.Entity Assembly Sisk.Core.dll GetLong() Gets a long from this StringValue. public long GetLong() Returns long An non-null long value. Exceptions NullReferenceException Thrown when the value stored in this instance is null. FormatException Thrown when the value stored in this instance is not parseable to the desired type."
  },
  "api/Sisk.Core.Entity.StringValue.GetShort.html": {
    "href": "api/Sisk.Core.Entity.StringValue.GetShort.html",
    "title": "Method GetShort | Sisk Framework",
    "keywords": "Method GetShort Namespace Sisk.Core.Entity Assembly Sisk.Core.dll GetShort(IFormatProvider?) Gets a short from this StringValue. public short GetShort(IFormatProvider? fmtProvider = null) Parameters fmtProvider IFormatProvider Optional. Specifies the culture-specific format information. Returns short An non-null short value. Exceptions NullReferenceException Thrown when the value stored in this instance is null. FormatException Thrown when the value stored in this instance is not parseable to the desired type."
  },
  "api/Sisk.Core.Entity.StringValue.GetSingle.html": {
    "href": "api/Sisk.Core.Entity.StringValue.GetSingle.html",
    "title": "Method GetSingle | Sisk Framework",
    "keywords": "Method GetSingle Namespace Sisk.Core.Entity Assembly Sisk.Core.dll GetSingle(IFormatProvider?) Gets a float from this StringValue. public double GetSingle(IFormatProvider? fmtProvider = null) Parameters fmtProvider IFormatProvider Optional. Specifies the culture-specific format information. Returns double An non-null double value. Exceptions NullReferenceException Thrown when the value stored in this instance is null. FormatException Thrown when the value stored in this instance is not parseable to the desired type."
  },
  "api/Sisk.Core.Entity.StringValue.GetString.html": {
    "href": "api/Sisk.Core.Entity.StringValue.GetString.html",
    "title": "Method GetString | Sisk Framework",
    "keywords": "Method GetString Namespace Sisk.Core.Entity Assembly Sisk.Core.dll GetString() Gets a non-null string from this StringValue. This method will throw an NullReferenceException if the value stored in this instance is null. public string GetString() Returns string An non-null string value. Exceptions NullReferenceException Thrown when the value stored in this instance is null."
  },
  "api/Sisk.Core.Entity.StringValue.IsNull.html": {
    "href": "api/Sisk.Core.Entity.StringValue.IsNull.html",
    "title": "Property IsNull | Sisk Framework",
    "keywords": "Property IsNull Namespace Sisk.Core.Entity Assembly Sisk.Core.dll IsNull Gets an boolean indicating if this object value is null. public bool IsNull { get; } Property Value bool"
  },
  "api/Sisk.Core.Entity.StringValue.IsNullOrEmpty.html": {
    "href": "api/Sisk.Core.Entity.StringValue.IsNullOrEmpty.html",
    "title": "Property IsNullOrEmpty | Sisk Framework",
    "keywords": "Property IsNullOrEmpty Namespace Sisk.Core.Entity Assembly Sisk.Core.dll IsNullOrEmpty Gets an boolean indicating if this object value is null or an empty string. public bool IsNullOrEmpty { get; } Property Value bool"
  },
  "api/Sisk.Core.Entity.StringValue.MaybeNull.html": {
    "href": "api/Sisk.Core.Entity.StringValue.MaybeNull.html",
    "title": "Method MaybeNull | Sisk Framework",
    "keywords": "Method MaybeNull Namespace Sisk.Core.Entity Assembly Sisk.Core.dll MaybeNull() Returns a self-reference to this object when it's value is not null. public StringValue? MaybeNull() Returns StringValue?"
  },
  "api/Sisk.Core.Entity.StringValue.MaybeNullOrEmpty.html": {
    "href": "api/Sisk.Core.Entity.StringValue.MaybeNullOrEmpty.html",
    "title": "Method MaybeNullOrEmpty | Sisk Framework",
    "keywords": "Method MaybeNullOrEmpty Namespace Sisk.Core.Entity Assembly Sisk.Core.dll MaybeNullOrEmpty() Returns a self-reference to this object when it's value is not null or an empty string. public StringValue? MaybeNullOrEmpty() Returns StringValue?"
  },
  "api/Sisk.Core.Entity.StringValue.Name.html": {
    "href": "api/Sisk.Core.Entity.StringValue.Name.html",
    "title": "Property Name | Sisk Framework",
    "keywords": "Property Name Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Name Gets the name of the property that hosts this StringValue. public string Name { get; } Property Value string"
  },
  "api/Sisk.Core.Entity.StringValue.Value.html": {
    "href": "api/Sisk.Core.Entity.StringValue.Value.html",
    "title": "Property Value | Sisk Framework",
    "keywords": "Property Value Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Value Gets the value of the current StringValue string if it has been assigned a valid underlying value. public string? Value { get; } Property Value string"
  },
  "api/Sisk.Core.Entity.StringValue.html": {
    "href": "api/Sisk.Core.Entity.StringValue.html",
    "title": "Struct StringValue | Sisk Framework",
    "keywords": "Struct StringValue Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Represents an option/monad item that wraps an string value and allows conversion to most common types. public readonly struct StringValue : ICloneable, IEquatable<StringValue>, IComparable<StringValue> Implements ICloneable IEquatable<StringValue> IComparable<StringValue> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors StringValue(string) Creates an new empty value of the StringValue with no predefined value. StringValue(string, string?) Creates an new value of the StringValue. Properties IsNull Gets an boolean indicating if this object value is null. IsNullOrEmpty Gets an boolean indicating if this object value is null or an empty string. Name Gets the name of the property that hosts this StringValue. Value Gets the value of the current StringValue string if it has been assigned a valid underlying value. Methods Clone() Create(string?) Creates an new StringValue from the specified string. GetBoolean() Gets a bool from this StringValue. GetByte() Gets a byte from this StringValue. GetChar() Gets a char from this StringValue. This method will throw an NullReferenceException if the value stored in this instance is null. GetDateTime(IFormatProvider?) Gets a DateTime from this StringValue. GetDouble(IFormatProvider?) Gets a double from this StringValue. GetEnum<TEnum>() Gets an Enum object representation from this StringValue, parsing the current string expression into an value of TEnum. This method will throw an NullReferenceException if the value stored in this instance is null. GetGuid() Gets a Guid from this StringValue. GetInteger() Gets a int from this StringValue. GetLong() Gets a long from this StringValue. GetShort(IFormatProvider?) Gets a short from this StringValue. GetSingle(IFormatProvider?) Gets a float from this StringValue. GetString() Gets a non-null string from this StringValue. This method will throw an NullReferenceException if the value stored in this instance is null. Get<T>(IFormatProvider?) Gets an not null value from the specified T. MaybeNull() Returns a self-reference to this object when it's value is not null. MaybeNullOrEmpty() Returns a self-reference to this object when it's value is not null or an empty string."
  },
  "api/Sisk.Core.Entity.StringValueCollection.-ctor.html": {
    "href": "api/Sisk.Core.Entity.StringValueCollection.-ctor.html",
    "title": "Constructor StringValueCollection | Sisk Framework",
    "keywords": "Constructor StringValueCollection Namespace Sisk.Core.Entity Assembly Sisk.Core.dll StringValueCollection(IDictionary<string, string?>) Creates an new StringValueCollection instance with values from another IDictionary instance. public StringValueCollection(IDictionary<string, string?> values) Parameters values IDictionary<string, string> StringValueCollection(IDictionary<string, string[]>) Creates an new StringValueCollection instance with values from another IDictionary instance. public StringValueCollection(IDictionary<string, string[]> values) Parameters values IDictionary<string, string[]> StringValueCollection() Creates an new empty StringValueCollection. public StringValueCollection()"
  },
  "api/Sisk.Core.Entity.StringValueCollection.GetItem.html": {
    "href": "api/Sisk.Core.Entity.StringValueCollection.GetItem.html",
    "title": "Method GetItem | Sisk Framework",
    "keywords": "Method GetItem Namespace Sisk.Core.Entity Assembly Sisk.Core.dll GetItem(string) Gets an StringValue from their key name. If the object was not found by their name, an empty non-null StringValue with no value is returned. public StringValue GetItem(string name) Parameters name string Returns StringValue"
  },
  "api/Sisk.Core.Entity.StringValueCollection.GetItems.html": {
    "href": "api/Sisk.Core.Entity.StringValueCollection.GetItems.html",
    "title": "Method GetItems | Sisk Framework",
    "keywords": "Method GetItems Namespace Sisk.Core.Entity Assembly Sisk.Core.dll GetItems(string) Gets an array of StringValue from their key name. If the object was not found by their name, an empty array of StringValue is returned. public StringValue[] GetItems(string name) Parameters name string Returns StringValue[]"
  },
  "api/Sisk.Core.Entity.StringValueCollection.Item.html": {
    "href": "api/Sisk.Core.Entity.StringValueCollection.Item.html",
    "title": "Property this | Sisk Framework",
    "keywords": "Property this Namespace Sisk.Core.Entity Assembly Sisk.Core.dll this[string] Gets or sets an StringValue item by their key name. public StringValue this[string name] { get; set; } Parameters name string Property Value StringValue"
  },
  "api/Sisk.Core.Entity.StringValueCollection.TryGetValue.html": {
    "href": "api/Sisk.Core.Entity.StringValueCollection.TryGetValue.html",
    "title": "Method TryGetValue | Sisk Framework",
    "keywords": "Method TryGetValue Namespace Sisk.Core.Entity Assembly Sisk.Core.dll TryGetValue(string, out StringValue) Tries to get the last StringValue associated with the specified key. public bool TryGetValue(string key, out StringValue value) Parameters key string The key for which to retrieve the values. value StringValue When this method returns, the StringValue containing the value, or empty StringValue. Returns bool true if the key was found; otherwise, false."
  },
  "api/Sisk.Core.Entity.StringValueCollection.html": {
    "href": "api/Sisk.Core.Entity.StringValueCollection.html",
    "title": "Class StringValueCollection | Sisk Framework",
    "keywords": "Class StringValueCollection Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Represents an collection of StringValue. public sealed class StringValueCollection : StringKeyStore, IDictionary<string, string[]>, ICollection<KeyValuePair<string, string[]>>, IEnumerable<KeyValuePair<string, string[]>>, IEnumerable Inheritance object StringKeyStore StringValueCollection Implements IDictionary<string, string[]> ICollection<KeyValuePair<string, string[]>> IEnumerable<KeyValuePair<string, string[]>> IEnumerable Inherited Members StringKeyStore.FromQueryString(string) StringKeyStore.FromCookieString(string) StringKeyStore.FromNameValueCollection(NameValueCollection) StringKeyStore.ImportNameValueCollection(NameValueCollection) StringKeyStore.ImportQueryString(string) StringKeyStore.ImportCookieString(string) StringKeyStore.Add(string, string[]) StringKeyStore.Add(string, IEnumerable<string>) StringKeyStore.Add(string, string) StringKeyStore.Add(KeyValuePair<string, string[]>) StringKeyStore.AddRange(IEnumerable<KeyValuePair<string, string[]>>) StringKeyStore.AddRange(IEnumerable<KeyValuePair<string, string>>) StringKeyStore.SetRange(IEnumerable<KeyValuePair<string, string[]>>) StringKeyStore.Set(KeyValuePair<string, string[]>) StringKeyStore.Set(string, string) StringKeyStore.Set(string, IEnumerable<string>) StringKeyStore.GetValue(string) StringKeyStore.GetValues(string) StringKeyStore.Clear() StringKeyStore.Remove(string) StringKeyStore.MakeReadOnly() StringKeyStore.ContainsKey(string) StringKeyStore.GetEnumerator() StringKeyStore.TryGetValue(string, out string[]) StringKeyStore.AsDictionary() StringKeyStore.AsNameValueCollection() StringKeyStore.AsStringValueCollection() StringKeyStore.ToString() StringKeyStore.Comparer StringKeyStore.Keys StringKeyStore.Values StringKeyStore.Count StringKeyStore.IsReadOnly object.GetType() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors StringValueCollection() Creates an new empty StringValueCollection. StringValueCollection(IDictionary<string, string[]>) Creates an new StringValueCollection instance with values from another IDictionary instance. StringValueCollection(IDictionary<string, string?>) Creates an new StringValueCollection instance with values from another IDictionary instance. Properties this[string] Gets or sets an StringValue item by their key name. Methods GetItem(string) Gets an StringValue from their key name. If the object was not found by their name, an empty non-null StringValue with no value is returned. GetItems(string) Gets an array of StringValue from their key name. If the object was not found by their name, an empty array of StringValue is returned. TryGetValue(string, out StringValue) Tries to get the last StringValue associated with the specified key."
  },
  "api/Sisk.Core.Entity.TypedValueDictionary.-ctor.html": {
    "href": "api/Sisk.Core.Entity.TypedValueDictionary.-ctor.html",
    "title": "Constructor TypedValueDictionary | Sisk Framework",
    "keywords": "Constructor TypedValueDictionary Namespace Sisk.Core.Entity Assembly Sisk.Core.dll TypedValueDictionary() Creates an new TypedValueDictionary instance with default parameters. public TypedValueDictionary() TypedValueDictionary(StringComparer) Creates an new TypedValueDictionary instance with default parameters with the specified StringComparer. public TypedValueDictionary(StringComparer keyComparer) Parameters keyComparer StringComparer"
  },
  "api/Sisk.Core.Entity.TypedValueDictionary.Get.html": {
    "href": "api/Sisk.Core.Entity.TypedValueDictionary.Get.html",
    "title": "Method Get | Sisk Framework",
    "keywords": "Method Get Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Get<T>() Gets a singleton previously defined in this context bag via it's type T. public T Get<T>() where T : notnull Returns T Type Parameters T The type of the object defined in this context bag."
  },
  "api/Sisk.Core.Entity.TypedValueDictionary.GetOrAdd.html": {
    "href": "api/Sisk.Core.Entity.TypedValueDictionary.GetOrAdd.html",
    "title": "Method GetOrAdd | Sisk Framework",
    "keywords": "Method GetOrAdd Namespace Sisk.Core.Entity Assembly Sisk.Core.dll GetOrAdd<T>(Func<T>) Gets a singleton previously defined in this context bag via its type T. If it does not exist, it adds the object to the context bag using the provided getter function. public T GetOrAdd<T>(Func<T> getter) where T : notnull Parameters getter Func<T> A function that provides the object to be added if it does not exist. Returns T The object of type T from the context bag. Type Parameters T The type of the object defined in this context bag."
  },
  "api/Sisk.Core.Entity.TypedValueDictionary.GetOrAddAsync.html": {
    "href": "api/Sisk.Core.Entity.TypedValueDictionary.GetOrAddAsync.html",
    "title": "Method GetOrAddAsync | Sisk Framework",
    "keywords": "Method GetOrAddAsync Namespace Sisk.Core.Entity Assembly Sisk.Core.dll GetOrAddAsync<T>(Func<Task<T>>) Asynchronously gets a singleton previously defined in this context bag via its type T. If it does not exist, it adds the object to the context bag using the provided asynchronous getter function. public Task<T> GetOrAddAsync<T>(Func<Task<T>> getter) where T : notnull Parameters getter Func<Task<T>> An asynchronous function that provides the object to be added if it does not exist. Returns Task<T> A task that represents the asynchronous operation. The task result contains the object of type T from the context bag. Type Parameters T The type of the object defined in this context bag."
  },
  "api/Sisk.Core.Entity.TypedValueDictionary.GetOrDefault.html": {
    "href": "api/Sisk.Core.Entity.TypedValueDictionary.GetOrDefault.html",
    "title": "Method GetOrDefault | Sisk Framework",
    "keywords": "Method GetOrDefault Namespace Sisk.Core.Entity Assembly Sisk.Core.dll GetOrDefault<T>() Gets a singleton previously defined in this context bag via its type T. Returns the default value if the object is not defined. public T? GetOrDefault<T>() where T : notnull Returns T The object of type T if it exists; otherwise, null. Type Parameters T The type of the object defined in this context bag."
  },
  "api/Sisk.Core.Entity.TypedValueDictionary.GetTypeKeyName.html": {
    "href": "api/Sisk.Core.Entity.TypedValueDictionary.GetTypeKeyName.html",
    "title": "Method GetTypeKeyName | Sisk Framework",
    "keywords": "Method GetTypeKeyName Namespace Sisk.Core.Entity Assembly Sisk.Core.dll GetTypeKeyName(Type) Gets the Type full qualified key name. protected string GetTypeKeyName(Type t) Parameters t Type The type to get their qualified key name. Returns string"
  },
  "api/Sisk.Core.Entity.TypedValueDictionary.IsSet.html": {
    "href": "api/Sisk.Core.Entity.TypedValueDictionary.IsSet.html",
    "title": "Method IsSet | Sisk Framework",
    "keywords": "Method IsSet Namespace Sisk.Core.Entity Assembly Sisk.Core.dll IsSet<T>() Determines whether the specified T singleton is defined in this context. public bool IsSet<T>() where T : notnull Returns bool Type Parameters T The singleton type. IsSet<T>(out T) Determines whether the specified T singleton is defined in this context and tries to output it. public bool IsSet<T>(out T value) where T : notnull Parameters value T When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns bool True if the object is find with the specified key; otherwise, false. Type Parameters T The singleton type."
  },
  "api/Sisk.Core.Entity.TypedValueDictionary.Set.html": {
    "href": "api/Sisk.Core.Entity.TypedValueDictionary.Set.html",
    "title": "Method Set | Sisk Framework",
    "keywords": "Method Set Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Set<T>() Creates and adds an singleton of T in this context bag. public T Set<T>() where T : notnull, new() Returns T Type Parameters T The object that will be defined in this context bag. Set<T>(T) Adds an singleton of T in this context bag. public T Set<T>(T value) where T : notnull Parameters value T The instance of T which will be defined in this context bag. Returns T Type Parameters T The object that will be defined in this context bag."
  },
  "api/Sisk.Core.Entity.TypedValueDictionary.TryGetValue.html": {
    "href": "api/Sisk.Core.Entity.TypedValueDictionary.TryGetValue.html",
    "title": "Method TryGetValue | Sisk Framework",
    "keywords": "Method TryGetValue Namespace Sisk.Core.Entity Assembly Sisk.Core.dll TryGetValue<TResult>(string, out TResult?) Gets the value associated with the specified key and casts it into TResult. public bool TryGetValue<TResult>(string key, out TResult? value) Parameters key string The key whose to get. value TResult When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns bool true if the object is find with the specified key; otherwise, false. Type Parameters TResult The type which will be casted into."
  },
  "api/Sisk.Core.Entity.TypedValueDictionary.Unset.html": {
    "href": "api/Sisk.Core.Entity.TypedValueDictionary.Unset.html",
    "title": "Method Unset | Sisk Framework",
    "keywords": "Method Unset Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Unset<T>() Removes an singleton object from it's type T. public bool Unset<T>() where T : notnull Returns bool Type Parameters T The singleton type."
  },
  "api/Sisk.Core.Entity.TypedValueDictionary.html": {
    "href": "api/Sisk.Core.Entity.TypedValueDictionary.html",
    "title": "Class TypedValueDictionary | Sisk Framework",
    "keywords": "Class TypedValueDictionary Namespace Sisk.Core.Entity Assembly Sisk.Core.dll Represents the base class for storing and retriving data by their type. public class TypedValueDictionary : IDictionary<string, object?>, ICollection<KeyValuePair<string, object?>>, IEnumerable<KeyValuePair<string, object?>>, IEnumerable Inheritance object TypedValueDictionary Implements IDictionary<string, object> ICollection<KeyValuePair<string, object>> IEnumerable<KeyValuePair<string, object>> IEnumerable Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors TypedValueDictionary() Creates an new TypedValueDictionary instance with default parameters. TypedValueDictionary(StringComparer) Creates an new TypedValueDictionary instance with default parameters with the specified StringComparer. Methods GetOrAddAsync<T>(Func<Task<T>>) Asynchronously gets a singleton previously defined in this context bag via its type T. If it does not exist, it adds the object to the context bag using the provided asynchronous getter function. GetOrAdd<T>(Func<T>) Gets a singleton previously defined in this context bag via its type T. If it does not exist, it adds the object to the context bag using the provided getter function. GetOrDefault<T>() Gets a singleton previously defined in this context bag via its type T. Returns the default value if the object is not defined. GetTypeKeyName(Type) Gets the Type full qualified key name. Get<T>() Gets a singleton previously defined in this context bag via it's type T. IsSet<T>() Determines whether the specified T singleton is defined in this context. IsSet<T>(out T) Determines whether the specified T singleton is defined in this context and tries to output it. Set<T>() Creates and adds an singleton of T in this context bag. Set<T>(T) Adds an singleton of T in this context bag. TryGetValue<TResult>(string, out TResult?) Gets the value associated with the specified key and casts it into TResult. Unset<T>() Removes an singleton object from it's type T."
  },
  "api/Sisk.Core.Entity.html": {
    "href": "api/Sisk.Core.Entity.html",
    "title": "Namespace Sisk.Core.Entity | Sisk Framework",
    "keywords": "Namespace Sisk.Core.Entity Classes CrossOriginResourceSharingHeaders Provides a class to provide Cross Origin response headers for when communicating with a browser. HttpHeaderCollection Represents an collection of HTTP headers with their name and values. MultipartFormCollection Represents an class which hosts an multipart form data contents. MultipartObject Represents an multipart/form-data object. StringKeyStore Represents a collection of string keys associated with multiple string values. StringValueCollection Represents an collection of StringValue. TypedValueDictionary Represents the base class for storing and retriving data by their type. Structs StringValue Represents an option/monad item that wraps an string value and allows conversion to most common types. Enums MultipartObjectCommonFormat Represents an image format for Multipart objects."
  },
  "api/Sisk.Core.Helpers.CookieHelper.BuildCookieHeaderValue.html": {
    "href": "api/Sisk.Core.Helpers.CookieHelper.BuildCookieHeaderValue.html",
    "title": "Method BuildCookieHeaderValue | Sisk Framework",
    "keywords": "Method BuildCookieHeaderValue Namespace Sisk.Core.Helpers Assembly Sisk.Core.dll BuildCookieHeaderValue(Cookie) Builds the cookie header value and returns an string from it. public static string BuildCookieHeaderValue(Cookie cookie) Parameters cookie Cookie The Cookie instance to build the cookie string. Returns string BuildCookieHeaderValue(string, string, DateTime?, TimeSpan?, string?, string?, bool?, bool?, string?) Builds the cookie header value and returns an string from it. public static string BuildCookieHeaderValue(string name, string value, DateTime? expires = null, TimeSpan? maxAge = null, string? domain = null, string? path = null, bool? secure = null, bool? httpOnly = null, string? sameSite = null) Parameters name string The cookie name. value string The cookie value. expires DateTime? The cookie expirity date. maxAge TimeSpan? The cookie max duration after being set. domain string The domain where the cookie will be valid. path string The path where the cookie will be valid. secure bool? Determines if the cookie will only be stored in an secure context. httpOnly bool? Determines if the cookie will be only available in the HTTP context. sameSite string The cookie SameSite parameter. Returns string"
  },
  "api/Sisk.Core.Helpers.CookieHelper.html": {
    "href": "api/Sisk.Core.Helpers.CookieHelper.html",
    "title": "Class CookieHelper | Sisk Framework",
    "keywords": "Class CookieHelper Namespace Sisk.Core.Helpers Assembly Sisk.Core.dll Provides a class that contains useful methods for working with cookies in HTTP responses. public static class CookieHelper Inheritance object CookieHelper Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods BuildCookieHeaderValue(Cookie) Builds the cookie header value and returns an string from it. BuildCookieHeaderValue(string, string, DateTime?, TimeSpan?, string?, string?, bool?, bool?, string?) Builds the cookie header value and returns an string from it."
  },
  "api/Sisk.Core.Helpers.MimeHelper.DefaultMimeType.html": {
    "href": "api/Sisk.Core.Helpers.MimeHelper.DefaultMimeType.html",
    "title": "Property DefaultMimeType | Sisk Framework",
    "keywords": "Property DefaultMimeType Namespace Sisk.Core.Helpers Assembly Sisk.Core.dll DefaultMimeType Gets or sets the MimeHelper default fallback mime-type. public static string DefaultMimeType { get; set; } Property Value string Remarks This property is not used by the HTTP server itself, only this helper class."
  },
  "api/Sisk.Core.Helpers.MimeHelper.GetMimeType.html": {
    "href": "api/Sisk.Core.Helpers.MimeHelper.GetMimeType.html",
    "title": "Method GetMimeType | Sisk Framework",
    "keywords": "Method GetMimeType Namespace Sisk.Core.Helpers Assembly Sisk.Core.dll GetMimeType(string, string?) Gets the content mime-type from the specified file extension. public static string GetMimeType(string fileExtension, string? fallback = null) Parameters fileExtension string The file extension, with or without the initial dot. fallback string Optional. The default mime-type when the file best mime-type is not found. If this argument is null, DefaultMimeType is used. Returns string The best matched mime-type, or the default if no mime-type was matched with the specified extension."
  },
  "api/Sisk.Core.Helpers.MimeHelper.IsBrowserKnownInlineMimeType.html": {
    "href": "api/Sisk.Core.Helpers.MimeHelper.IsBrowserKnownInlineMimeType.html",
    "title": "Method IsBrowserKnownInlineMimeType | Sisk Framework",
    "keywords": "Method IsBrowserKnownInlineMimeType Namespace Sisk.Core.Helpers Assembly Sisk.Core.dll IsBrowserKnownInlineMimeType(string) Determines whether the specified mime-type is considered an inline content type that can be displayed directly in the browser. public static bool IsBrowserKnownInlineMimeType(string mimeType) Parameters mimeType string The mime-type to evaluate. Returns bool true if the content type is an inline content type; otherwise, false."
  },
  "api/Sisk.Core.Helpers.MimeHelper.IsPlainTextFile.html": {
    "href": "api/Sisk.Core.Helpers.MimeHelper.IsPlainTextFile.html",
    "title": "Method IsPlainTextFile | Sisk Framework",
    "keywords": "Method IsPlainTextFile Namespace Sisk.Core.Helpers Assembly Sisk.Core.dll IsPlainTextFile(string) Gets an boolean indicating if the specified file is an well-known plain text file. public static bool IsPlainTextFile(string fileExtension) Parameters fileExtension string The file extension, with or without the initial dot. Returns bool"
  },
  "api/Sisk.Core.Helpers.MimeHelper.html": {
    "href": "api/Sisk.Core.Helpers.MimeHelper.html",
    "title": "Class MimeHelper | Sisk Framework",
    "keywords": "Class MimeHelper Namespace Sisk.Core.Helpers Assembly Sisk.Core.dll Provides useful helper methods for resolving mime-types from common formats. public static class MimeHelper Inheritance object MimeHelper Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties DefaultMimeType Gets or sets the MimeHelper default fallback mime-type. Methods GetMimeType(string, string?) Gets the content mime-type from the specified file extension. IsBrowserKnownInlineMimeType(string) Determines whether the specified mime-type is considered an inline content type that can be displayed directly in the browser. IsPlainTextFile(string) Gets an boolean indicating if the specified file is an well-known plain text file."
  },
  "api/Sisk.Core.Helpers.PathHelper.-ctor.html": {
    "href": "api/Sisk.Core.Helpers.PathHelper.-ctor.html",
    "title": "Constructor PathHelper | Sisk Framework",
    "keywords": "Constructor PathHelper Namespace Sisk.Core.Helpers Assembly Sisk.Core.dll PathHelper() public PathHelper()"
  },
  "api/Sisk.Core.Helpers.PathHelper.CombinePaths.html": {
    "href": "api/Sisk.Core.Helpers.PathHelper.CombinePaths.html",
    "title": "Method CombinePaths | Sisk Framework",
    "keywords": "Method CombinePaths Namespace Sisk.Core.Helpers Assembly Sisk.Core.dll CombinePaths(params string[]) Combines the specified URL paths into one. public static string CombinePaths(params string[] paths) Parameters paths string[] The string array which contains parts that will be combined. Returns string"
  },
  "api/Sisk.Core.Helpers.PathHelper.FilesystemCombinePaths.html": {
    "href": "api/Sisk.Core.Helpers.PathHelper.FilesystemCombinePaths.html",
    "title": "Method FilesystemCombinePaths | Sisk Framework",
    "keywords": "Method FilesystemCombinePaths Namespace Sisk.Core.Helpers Assembly Sisk.Core.dll FilesystemCombinePaths(bool, char, params string[]) Normalizes and combines the specified file-system paths into one. public static string FilesystemCombinePaths(bool allowRelativeReturn, char separator, params string[] paths) Parameters allowRelativeReturn bool Specifies if relative paths should be merged and \"..\" returns should be respected. separator char Specifies the path separator character. paths string[] Specifies the array of paths to combine. Returns string FilesystemCombinePaths(bool, char, ReadOnlySpan<string>) Normalizes and combines the specified file-system paths into one. public static string FilesystemCombinePaths(bool allowRelativeReturn, char separator, ReadOnlySpan<string> paths) Parameters allowRelativeReturn bool Specifies if relative paths should be merged and \"..\" returns should be respected. separator char Specifies the path separator character. paths ReadOnlySpan<string> Specifies the array of paths to combine. Returns string FilesystemCombinePaths(params string[]) Normalizes and combines the specified file-system paths into one, using the default environment directory separator char. public static string FilesystemCombinePaths(params string[] paths) Parameters paths string[] Specifies the array of paths to combine. Returns string"
  },
  "api/Sisk.Core.Helpers.PathHelper.NormalizePath.html": {
    "href": "api/Sisk.Core.Helpers.PathHelper.NormalizePath.html",
    "title": "Method NormalizePath | Sisk Framework",
    "keywords": "Method NormalizePath Namespace Sisk.Core.Helpers Assembly Sisk.Core.dll NormalizePath(string, char) Normalize the given path to use the specified directory separator, trim the last separator and remove empty entries. public static string NormalizePath(string path, char directorySeparator = '/') Parameters path string The path to normalize. directorySeparator char The directory separator. Returns string"
  },
  "api/Sisk.Core.Helpers.PathHelper.html": {
    "href": "api/Sisk.Core.Helpers.PathHelper.html",
    "title": "Class PathHelper | Sisk Framework",
    "keywords": "Class PathHelper Namespace Sisk.Core.Helpers Assembly Sisk.Core.dll Provides useful path-dedicated helper members. public sealed class PathHelper Inheritance object PathHelper Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors PathHelper() Methods CombinePaths(params string[]) Combines the specified URL paths into one. FilesystemCombinePaths(bool, char, ReadOnlySpan<string>) Normalizes and combines the specified file-system paths into one. FilesystemCombinePaths(bool, char, params string[]) Normalizes and combines the specified file-system paths into one. FilesystemCombinePaths(params string[]) Normalizes and combines the specified file-system paths into one, using the default environment directory separator char. NormalizePath(string, char) Normalize the given path to use the specified directory separator, trim the last separator and remove empty entries."
  },
  "api/Sisk.Core.Helpers.SizeHelper.-ctor.html": {
    "href": "api/Sisk.Core.Helpers.SizeHelper.-ctor.html",
    "title": "Constructor SizeHelper | Sisk Framework",
    "keywords": "Constructor SizeHelper Namespace Sisk.Core.Helpers Assembly Sisk.Core.dll SizeHelper() public SizeHelper()"
  },
  "api/Sisk.Core.Helpers.SizeHelper.HumanReadableSize.html": {
    "href": "api/Sisk.Core.Helpers.SizeHelper.HumanReadableSize.html",
    "title": "Method HumanReadableSize | Sisk Framework",
    "keywords": "Method HumanReadableSize Namespace Sisk.Core.Helpers Assembly Sisk.Core.dll HumanReadableSize(long) Converts a byte count into a human-readable string representation. public static string HumanReadableSize(long byteCount) Parameters byteCount long The total number of bytes to convert. Returns string A string representing the byte count in a human-readable format. HumanReadableSize(double) Converts a byte count into a human-readable string representation. public static string HumanReadableSize(double byteCount) Parameters byteCount double The total number of bytes to convert. Returns string A string representing the byte count in a human-readable format."
  },
  "api/Sisk.Core.Helpers.SizeHelper.UnitEb.html": {
    "href": "api/Sisk.Core.Helpers.SizeHelper.UnitEb.html",
    "title": "Field UnitEb | Sisk Framework",
    "keywords": "Field UnitEb Namespace Sisk.Core.Helpers Assembly Sisk.Core.dll Represents the number of bytes in one exibibyte (EiB). This is calculated as 1024 pebibytes. public const long UnitEb = 1152921504606846976 Returns long Represents the number of bytes in one exibibyte (EiB). This is calculated as 1024 pebibytes."
  },
  "api/Sisk.Core.Helpers.SizeHelper.UnitGb.html": {
    "href": "api/Sisk.Core.Helpers.SizeHelper.UnitGb.html",
    "title": "Field UnitGb | Sisk Framework",
    "keywords": "Field UnitGb Namespace Sisk.Core.Helpers Assembly Sisk.Core.dll Represents the number of bytes in one gibibyte (GiB). This is calculated as 1024 mebibytes. public const long UnitGb = 1073741824 Returns long Represents the number of bytes in one gibibyte (GiB). This is calculated as 1024 mebibytes."
  },
  "api/Sisk.Core.Helpers.SizeHelper.UnitKb.html": {
    "href": "api/Sisk.Core.Helpers.SizeHelper.UnitKb.html",
    "title": "Field UnitKb | Sisk Framework",
    "keywords": "Field UnitKb Namespace Sisk.Core.Helpers Assembly Sisk.Core.dll Represents the number of bytes in one kibibyte (KiB). This is calculated as 1024 bytes. public const long UnitKb = 1024 Returns long Represents the number of bytes in one kibibyte (KiB). This is calculated as 1024 bytes."
  },
  "api/Sisk.Core.Helpers.SizeHelper.UnitMb.html": {
    "href": "api/Sisk.Core.Helpers.SizeHelper.UnitMb.html",
    "title": "Field UnitMb | Sisk Framework",
    "keywords": "Field UnitMb Namespace Sisk.Core.Helpers Assembly Sisk.Core.dll Represents the number of bytes in one mebibyte (MiB). This is calculated as 1024 kibibytes. public const long UnitMb = 1048576 Returns long Represents the number of bytes in one mebibyte (MiB). This is calculated as 1024 kibibytes."
  },
  "api/Sisk.Core.Helpers.SizeHelper.UnitPb.html": {
    "href": "api/Sisk.Core.Helpers.SizeHelper.UnitPb.html",
    "title": "Field UnitPb | Sisk Framework",
    "keywords": "Field UnitPb Namespace Sisk.Core.Helpers Assembly Sisk.Core.dll Represents the number of bytes in one pebibyte (PiB). This is calculated as 1024 tebibytes. public const long UnitPb = 1125899906842624 Returns long Represents the number of bytes in one pebibyte (PiB). This is calculated as 1024 tebibytes."
  },
  "api/Sisk.Core.Helpers.SizeHelper.UnitTb.html": {
    "href": "api/Sisk.Core.Helpers.SizeHelper.UnitTb.html",
    "title": "Field UnitTb | Sisk Framework",
    "keywords": "Field UnitTb Namespace Sisk.Core.Helpers Assembly Sisk.Core.dll Represents the number of bytes in one tebibyte (TiB). This is calculated as 1024 gibibytes. public const long UnitTb = 1099511627776 Returns long Represents the number of bytes in one tebibyte (TiB). This is calculated as 1024 gibibytes."
  },
  "api/Sisk.Core.Helpers.SizeHelper.html": {
    "href": "api/Sisk.Core.Helpers.SizeHelper.html",
    "title": "Class SizeHelper | Sisk Framework",
    "keywords": "Class SizeHelper Namespace Sisk.Core.Helpers Assembly Sisk.Core.dll Provides useful size-dedicated helper members. public sealed class SizeHelper Inheritance object SizeHelper Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors SizeHelper() Fields UnitEb Represents the number of bytes in one exibibyte (EiB). This is calculated as 1024 pebibytes. UnitGb Represents the number of bytes in one gibibyte (GiB). This is calculated as 1024 mebibytes. UnitKb Represents the number of bytes in one kibibyte (KiB). This is calculated as 1024 bytes. UnitMb Represents the number of bytes in one mebibyte (MiB). This is calculated as 1024 kibibytes. UnitPb Represents the number of bytes in one pebibyte (PiB). This is calculated as 1024 tebibytes. UnitTb Represents the number of bytes in one tebibyte (TiB). This is calculated as 1024 gibibytes. Methods HumanReadableSize(double) Converts a byte count into a human-readable string representation. HumanReadableSize(long) Converts a byte count into a human-readable string representation."
  },
  "api/Sisk.Core.Helpers.html": {
    "href": "api/Sisk.Core.Helpers.html",
    "title": "Namespace Sisk.Core.Helpers | Sisk Framework",
    "keywords": "Namespace Sisk.Core.Helpers Classes CookieHelper Provides a class that contains useful methods for working with cookies in HTTP responses. MimeHelper Provides useful helper methods for resolving mime-types from common formats. PathHelper Provides useful path-dedicated helper members. SizeHelper Provides useful size-dedicated helper members."
  },
  "api/Sisk.Core.Http.BrotliContent.-ctor.html": {
    "href": "api/Sisk.Core.Http.BrotliContent.-ctor.html",
    "title": "Constructor BrotliContent | Sisk Framework",
    "keywords": "Constructor BrotliContent Namespace Sisk.Core.Http Assembly Sisk.Core.dll BrotliContent(HttpContent) Initializes a new instance of compressing stream with the specified inner HTTP content. public BrotliContent(HttpContent innerContent) Parameters innerContent HttpContent The inner HTTP content. BrotliContent(byte[]) Initializes a new instance of compressing stream with the specified byte array content. public BrotliContent(byte[] byteArrayContent) Parameters byteArrayContent byte[] The byte array content. BrotliContent(Stream) Initializes a new instance of compressing stream with the specified stream content. public BrotliContent(Stream baseContent) Parameters baseContent Stream The stream content."
  },
  "api/Sisk.Core.Http.BrotliContent.GetCompressingStream.html": {
    "href": "api/Sisk.Core.Http.BrotliContent.GetCompressingStream.html",
    "title": "Method GetCompressingStream | Sisk Framework",
    "keywords": "Method GetCompressingStream Namespace Sisk.Core.Http Assembly Sisk.Core.dll GetCompressingStream(Stream) Gets a stream that compresses the output stream. public override Stream GetCompressingStream(Stream outputStream) Parameters outputStream Stream The output stream to compress. Returns Stream A stream that compresses the output stream."
  },
  "api/Sisk.Core.Http.BrotliContent.Setup.html": {
    "href": "api/Sisk.Core.Http.BrotliContent.Setup.html",
    "title": "Method Setup | Sisk Framework",
    "keywords": "Method Setup Namespace Sisk.Core.Http Assembly Sisk.Core.dll Setup() Represents the method that is invoked once within the constructor to setup this compressor. This method is indeeded to add the missing Content-Encoding headers used by this compressor. public override void Setup()"
  },
  "api/Sisk.Core.Http.BrotliContent.html": {
    "href": "api/Sisk.Core.Http.BrotliContent.html",
    "title": "Class BrotliContent | Sisk Framework",
    "keywords": "Class BrotliContent Namespace Sisk.Core.Http Assembly Sisk.Core.dll Represents an HTTP content that is compressed using the Brotli algorithm. public class BrotliContent : CompressedContent, IDisposable Inheritance object HttpContent CompressedContent BrotliContent Implements IDisposable Inherited Members CompressedContent.SerializeToStream(Stream, TransportContext, CancellationToken) CompressedContent.SerializeToStreamAsync(Stream, TransportContext) CompressedContent.SerializeToStreamAsync(Stream, TransportContext, CancellationToken) CompressedContent.TryComputeLength(out long) CompressedContent.Dispose(bool) CompressedContent.InnerContent HttpContent.ReadAsStringAsync() HttpContent.ReadAsStringAsync(CancellationToken) HttpContent.ReadAsByteArrayAsync() HttpContent.ReadAsByteArrayAsync(CancellationToken) HttpContent.ReadAsStream() HttpContent.ReadAsStream(CancellationToken) HttpContent.ReadAsStreamAsync() HttpContent.ReadAsStreamAsync(CancellationToken) HttpContent.CopyTo(Stream, TransportContext, CancellationToken) HttpContent.CopyToAsync(Stream) HttpContent.CopyToAsync(Stream, CancellationToken) HttpContent.CopyToAsync(Stream, TransportContext) HttpContent.CopyToAsync(Stream, TransportContext, CancellationToken) HttpContent.LoadIntoBufferAsync() HttpContent.LoadIntoBufferAsync(long) HttpContent.CreateContentReadStream(CancellationToken) HttpContent.CreateContentReadStreamAsync() HttpContent.CreateContentReadStreamAsync(CancellationToken) HttpContent.Dispose() HttpContent.Headers object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors BrotliContent(byte[]) Initializes a new instance of compressing stream with the specified byte array content. BrotliContent(Stream) Initializes a new instance of compressing stream with the specified stream content. BrotliContent(HttpContent) Initializes a new instance of compressing stream with the specified inner HTTP content. Methods GetCompressingStream(Stream) Gets a stream that compresses the output stream. Setup() Represents the method that is invoked once within the constructor to setup this compressor. This method is indeeded to add the missing Content-Encoding headers used by this compressor."
  },
  "api/Sisk.Core.Http.CompressedContent.-ctor.html": {
    "href": "api/Sisk.Core.Http.CompressedContent.-ctor.html",
    "title": "Constructor CompressedContent | Sisk Framework",
    "keywords": "Constructor CompressedContent Namespace Sisk.Core.Http Assembly Sisk.Core.dll CompressedContent(HttpContent) Initializes a new instance of compressing stream with the specified inner HTTP content. public CompressedContent(HttpContent innerContent) Parameters innerContent HttpContent The inner HTTP content. CompressedContent(byte[]) Initializes a new instance of compressing stream with the specified byte array content. public CompressedContent(byte[] byteArrayContent) Parameters byteArrayContent byte[] The byte array content. CompressedContent(Stream) Initializes a new instance of compressing stream with the specified stream content. public CompressedContent(Stream baseContent) Parameters baseContent Stream The stream content."
  },
  "api/Sisk.Core.Http.CompressedContent.Dispose.html": {
    "href": "api/Sisk.Core.Http.CompressedContent.Dispose.html",
    "title": "Method Dispose | Sisk Framework",
    "keywords": "Method Dispose Namespace Sisk.Core.Http Assembly Sisk.Core.dll Dispose(bool) protected override void Dispose(bool disposing) Parameters disposing bool"
  },
  "api/Sisk.Core.Http.CompressedContent.GetCompressingStream.html": {
    "href": "api/Sisk.Core.Http.CompressedContent.GetCompressingStream.html",
    "title": "Method GetCompressingStream | Sisk Framework",
    "keywords": "Method GetCompressingStream Namespace Sisk.Core.Http Assembly Sisk.Core.dll GetCompressingStream(Stream) Gets a stream that compresses the output stream. public abstract Stream GetCompressingStream(Stream outputStream) Parameters outputStream Stream The output stream to compress. Returns Stream A stream that compresses the output stream."
  },
  "api/Sisk.Core.Http.CompressedContent.InnerContent.html": {
    "href": "api/Sisk.Core.Http.CompressedContent.InnerContent.html",
    "title": "Property InnerContent | Sisk Framework",
    "keywords": "Property InnerContent Namespace Sisk.Core.Http Assembly Sisk.Core.dll InnerContent Gets the inner HTTP content. public HttpContent InnerContent { get; } Property Value HttpContent"
  },
  "api/Sisk.Core.Http.CompressedContent.SerializeToStream.html": {
    "href": "api/Sisk.Core.Http.CompressedContent.SerializeToStream.html",
    "title": "Method SerializeToStream | Sisk Framework",
    "keywords": "Method SerializeToStream Namespace Sisk.Core.Http Assembly Sisk.Core.dll SerializeToStream(Stream, TransportContext?, CancellationToken) protected override sealed void SerializeToStream(Stream stream, TransportContext? context, CancellationToken cancellationToken) Parameters stream Stream context TransportContext cancellationToken CancellationToken"
  },
  "api/Sisk.Core.Http.CompressedContent.SerializeToStreamAsync.html": {
    "href": "api/Sisk.Core.Http.CompressedContent.SerializeToStreamAsync.html",
    "title": "Method SerializeToStreamAsync | Sisk Framework",
    "keywords": "Method SerializeToStreamAsync Namespace Sisk.Core.Http Assembly Sisk.Core.dll SerializeToStreamAsync(Stream, TransportContext?) protected override sealed Task SerializeToStreamAsync(Stream stream, TransportContext? context) Parameters stream Stream context TransportContext Returns Task SerializeToStreamAsync(Stream, TransportContext?, CancellationToken) protected override sealed Task SerializeToStreamAsync(Stream stream, TransportContext? context, CancellationToken cancellationToken) Parameters stream Stream context TransportContext cancellationToken CancellationToken Returns Task"
  },
  "api/Sisk.Core.Http.CompressedContent.Setup.html": {
    "href": "api/Sisk.Core.Http.CompressedContent.Setup.html",
    "title": "Method Setup | Sisk Framework",
    "keywords": "Method Setup Namespace Sisk.Core.Http Assembly Sisk.Core.dll Setup() Represents the method that is invoked once within the constructor to setup this compressor. This method is indeeded to add the missing Content-Encoding headers used by this compressor. public abstract void Setup()"
  },
  "api/Sisk.Core.Http.CompressedContent.TryComputeLength.html": {
    "href": "api/Sisk.Core.Http.CompressedContent.TryComputeLength.html",
    "title": "Method TryComputeLength | Sisk Framework",
    "keywords": "Method TryComputeLength Namespace Sisk.Core.Http Assembly Sisk.Core.dll TryComputeLength(out long) protected override sealed bool TryComputeLength(out long length) Parameters length long Returns bool"
  },
  "api/Sisk.Core.Http.CompressedContent.html": {
    "href": "api/Sisk.Core.Http.CompressedContent.html",
    "title": "Class CompressedContent | Sisk Framework",
    "keywords": "Class CompressedContent Namespace Sisk.Core.Http Assembly Sisk.Core.dll Represents a base class for HTTP contents served over an compressing stream. public abstract class CompressedContent : HttpContent, IDisposable Inheritance object HttpContent CompressedContent Implements IDisposable Derived BrotliContent DeflateContent GZipContent Inherited Members HttpContent.ReadAsStringAsync() HttpContent.ReadAsStringAsync(CancellationToken) HttpContent.ReadAsByteArrayAsync() HttpContent.ReadAsByteArrayAsync(CancellationToken) HttpContent.ReadAsStream() HttpContent.ReadAsStream(CancellationToken) HttpContent.ReadAsStreamAsync() HttpContent.ReadAsStreamAsync(CancellationToken) HttpContent.CopyTo(Stream, TransportContext, CancellationToken) HttpContent.CopyToAsync(Stream) HttpContent.CopyToAsync(Stream, CancellationToken) HttpContent.CopyToAsync(Stream, TransportContext) HttpContent.CopyToAsync(Stream, TransportContext, CancellationToken) HttpContent.LoadIntoBufferAsync() HttpContent.LoadIntoBufferAsync(long) HttpContent.CreateContentReadStream(CancellationToken) HttpContent.CreateContentReadStreamAsync() HttpContent.CreateContentReadStreamAsync(CancellationToken) HttpContent.Dispose() HttpContent.Headers object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors CompressedContent(byte[]) Initializes a new instance of compressing stream with the specified byte array content. CompressedContent(Stream) Initializes a new instance of compressing stream with the specified stream content. CompressedContent(HttpContent) Initializes a new instance of compressing stream with the specified inner HTTP content. Properties InnerContent Gets the inner HTTP content. Methods Dispose(bool) GetCompressingStream(Stream) Gets a stream that compresses the output stream. SerializeToStream(Stream, TransportContext?, CancellationToken) SerializeToStreamAsync(Stream, TransportContext?) SerializeToStreamAsync(Stream, TransportContext?, CancellationToken) Setup() Represents the method that is invoked once within the constructor to setup this compressor. This method is indeeded to add the missing Content-Encoding headers used by this compressor. TryComputeLength(out long)"
  },
  "api/Sisk.Core.Http.DefaultMessagePage.CreateDefaultPageHtml.html": {
    "href": "api/Sisk.Core.Http.DefaultMessagePage.CreateDefaultPageHtml.html",
    "title": "Method CreateDefaultPageHtml | Sisk Framework",
    "keywords": "Method CreateDefaultPageHtml Namespace Sisk.Core.Http Assembly Sisk.Core.dll CreateDefaultPageHtml(string, string) Creates an static default page with given header and description. public static string CreateDefaultPageHtml(string firstHeader, string description) Parameters firstHeader string The static page header text. description string The static page description text. Returns string"
  },
  "api/Sisk.Core.Http.DefaultMessagePage.CreateDefaultResponse.html": {
    "href": "api/Sisk.Core.Http.DefaultMessagePage.CreateDefaultResponse.html",
    "title": "Method CreateDefaultResponse | Sisk Framework",
    "keywords": "Method CreateDefaultResponse Namespace Sisk.Core.Http Assembly Sisk.Core.dll CreateDefaultResponse(in HttpStatusInformation, string) Creates an static default page with given status code and description. public static HttpResponse CreateDefaultResponse(in HttpStatusInformation status, string longDescription) Parameters status HttpStatusInformation The static page status code. longDescription string The static page description text. Returns HttpResponse"
  },
  "api/Sisk.Core.Http.DefaultMessagePage.DefaultPageCSS.html": {
    "href": "api/Sisk.Core.Http.DefaultMessagePage.DefaultPageCSS.html",
    "title": "Property DefaultPageCSS | Sisk Framework",
    "keywords": "Property DefaultPageCSS Namespace Sisk.Core.Http Assembly Sisk.Core.dll DefaultPageCSS Gets or sets the page CSS string used by the page code. public static string DefaultPageCSS { get; set; } Property Value string"
  },
  "api/Sisk.Core.Http.DefaultMessagePage.html": {
    "href": "api/Sisk.Core.Http.DefaultMessagePage.html",
    "title": "Class DefaultMessagePage | Sisk Framework",
    "keywords": "Class DefaultMessagePage Namespace Sisk.Core.Http Assembly Sisk.Core.dll Provides methods for creating informative static pages used by Sisk. public static class DefaultMessagePage Inheritance object DefaultMessagePage Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties DefaultPageCSS Gets or sets the page CSS string used by the page code. Methods CreateDefaultPageHtml(string, string) Creates an static default page with given header and description. CreateDefaultResponse(in HttpStatusInformation, string) Creates an static default page with given status code and description."
  },
  "api/Sisk.Core.Http.DeflateContent.-ctor.html": {
    "href": "api/Sisk.Core.Http.DeflateContent.-ctor.html",
    "title": "Constructor DeflateContent | Sisk Framework",
    "keywords": "Constructor DeflateContent Namespace Sisk.Core.Http Assembly Sisk.Core.dll DeflateContent(HttpContent) Initializes a new instance of compressing stream with the specified inner HTTP content. public DeflateContent(HttpContent innerContent) Parameters innerContent HttpContent The inner HTTP content. DeflateContent(byte[]) Initializes a new instance of compressing stream with the specified byte array content. public DeflateContent(byte[] byteArrayContent) Parameters byteArrayContent byte[] The byte array content. DeflateContent(Stream) Initializes a new instance of compressing stream with the specified stream content. public DeflateContent(Stream baseContent) Parameters baseContent Stream The stream content."
  },
  "api/Sisk.Core.Http.DeflateContent.GetCompressingStream.html": {
    "href": "api/Sisk.Core.Http.DeflateContent.GetCompressingStream.html",
    "title": "Method GetCompressingStream | Sisk Framework",
    "keywords": "Method GetCompressingStream Namespace Sisk.Core.Http Assembly Sisk.Core.dll GetCompressingStream(Stream) Gets a stream that compresses the output stream. public override Stream GetCompressingStream(Stream outputStream) Parameters outputStream Stream The output stream to compress. Returns Stream A stream that compresses the output stream."
  },
  "api/Sisk.Core.Http.DeflateContent.Setup.html": {
    "href": "api/Sisk.Core.Http.DeflateContent.Setup.html",
    "title": "Method Setup | Sisk Framework",
    "keywords": "Method Setup Namespace Sisk.Core.Http Assembly Sisk.Core.dll Setup() Represents the method that is invoked once within the constructor to setup this compressor. This method is indeeded to add the missing Content-Encoding headers used by this compressor. public override void Setup()"
  },
  "api/Sisk.Core.Http.DeflateContent.html": {
    "href": "api/Sisk.Core.Http.DeflateContent.html",
    "title": "Class DeflateContent | Sisk Framework",
    "keywords": "Class DeflateContent Namespace Sisk.Core.Http Assembly Sisk.Core.dll Represents an HTTP content that is compressed using the Deflate algorithm. public class DeflateContent : CompressedContent, IDisposable Inheritance object HttpContent CompressedContent DeflateContent Implements IDisposable Inherited Members CompressedContent.SerializeToStream(Stream, TransportContext, CancellationToken) CompressedContent.SerializeToStreamAsync(Stream, TransportContext) CompressedContent.SerializeToStreamAsync(Stream, TransportContext, CancellationToken) CompressedContent.TryComputeLength(out long) CompressedContent.Dispose(bool) CompressedContent.InnerContent HttpContent.ReadAsStringAsync() HttpContent.ReadAsStringAsync(CancellationToken) HttpContent.ReadAsByteArrayAsync() HttpContent.ReadAsByteArrayAsync(CancellationToken) HttpContent.ReadAsStream() HttpContent.ReadAsStream(CancellationToken) HttpContent.ReadAsStreamAsync() HttpContent.ReadAsStreamAsync(CancellationToken) HttpContent.CopyTo(Stream, TransportContext, CancellationToken) HttpContent.CopyToAsync(Stream) HttpContent.CopyToAsync(Stream, CancellationToken) HttpContent.CopyToAsync(Stream, TransportContext) HttpContent.CopyToAsync(Stream, TransportContext, CancellationToken) HttpContent.LoadIntoBufferAsync() HttpContent.LoadIntoBufferAsync(long) HttpContent.CreateContentReadStream(CancellationToken) HttpContent.CreateContentReadStreamAsync() HttpContent.CreateContentReadStreamAsync(CancellationToken) HttpContent.Dispose() HttpContent.Headers object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors DeflateContent(byte[]) Initializes a new instance of compressing stream with the specified byte array content. DeflateContent(Stream) Initializes a new instance of compressing stream with the specified stream content. DeflateContent(HttpContent) Initializes a new instance of compressing stream with the specified inner HTTP content. Methods GetCompressingStream(Stream) Gets a stream that compresses the output stream. Setup() Represents the method that is invoked once within the constructor to setup this compressor. This method is indeeded to add the missing Content-Encoding headers used by this compressor."
  },
  "api/Sisk.Core.Http.ForwardingResolver.-ctor.html": {
    "href": "api/Sisk.Core.Http.ForwardingResolver.-ctor.html",
    "title": "Constructor ForwardingResolver | Sisk Framework",
    "keywords": "Constructor ForwardingResolver Namespace Sisk.Core.Http Assembly Sisk.Core.dll ForwardingResolver() protected ForwardingResolver()"
  },
  "api/Sisk.Core.Http.ForwardingResolver.OnResolveClientAddress.html": {
    "href": "api/Sisk.Core.Http.ForwardingResolver.OnResolveClientAddress.html",
    "title": "Method OnResolveClientAddress | Sisk Framework",
    "keywords": "Method OnResolveClientAddress Namespace Sisk.Core.Http Assembly Sisk.Core.dll OnResolveClientAddress(HttpRequest, IPEndPoint) Method that is called when resolving the IP address of the client in the request. public virtual IPAddress OnResolveClientAddress(HttpRequest request, IPEndPoint connectingEndpoint) Parameters request HttpRequest The HttpRequest object which contains parameters of the request. connectingEndpoint IPEndPoint The original connecting endpoint. Returns IPAddress"
  },
  "api/Sisk.Core.Http.ForwardingResolver.OnResolveRequestHost.html": {
    "href": "api/Sisk.Core.Http.ForwardingResolver.OnResolveRequestHost.html",
    "title": "Method OnResolveRequestHost | Sisk Framework",
    "keywords": "Method OnResolveRequestHost Namespace Sisk.Core.Http Assembly Sisk.Core.dll OnResolveRequestHost(HttpRequest, string) Method that is called when resolving the client request host. public virtual string OnResolveRequestHost(HttpRequest request, string requestedHost) Parameters request HttpRequest The HttpRequest object which contains parameters of the request. requestedHost string The original requested host. Returns string"
  },
  "api/Sisk.Core.Http.ForwardingResolver.OnResolveSecureConnection.html": {
    "href": "api/Sisk.Core.Http.ForwardingResolver.OnResolveSecureConnection.html",
    "title": "Method OnResolveSecureConnection | Sisk Framework",
    "keywords": "Method OnResolveSecureConnection Namespace Sisk.Core.Http Assembly Sisk.Core.dll OnResolveSecureConnection(HttpRequest, bool) Method that is called when resolving whether the HTTP request is using HTTPS or HTTP. public virtual bool OnResolveSecureConnection(HttpRequest request, bool isSecure) Parameters request HttpRequest The HttpRequest object which contains parameters of the request. isSecure bool The original security state of the request. Returns bool"
  },
  "api/Sisk.Core.Http.ForwardingResolver.html": {
    "href": "api/Sisk.Core.Http.ForwardingResolver.html",
    "title": "Class ForwardingResolver | Sisk Framework",
    "keywords": "Class ForwardingResolver Namespace Sisk.Core.Http Assembly Sisk.Core.dll Provides HTTP forwarding resolving methods that can be used to resolving the client remote address, host and protocol of a proxy, load balancer or CDN, through the HTTP request. public abstract class ForwardingResolver Inheritance object ForwardingResolver Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ForwardingResolver() Methods OnResolveClientAddress(HttpRequest, IPEndPoint) Method that is called when resolving the IP address of the client in the request. OnResolveRequestHost(HttpRequest, string) Method that is called when resolving the client request host. OnResolveSecureConnection(HttpRequest, bool) Method that is called when resolving whether the HTTP request is using HTTPS or HTTP."
  },
  "api/Sisk.Core.Http.GZipContent.-ctor.html": {
    "href": "api/Sisk.Core.Http.GZipContent.-ctor.html",
    "title": "Constructor GZipContent | Sisk Framework",
    "keywords": "Constructor GZipContent Namespace Sisk.Core.Http Assembly Sisk.Core.dll GZipContent(HttpContent) Initializes a new instance of compressing stream with the specified inner HTTP content. public GZipContent(HttpContent innerContent) Parameters innerContent HttpContent The inner HTTP content. GZipContent(byte[]) Initializes a new instance of compressing stream with the specified byte array content. public GZipContent(byte[] byteArrayContent) Parameters byteArrayContent byte[] The byte array content. GZipContent(Stream) Initializes a new instance of compressing stream with the specified stream content. public GZipContent(Stream baseContent) Parameters baseContent Stream The stream content."
  },
  "api/Sisk.Core.Http.GZipContent.GetCompressingStream.html": {
    "href": "api/Sisk.Core.Http.GZipContent.GetCompressingStream.html",
    "title": "Method GetCompressingStream | Sisk Framework",
    "keywords": "Method GetCompressingStream Namespace Sisk.Core.Http Assembly Sisk.Core.dll GetCompressingStream(Stream) Gets a stream that compresses the output stream. public override Stream GetCompressingStream(Stream outputStream) Parameters outputStream Stream The output stream to compress. Returns Stream A stream that compresses the output stream."
  },
  "api/Sisk.Core.Http.GZipContent.Setup.html": {
    "href": "api/Sisk.Core.Http.GZipContent.Setup.html",
    "title": "Method Setup | Sisk Framework",
    "keywords": "Method Setup Namespace Sisk.Core.Http Assembly Sisk.Core.dll Setup() Represents the method that is invoked once within the constructor to setup this compressor. This method is indeeded to add the missing Content-Encoding headers used by this compressor. public override void Setup()"
  },
  "api/Sisk.Core.Http.GZipContent.html": {
    "href": "api/Sisk.Core.Http.GZipContent.html",
    "title": "Class GZipContent | Sisk Framework",
    "keywords": "Class GZipContent Namespace Sisk.Core.Http Assembly Sisk.Core.dll Represents an HTTP content that is compressed using the GZip algorithm. public class GZipContent : CompressedContent, IDisposable Inheritance object HttpContent CompressedContent GZipContent Implements IDisposable Inherited Members CompressedContent.SerializeToStream(Stream, TransportContext, CancellationToken) CompressedContent.SerializeToStreamAsync(Stream, TransportContext) CompressedContent.SerializeToStreamAsync(Stream, TransportContext, CancellationToken) CompressedContent.TryComputeLength(out long) CompressedContent.Dispose(bool) CompressedContent.InnerContent HttpContent.ReadAsStringAsync() HttpContent.ReadAsStringAsync(CancellationToken) HttpContent.ReadAsByteArrayAsync() HttpContent.ReadAsByteArrayAsync(CancellationToken) HttpContent.ReadAsStream() HttpContent.ReadAsStream(CancellationToken) HttpContent.ReadAsStreamAsync() HttpContent.ReadAsStreamAsync(CancellationToken) HttpContent.CopyTo(Stream, TransportContext, CancellationToken) HttpContent.CopyToAsync(Stream) HttpContent.CopyToAsync(Stream, CancellationToken) HttpContent.CopyToAsync(Stream, TransportContext) HttpContent.CopyToAsync(Stream, TransportContext, CancellationToken) HttpContent.LoadIntoBufferAsync() HttpContent.LoadIntoBufferAsync(long) HttpContent.CreateContentReadStream(CancellationToken) HttpContent.CreateContentReadStreamAsync() HttpContent.CreateContentReadStreamAsync(CancellationToken) HttpContent.Dispose() HttpContent.Headers object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors GZipContent(byte[]) Initializes a new instance of compressing stream with the specified byte array content. GZipContent(Stream) Initializes a new instance of compressing stream with the specified stream content. GZipContent(HttpContent) Initializes a new instance of compressing stream with the specified inner HTTP content. Methods GetCompressingStream(Stream) Gets a stream that compresses the output stream. Setup() Represents the method that is invoked once within the constructor to setup this compressor. This method is indeeded to add the missing Content-Encoding headers used by this compressor."
  },
  "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.-ctor.html": {
    "href": "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.-ctor.html",
    "title": "Constructor AsyncHttpServerHandler | Sisk Framework",
    "keywords": "Constructor AsyncHttpServerHandler Namespace Sisk.Core.Http.Handlers Assembly Sisk.Core.dll AsyncHttpServerHandler() protected AsyncHttpServerHandler()"
  },
  "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.OnContextBagCreated.html": {
    "href": "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.OnContextBagCreated.html",
    "title": "Method OnContextBagCreated | Sisk Framework",
    "keywords": "Method OnContextBagCreated Namespace Sisk.Core.Http.Handlers Assembly Sisk.Core.dll OnContextBagCreated(TypedValueDictionary) Event that is called when an HTTP context is created within an HttpRequest object. protected override sealed void OnContextBagCreated(TypedValueDictionary contextBag) Parameters contextBag TypedValueDictionary The creating context bag."
  },
  "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.OnContextBagCreatedAsync.html": {
    "href": "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.OnContextBagCreatedAsync.html",
    "title": "Method OnContextBagCreatedAsync | Sisk Framework",
    "keywords": "Method OnContextBagCreatedAsync Namespace Sisk.Core.Http.Handlers Assembly Sisk.Core.dll OnContextBagCreatedAsync(TypedValueDictionary) Method that is called when an HTTP context is created within an HttpRequest object. protected virtual Task OnContextBagCreatedAsync(TypedValueDictionary contextBag) Parameters contextBag TypedValueDictionary The creating context bag. Returns Task"
  },
  "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.OnException.html": {
    "href": "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.OnException.html",
    "title": "Method OnException | Sisk Framework",
    "keywords": "Method OnException Namespace Sisk.Core.Http.Handlers Assembly Sisk.Core.dll OnException(Exception) Event that is called when an exception is caught in the HTTP server. This method is called regardless of whether ThrowExceptions is enabled or not. protected override sealed void OnException(Exception exception) Parameters exception Exception The exception object."
  },
  "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.OnExceptionAsync.html": {
    "href": "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.OnExceptionAsync.html",
    "title": "Method OnExceptionAsync | Sisk Framework",
    "keywords": "Method OnExceptionAsync Namespace Sisk.Core.Http.Handlers Assembly Sisk.Core.dll OnExceptionAsync(Exception) Method that is called when an exception is caught in the HTTP server. This method is called regardless of whether ThrowExceptions is enabled or not. protected virtual Task OnExceptionAsync(Exception exception) Parameters exception Exception The exception object. Returns Task"
  },
  "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.OnHttpRequestClose.html": {
    "href": "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.OnHttpRequestClose.html",
    "title": "Method OnHttpRequestClose | Sisk Framework",
    "keywords": "Method OnHttpRequestClose Namespace Sisk.Core.Http.Handlers Assembly Sisk.Core.dll OnHttpRequestClose(HttpServerExecutionResult) Event that is called when an HttpRequest is closed in the HTTP server. protected override sealed void OnHttpRequestClose(HttpServerExecutionResult result) Parameters result HttpServerExecutionResult The result of the execution of the request."
  },
  "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.OnHttpRequestCloseAsync.html": {
    "href": "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.OnHttpRequestCloseAsync.html",
    "title": "Method OnHttpRequestCloseAsync | Sisk Framework",
    "keywords": "Method OnHttpRequestCloseAsync Namespace Sisk.Core.Http.Handlers Assembly Sisk.Core.dll OnHttpRequestCloseAsync(HttpServerExecutionResult) Method that is called when an HttpRequest is closed in the HTTP server. protected virtual Task OnHttpRequestCloseAsync(HttpServerExecutionResult result) Parameters result HttpServerExecutionResult The result of the execution of the request. Returns Task"
  },
  "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.OnHttpRequestOpen.html": {
    "href": "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.OnHttpRequestOpen.html",
    "title": "Method OnHttpRequestOpen | Sisk Framework",
    "keywords": "Method OnHttpRequestOpen Namespace Sisk.Core.Http.Handlers Assembly Sisk.Core.dll OnHttpRequestOpen(HttpRequest) Event that is called when an HttpRequest is received in the HTTP server. protected override sealed void OnHttpRequestOpen(HttpRequest request) Parameters request HttpRequest The connecting HTTP request entity."
  },
  "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.OnHttpRequestOpenAsync.html": {
    "href": "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.OnHttpRequestOpenAsync.html",
    "title": "Method OnHttpRequestOpenAsync | Sisk Framework",
    "keywords": "Method OnHttpRequestOpenAsync Namespace Sisk.Core.Http.Handlers Assembly Sisk.Core.dll OnHttpRequestOpenAsync(HttpRequest) Method that is called when an HttpRequest is received in the HTTP server. protected virtual Task OnHttpRequestOpenAsync(HttpRequest request) Parameters request HttpRequest The connecting HTTP request entity. Returns Task"
  },
  "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.OnServerStarted.html": {
    "href": "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.OnServerStarted.html",
    "title": "Method OnServerStarted | Sisk Framework",
    "keywords": "Method OnServerStarted Namespace Sisk.Core.Http.Handlers Assembly Sisk.Core.dll OnServerStarted(HttpServer) Event that is called immediately after starting the HttpServer, when it's ready and listening. protected override sealed void OnServerStarted(HttpServer server) Parameters server HttpServer The HTTP server entity which is ready."
  },
  "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.OnServerStartedAsync.html": {
    "href": "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.OnServerStartedAsync.html",
    "title": "Method OnServerStartedAsync | Sisk Framework",
    "keywords": "Method OnServerStartedAsync Namespace Sisk.Core.Http.Handlers Assembly Sisk.Core.dll OnServerStartedAsync(HttpServer) Method that is called immediately after starting the HttpServer, when it's ready and listening. protected virtual Task OnServerStartedAsync(HttpServer server) Parameters server HttpServer The HTTP server entity which is ready. Returns Task"
  },
  "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.OnServerStarting.html": {
    "href": "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.OnServerStarting.html",
    "title": "Method OnServerStarting | Sisk Framework",
    "keywords": "Method OnServerStarting Namespace Sisk.Core.Http.Handlers Assembly Sisk.Core.dll OnServerStarting(HttpServer) Event that is called immediately before starting the HttpServer. protected override sealed void OnServerStarting(HttpServer server) Parameters server HttpServer The HTTP server entity which is starting."
  },
  "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.OnServerStartingAsync.html": {
    "href": "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.OnServerStartingAsync.html",
    "title": "Method OnServerStartingAsync | Sisk Framework",
    "keywords": "Method OnServerStartingAsync Namespace Sisk.Core.Http.Handlers Assembly Sisk.Core.dll OnServerStartingAsync(HttpServer) Method that is called immediately before starting the HttpServer. protected virtual Task OnServerStartingAsync(HttpServer server) Parameters server HttpServer The HTTP server entity which is starting. Returns Task"
  },
  "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.OnServerStopped.html": {
    "href": "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.OnServerStopped.html",
    "title": "Method OnServerStopped | Sisk Framework",
    "keywords": "Method OnServerStopped Namespace Sisk.Core.Http.Handlers Assembly Sisk.Core.dll OnServerStopped(HttpServer) Event that is called after the HttpServer is stopped, meaning it has stopped from listening to requests. protected override sealed void OnServerStopped(HttpServer server) Parameters server HttpServer The HTTP server entity which has stopped."
  },
  "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.OnServerStoppedAsync.html": {
    "href": "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.OnServerStoppedAsync.html",
    "title": "Method OnServerStoppedAsync | Sisk Framework",
    "keywords": "Method OnServerStoppedAsync Namespace Sisk.Core.Http.Handlers Assembly Sisk.Core.dll OnServerStoppedAsync(HttpServer) Method that is called after the HttpServer is stopped, meaning it has stopped from listening to requests. protected virtual Task OnServerStoppedAsync(HttpServer server) Parameters server HttpServer The HTTP server entity which has stopped. Returns Task"
  },
  "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.OnServerStopping.html": {
    "href": "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.OnServerStopping.html",
    "title": "Method OnServerStopping | Sisk Framework",
    "keywords": "Method OnServerStopping Namespace Sisk.Core.Http.Handlers Assembly Sisk.Core.dll OnServerStopping(HttpServer) Event that is called before the HttpServer stop, when it is stopping from listening requests. protected override sealed void OnServerStopping(HttpServer server) Parameters server HttpServer The HTTP server entity which is stopping."
  },
  "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.OnServerStoppingAsync.html": {
    "href": "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.OnServerStoppingAsync.html",
    "title": "Method OnServerStoppingAsync | Sisk Framework",
    "keywords": "Method OnServerStoppingAsync Namespace Sisk.Core.Http.Handlers Assembly Sisk.Core.dll OnServerStoppingAsync(HttpServer) Method that is called before the HttpServer stop, when it is stopping from listening requests. protected virtual Task OnServerStoppingAsync(HttpServer server) Parameters server HttpServer The HTTP server entity which is stopping. Returns Task"
  },
  "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.OnSetupRouter.html": {
    "href": "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.OnSetupRouter.html",
    "title": "Method OnSetupRouter | Sisk Framework",
    "keywords": "Method OnSetupRouter Namespace Sisk.Core.Http.Handlers Assembly Sisk.Core.dll OnSetupRouter(Router) Event that is called when an Router is binded to the HTTP server. protected override sealed void OnSetupRouter(Router router) Parameters router Router The router entity which is binded."
  },
  "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.OnSetupRouterAsync.html": {
    "href": "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.OnSetupRouterAsync.html",
    "title": "Method OnSetupRouterAsync | Sisk Framework",
    "keywords": "Method OnSetupRouterAsync Namespace Sisk.Core.Http.Handlers Assembly Sisk.Core.dll OnSetupRouterAsync(Router) Method that is called when an Router is binded to the HTTP server. protected virtual Task OnSetupRouterAsync(Router router) Parameters router Router The router entity which is binded. Returns Task"
  },
  "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.html": {
    "href": "api/Sisk.Core.Http.Handlers.AsyncHttpServerHandler.html",
    "title": "Class AsyncHttpServerHandler | Sisk Framework",
    "keywords": "Class AsyncHttpServerHandler Namespace Sisk.Core.Http.Handlers Assembly Sisk.Core.dll Represents an asynchronous event handler for the HttpServer, router, and related events. public abstract class AsyncHttpServerHandler : HttpServerHandler Inheritance object HttpServerHandler AsyncHttpServerHandler Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors AsyncHttpServerHandler() Methods OnContextBagCreated(TypedValueDictionary) Event that is called when an HTTP context is created within an HttpRequest object. OnContextBagCreatedAsync(TypedValueDictionary) Method that is called when an HTTP context is created within an HttpRequest object. OnException(Exception) Event that is called when an exception is caught in the HTTP server. This method is called regardless of whether ThrowExceptions is enabled or not. OnExceptionAsync(Exception) Method that is called when an exception is caught in the HTTP server. This method is called regardless of whether ThrowExceptions is enabled or not. OnHttpRequestClose(HttpServerExecutionResult) Event that is called when an HttpRequest is closed in the HTTP server. OnHttpRequestCloseAsync(HttpServerExecutionResult) Method that is called when an HttpRequest is closed in the HTTP server. OnHttpRequestOpen(HttpRequest) Event that is called when an HttpRequest is received in the HTTP server. OnHttpRequestOpenAsync(HttpRequest) Method that is called when an HttpRequest is received in the HTTP server. OnServerStarted(HttpServer) Event that is called immediately after starting the HttpServer, when it's ready and listening. OnServerStartedAsync(HttpServer) Method that is called immediately after starting the HttpServer, when it's ready and listening. OnServerStarting(HttpServer) Event that is called immediately before starting the HttpServer. OnServerStartingAsync(HttpServer) Method that is called immediately before starting the HttpServer. OnServerStopped(HttpServer) Event that is called after the HttpServer is stopped, meaning it has stopped from listening to requests. OnServerStoppedAsync(HttpServer) Method that is called after the HttpServer is stopped, meaning it has stopped from listening to requests. OnServerStopping(HttpServer) Event that is called before the HttpServer stop, when it is stopping from listening requests. OnServerStoppingAsync(HttpServer) Method that is called before the HttpServer stop, when it is stopping from listening requests. OnSetupRouter(Router) Event that is called when an Router is binded to the HTTP server. OnSetupRouterAsync(Router) Method that is called when an Router is binded to the HTTP server."
  },
  "api/Sisk.Core.Http.Handlers.HttpServerHandler.-ctor.html": {
    "href": "api/Sisk.Core.Http.Handlers.HttpServerHandler.-ctor.html",
    "title": "Constructor HttpServerHandler | Sisk Framework",
    "keywords": "Constructor HttpServerHandler Namespace Sisk.Core.Http.Handlers Assembly Sisk.Core.dll HttpServerHandler() protected HttpServerHandler()"
  },
  "api/Sisk.Core.Http.Handlers.HttpServerHandler.OnContextBagCreated.html": {
    "href": "api/Sisk.Core.Http.Handlers.HttpServerHandler.OnContextBagCreated.html",
    "title": "Method OnContextBagCreated | Sisk Framework",
    "keywords": "Method OnContextBagCreated Namespace Sisk.Core.Http.Handlers Assembly Sisk.Core.dll OnContextBagCreated(TypedValueDictionary) Event that is called when an HTTP context is created within an HttpRequest object. protected virtual void OnContextBagCreated(TypedValueDictionary contextBag) Parameters contextBag TypedValueDictionary The creating context bag."
  },
  "api/Sisk.Core.Http.Handlers.HttpServerHandler.OnException.html": {
    "href": "api/Sisk.Core.Http.Handlers.HttpServerHandler.OnException.html",
    "title": "Method OnException | Sisk Framework",
    "keywords": "Method OnException Namespace Sisk.Core.Http.Handlers Assembly Sisk.Core.dll OnException(Exception) Event that is called when an exception is caught in the HTTP server. This method is called regardless of whether ThrowExceptions is enabled or not. protected virtual void OnException(Exception exception) Parameters exception Exception The exception object."
  },
  "api/Sisk.Core.Http.Handlers.HttpServerHandler.OnHttpRequestClose.html": {
    "href": "api/Sisk.Core.Http.Handlers.HttpServerHandler.OnHttpRequestClose.html",
    "title": "Method OnHttpRequestClose | Sisk Framework",
    "keywords": "Method OnHttpRequestClose Namespace Sisk.Core.Http.Handlers Assembly Sisk.Core.dll OnHttpRequestClose(HttpServerExecutionResult) Event that is called when an HttpRequest is closed in the HTTP server. protected virtual void OnHttpRequestClose(HttpServerExecutionResult result) Parameters result HttpServerExecutionResult The result of the execution of the request."
  },
  "api/Sisk.Core.Http.Handlers.HttpServerHandler.OnHttpRequestOpen.html": {
    "href": "api/Sisk.Core.Http.Handlers.HttpServerHandler.OnHttpRequestOpen.html",
    "title": "Method OnHttpRequestOpen | Sisk Framework",
    "keywords": "Method OnHttpRequestOpen Namespace Sisk.Core.Http.Handlers Assembly Sisk.Core.dll OnHttpRequestOpen(HttpRequest) Event that is called when an HttpRequest is received in the HTTP server. protected virtual void OnHttpRequestOpen(HttpRequest request) Parameters request HttpRequest The connecting HTTP request entity."
  },
  "api/Sisk.Core.Http.Handlers.HttpServerHandler.OnServerStarted.html": {
    "href": "api/Sisk.Core.Http.Handlers.HttpServerHandler.OnServerStarted.html",
    "title": "Method OnServerStarted | Sisk Framework",
    "keywords": "Method OnServerStarted Namespace Sisk.Core.Http.Handlers Assembly Sisk.Core.dll OnServerStarted(HttpServer) Event that is called immediately after starting the HttpServer, when it's ready and listening. protected virtual void OnServerStarted(HttpServer server) Parameters server HttpServer The HTTP server entity which is ready."
  },
  "api/Sisk.Core.Http.Handlers.HttpServerHandler.OnServerStarting.html": {
    "href": "api/Sisk.Core.Http.Handlers.HttpServerHandler.OnServerStarting.html",
    "title": "Method OnServerStarting | Sisk Framework",
    "keywords": "Method OnServerStarting Namespace Sisk.Core.Http.Handlers Assembly Sisk.Core.dll OnServerStarting(HttpServer) Event that is called immediately before starting the HttpServer. protected virtual void OnServerStarting(HttpServer server) Parameters server HttpServer The HTTP server entity which is starting."
  },
  "api/Sisk.Core.Http.Handlers.HttpServerHandler.OnServerStopped.html": {
    "href": "api/Sisk.Core.Http.Handlers.HttpServerHandler.OnServerStopped.html",
    "title": "Method OnServerStopped | Sisk Framework",
    "keywords": "Method OnServerStopped Namespace Sisk.Core.Http.Handlers Assembly Sisk.Core.dll OnServerStopped(HttpServer) Event that is called after the HttpServer is stopped, meaning it has stopped from listening to requests. protected virtual void OnServerStopped(HttpServer server) Parameters server HttpServer The HTTP server entity which has stopped."
  },
  "api/Sisk.Core.Http.Handlers.HttpServerHandler.OnServerStopping.html": {
    "href": "api/Sisk.Core.Http.Handlers.HttpServerHandler.OnServerStopping.html",
    "title": "Method OnServerStopping | Sisk Framework",
    "keywords": "Method OnServerStopping Namespace Sisk.Core.Http.Handlers Assembly Sisk.Core.dll OnServerStopping(HttpServer) Event that is called before the HttpServer stop, when it is stopping from listening requests. protected virtual void OnServerStopping(HttpServer server) Parameters server HttpServer The HTTP server entity which is stopping."
  },
  "api/Sisk.Core.Http.Handlers.HttpServerHandler.OnSetupRouter.html": {
    "href": "api/Sisk.Core.Http.Handlers.HttpServerHandler.OnSetupRouter.html",
    "title": "Method OnSetupRouter | Sisk Framework",
    "keywords": "Method OnSetupRouter Namespace Sisk.Core.Http.Handlers Assembly Sisk.Core.dll OnSetupRouter(Router) Event that is called when an Router is binded to the HTTP server. protected virtual void OnSetupRouter(Router router) Parameters router Router The router entity which is binded."
  },
  "api/Sisk.Core.Http.Handlers.HttpServerHandler.html": {
    "href": "api/Sisk.Core.Http.Handlers.HttpServerHandler.html",
    "title": "Class HttpServerHandler | Sisk Framework",
    "keywords": "Class HttpServerHandler Namespace Sisk.Core.Http.Handlers Assembly Sisk.Core.dll Represents an event handler for the HttpServer, router, and related events. public abstract class HttpServerHandler Inheritance object HttpServerHandler Derived AsyncHttpServerHandler JsonRpcServerHandler SslProxyServerHandler Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors HttpServerHandler() Methods OnContextBagCreated(TypedValueDictionary) Event that is called when an HTTP context is created within an HttpRequest object. OnException(Exception) Event that is called when an exception is caught in the HTTP server. This method is called regardless of whether ThrowExceptions is enabled or not. OnHttpRequestClose(HttpServerExecutionResult) Event that is called when an HttpRequest is closed in the HTTP server. OnHttpRequestOpen(HttpRequest) Event that is called when an HttpRequest is received in the HTTP server. OnServerStarted(HttpServer) Event that is called immediately after starting the HttpServer, when it's ready and listening. OnServerStarting(HttpServer) Event that is called immediately before starting the HttpServer. OnServerStopped(HttpServer) Event that is called after the HttpServer is stopped, meaning it has stopped from listening to requests. OnServerStopping(HttpServer) Event that is called before the HttpServer stop, when it is stopping from listening requests. OnSetupRouter(Router) Event that is called when an Router is binded to the HTTP server."
  },
  "api/Sisk.Core.Http.Handlers.html": {
    "href": "api/Sisk.Core.Http.Handlers.html",
    "title": "Namespace Sisk.Core.Http.Handlers | Sisk Framework",
    "keywords": "Namespace Sisk.Core.Http.Handlers Classes AsyncHttpServerHandler Represents an asynchronous event handler for the HttpServer, router, and related events. HttpServerHandler Represents an event handler for the HttpServer, router, and related events."
  },
  "api/Sisk.Core.Http.Hosting.ConfigurationContext.ConfigurationFile.html": {
    "href": "api/Sisk.Core.Http.Hosting.ConfigurationContext.ConfigurationFile.html",
    "title": "Property ConfigurationFile | Sisk Framework",
    "keywords": "Property ConfigurationFile Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll ConfigurationFile Gets the absolute path to the configuration file. The file is guaranteed to exist when getting this property value. public string ConfigurationFile { get; } Property Value string"
  },
  "api/Sisk.Core.Http.Hosting.ConfigurationContext.Host.html": {
    "href": "api/Sisk.Core.Http.Hosting.ConfigurationContext.Host.html",
    "title": "Property Host | Sisk Framework",
    "keywords": "Property Host Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll Host Gets the HttpServerHostContext which are configuring this context. public HttpServerHostContext Host { get; } Property Value HttpServerHostContext"
  },
  "api/Sisk.Core.Http.Hosting.ConfigurationContext.Parameters.html": {
    "href": "api/Sisk.Core.Http.Hosting.ConfigurationContext.Parameters.html",
    "title": "Property Parameters | Sisk Framework",
    "keywords": "Property Parameters Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll Parameters Gets the InitializationParameterCollection collection for defining configuration parameters of the host application. public InitializationParameterCollection Parameters { get; } Property Value InitializationParameterCollection"
  },
  "api/Sisk.Core.Http.Hosting.ConfigurationContext.TargetListeningHost.html": {
    "href": "api/Sisk.Core.Http.Hosting.ConfigurationContext.TargetListeningHost.html",
    "title": "Property TargetListeningHost | Sisk Framework",
    "keywords": "Property TargetListeningHost Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll TargetListeningHost Gets the target ListeningHost which are configuring this context. public ListeningHost TargetListeningHost { get; } Property Value ListeningHost"
  },
  "api/Sisk.Core.Http.Hosting.ConfigurationContext.html": {
    "href": "api/Sisk.Core.Http.Hosting.ConfigurationContext.html",
    "title": "Class ConfigurationContext | Sisk Framework",
    "keywords": "Class ConfigurationContext Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll Represents a reading context for a portable configuration file. public sealed class ConfigurationContext Inheritance object ConfigurationContext Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties ConfigurationFile Gets the absolute path to the configuration file. The file is guaranteed to exist when getting this property value. Host Gets the HttpServerHostContext which are configuring this context. Parameters Gets the InitializationParameterCollection collection for defining configuration parameters of the host application. TargetListeningHost Gets the target ListeningHost which are configuring this context."
  },
  "api/Sisk.Core.Http.Hosting.ConfigurationFileLookupDirectory.html": {
    "href": "api/Sisk.Core.Http.Hosting.ConfigurationFileLookupDirectory.html",
    "title": "Enum ConfigurationFileLookupDirectory | Sisk Framework",
    "keywords": "Enum ConfigurationFileLookupDirectory Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll Represents the base directory where the IConfigurationReader should search for the configuration file. [Flags] public enum ConfigurationFileLookupDirectory Fields AppDirectory = 4 The IConfigurationReader should search in the executable base directory. CurrentDirectory = 2 The IConfigurationReader should search in the process current/base directory."
  },
  "api/Sisk.Core.Http.Hosting.HttpServerHostContext.AccessLogs.html": {
    "href": "api/Sisk.Core.Http.Hosting.HttpServerHostContext.AccessLogs.html",
    "title": "Property AccessLogs | Sisk Framework",
    "keywords": "Property AccessLogs Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll AccessLogs Gets the configured access log stream. This property is inherited from ServerConfiguration. public LogStream? AccessLogs { get; } Property Value LogStream"
  },
  "api/Sisk.Core.Http.Hosting.HttpServerHostContext.CrossOriginResourceSharingPolicy.html": {
    "href": "api/Sisk.Core.Http.Hosting.HttpServerHostContext.CrossOriginResourceSharingPolicy.html",
    "title": "Property CrossOriginResourceSharingPolicy | Sisk Framework",
    "keywords": "Property CrossOriginResourceSharingPolicy Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll CrossOriginResourceSharingPolicy Gets the host CrossOriginResourceSharingPolicy. public CrossOriginResourceSharingHeaders CrossOriginResourceSharingPolicy { get; set; } Property Value CrossOriginResourceSharingHeaders"
  },
  "api/Sisk.Core.Http.Hosting.HttpServerHostContext.Dispose.html": {
    "href": "api/Sisk.Core.Http.Hosting.HttpServerHostContext.Dispose.html",
    "title": "Method Dispose | Sisk Framework",
    "keywords": "Method Dispose Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll Dispose() Invalidates this class and releases the resources used by it, and permanently closes the HTTP server. public void Dispose()"
  },
  "api/Sisk.Core.Http.Hosting.HttpServerHostContext.ErrorLogs.html": {
    "href": "api/Sisk.Core.Http.Hosting.HttpServerHostContext.ErrorLogs.html",
    "title": "Property ErrorLogs | Sisk Framework",
    "keywords": "Property ErrorLogs Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll ErrorLogs Gets the configured error log stream. This property is inherited from ServerConfiguration. public LogStream? ErrorLogs { get; } Property Value LogStream"
  },
  "api/Sisk.Core.Http.Hosting.HttpServerHostContext.HttpServer.html": {
    "href": "api/Sisk.Core.Http.Hosting.HttpServerHostContext.HttpServer.html",
    "title": "Property HttpServer | Sisk Framework",
    "keywords": "Property HttpServer Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll HttpServer Gets the host HTTP server. public HttpServer HttpServer { get; } Property Value HttpServer"
  },
  "api/Sisk.Core.Http.Hosting.HttpServerHostContext.Parameters.html": {
    "href": "api/Sisk.Core.Http.Hosting.HttpServerHostContext.Parameters.html",
    "title": "Property Parameters | Sisk Framework",
    "keywords": "Property Parameters Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll Parameters Gets the initialization parameters from the portable configuration file. public InitializationParameterCollection Parameters { get; } Property Value InitializationParameterCollection"
  },
  "api/Sisk.Core.Http.Hosting.HttpServerHostContext.Router.html": {
    "href": "api/Sisk.Core.Http.Hosting.HttpServerHostContext.Router.html",
    "title": "Property Router | Sisk Framework",
    "keywords": "Property Router Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll Router Gets the host router. public Router Router { get; set; } Property Value Router"
  },
  "api/Sisk.Core.Http.Hosting.HttpServerHostContext.ServerConfiguration.html": {
    "href": "api/Sisk.Core.Http.Hosting.HttpServerHostContext.ServerConfiguration.html",
    "title": "Property ServerConfiguration | Sisk Framework",
    "keywords": "Property ServerConfiguration Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll ServerConfiguration Gets the host server configuration. public HttpServerConfiguration ServerConfiguration { get; } Property Value HttpServerConfiguration"
  },
  "api/Sisk.Core.Http.Hosting.HttpServerHostContext.Start.html": {
    "href": "api/Sisk.Core.Http.Hosting.HttpServerHostContext.Start.html",
    "title": "Method Start | Sisk Framework",
    "keywords": "Method Start Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll Start(bool, bool) Starts the HTTP server. public void Start(bool verbose = true, bool preventHault = true) Parameters verbose bool Optional. Specifies if the application should write the listening prefix welcome message. preventHault bool Optional. Specifies if the application should pause the main application loop."
  },
  "api/Sisk.Core.Http.Hosting.HttpServerHostContext.StartAsync.html": {
    "href": "api/Sisk.Core.Http.Hosting.HttpServerHostContext.StartAsync.html",
    "title": "Method StartAsync | Sisk Framework",
    "keywords": "Method StartAsync Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll StartAsync(bool, bool) Asynchronously starts the HTTP server. public Task StartAsync(bool verbose = true, bool preventHault = true) Parameters verbose bool Optional. Specifies if the application should write the listening prefix welcome message. preventHault bool Optional. Specifies if the application should pause the main application loop. Returns Task"
  },
  "api/Sisk.Core.Http.Hosting.HttpServerHostContext.html": {
    "href": "api/Sisk.Core.Http.Hosting.HttpServerHostContext.html",
    "title": "Class HttpServerHostContext | Sisk Framework",
    "keywords": "Class HttpServerHostContext Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll Represents the class that hosts most of the components needed to run a Sisk application. public sealed class HttpServerHostContext : IDisposable Inheritance object HttpServerHostContext Implements IDisposable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties AccessLogs Gets the configured access log stream. This property is inherited from ServerConfiguration. CrossOriginResourceSharingPolicy Gets the host CrossOriginResourceSharingPolicy. ErrorLogs Gets the configured error log stream. This property is inherited from ServerConfiguration. HttpServer Gets the host HTTP server. Parameters Gets the initialization parameters from the portable configuration file. Router Gets the host router. ServerConfiguration Gets the host server configuration. Methods Dispose() Invalidates this class and releases the resources used by it, and permanently closes the HTTP server. Start(bool, bool) Starts the HTTP server. StartAsync(bool, bool) Asynchronously starts the HTTP server."
  },
  "api/Sisk.Core.Http.Hosting.HttpServerHostContextBuilder.Build.html": {
    "href": "api/Sisk.Core.Http.Hosting.HttpServerHostContextBuilder.Build.html",
    "title": "Method Build | Sisk Framework",
    "keywords": "Method Build Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll Build() Builds an HttpServerHostContext with the specified parameters. public HttpServerHostContext Build() Returns HttpServerHostContext"
  },
  "api/Sisk.Core.Http.Hosting.HttpServerHostContextBuilder.CatchConfigurationExceptions.html": {
    "href": "api/Sisk.Core.Http.Hosting.HttpServerHostContextBuilder.CatchConfigurationExceptions.html",
    "title": "Property CatchConfigurationExceptions | Sisk Framework",
    "keywords": "Property CatchConfigurationExceptions Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll CatchConfigurationExceptions Defines how the constructor should capture errors thrown within UsePortableConfiguration(Action<PortableConfigurationBuilder>) and display in the Console. public static HttpServerHostContextBuilderExceptionMode CatchConfigurationExceptions { get; set; } Property Value HttpServerHostContextBuilderExceptionMode"
  },
  "api/Sisk.Core.Http.Hosting.HttpServerHostContextBuilder.ServerConfiguration.html": {
    "href": "api/Sisk.Core.Http.Hosting.HttpServerHostContextBuilder.ServerConfiguration.html",
    "title": "Property ServerConfiguration | Sisk Framework",
    "keywords": "Property ServerConfiguration Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll ServerConfiguration Gets the Server Configuration object. public HttpServerConfiguration ServerConfiguration { get; } Property Value HttpServerConfiguration"
  },
  "api/Sisk.Core.Http.Hosting.HttpServerHostContextBuilder.UseAutoScan.html": {
    "href": "api/Sisk.Core.Http.Hosting.HttpServerHostContextBuilder.UseAutoScan.html",
    "title": "Method UseAutoScan | Sisk Framework",
    "keywords": "Method UseAutoScan Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll UseAutoScan<TModule>() This method is an shortcut for calling AutoScanModules<TModule>(). public HttpServerHostContextBuilder UseAutoScan<TModule>() where TModule : RouterModule Returns HttpServerHostContextBuilder Type Parameters TModule An class which implements RouterModule, or the router module itself. UseAutoScan<TModule>(Assembly) This method is an shortcut for calling AutoScanModules<TModule>(). public HttpServerHostContextBuilder UseAutoScan<TModule>(Assembly t) where TModule : RouterModule Parameters t Assembly The assembly where the scanning types are. Returns HttpServerHostContextBuilder Type Parameters TModule An class which implements RouterModule, or the router module itself."
  },
  "api/Sisk.Core.Http.Hosting.HttpServerHostContextBuilder.UseBootstraper.html": {
    "href": "api/Sisk.Core.Http.Hosting.HttpServerHostContextBuilder.UseBootstraper.html",
    "title": "Method UseBootstraper | Sisk Framework",
    "keywords": "Method UseBootstraper Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll UseBootstraper(Action) Adds an function that will be executed immediately before starting the HTTP server. public HttpServerHostContextBuilder UseBootstraper(Action bootstrapAction) Parameters bootstrapAction Action The action which will be executed before the HTTP server start. Returns HttpServerHostContextBuilder"
  },
  "api/Sisk.Core.Http.Hosting.HttpServerHostContextBuilder.UseConfiguration.html": {
    "href": "api/Sisk.Core.Http.Hosting.HttpServerHostContextBuilder.UseConfiguration.html",
    "title": "Method UseConfiguration | Sisk Framework",
    "keywords": "Method UseConfiguration Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll UseConfiguration(Action<HttpServerConfiguration>) Calls an action that has the HTTP server configuration as an argument. public HttpServerHostContextBuilder UseConfiguration(Action<HttpServerConfiguration> handler) Parameters handler Action<HttpServerConfiguration> An action where the first argument is an HttpServerConfiguration. Returns HttpServerHostContextBuilder"
  },
  "api/Sisk.Core.Http.Hosting.HttpServerHostContextBuilder.UseCors.html": {
    "href": "api/Sisk.Core.Http.Hosting.HttpServerHostContextBuilder.UseCors.html",
    "title": "Method UseCors | Sisk Framework",
    "keywords": "Method UseCors Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll UseCors(Action<CrossOriginResourceSharingHeaders>) Calls an action that has an CrossOriginResourceSharingHeaders instance from the main listening host as an argument. public HttpServerHostContextBuilder UseCors(Action<CrossOriginResourceSharingHeaders> handler) Parameters handler Action<CrossOriginResourceSharingHeaders> An action where the first argument is the main CrossOriginResourceSharingHeaders object. Returns HttpServerHostContextBuilder UseCors(CrossOriginResourceSharingHeaders) Sets an CrossOriginResourceSharingHeaders instance in the current listening host. public HttpServerHostContextBuilder UseCors(CrossOriginResourceSharingHeaders cors) Parameters cors CrossOriginResourceSharingHeaders The CrossOriginResourceSharingHeaders to the current host builder. Returns HttpServerHostContextBuilder"
  },
  "api/Sisk.Core.Http.Hosting.HttpServerHostContextBuilder.UseFlags.html": {
    "href": "api/Sisk.Core.Http.Hosting.HttpServerHostContextBuilder.UseFlags.html",
    "title": "Method UseFlags | Sisk Framework",
    "keywords": "Method UseFlags Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll UseFlags(HttpServerFlags) Overrides the HTTP server flags with the provided flags. public HttpServerHostContextBuilder UseFlags(HttpServerFlags flags) Parameters flags HttpServerFlags The flags that will be set on the HTTP server. Returns HttpServerHostContextBuilder"
  },
  "api/Sisk.Core.Http.Hosting.HttpServerHostContextBuilder.UseForwardingResolver.html": {
    "href": "api/Sisk.Core.Http.Hosting.HttpServerHostContextBuilder.UseForwardingResolver.html",
    "title": "Method UseForwardingResolver | Sisk Framework",
    "keywords": "Method UseForwardingResolver Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll UseForwardingResolver(ForwardingResolver) This method is a shortcut for setting ForwardingResolver. public HttpServerHostContextBuilder UseForwardingResolver(ForwardingResolver resolver) Parameters resolver ForwardingResolver The ForwardingResolver object. Returns HttpServerHostContextBuilder UseForwardingResolver<TForwardingResolver>() This method is a shortcut for setting ForwardingResolver. public HttpServerHostContextBuilder UseForwardingResolver<TForwardingResolver>() where TForwardingResolver : ForwardingResolver, new() Returns HttpServerHostContextBuilder Type Parameters TForwardingResolver The type which implements ForwardingResolver."
  },
  "api/Sisk.Core.Http.Hosting.HttpServerHostContextBuilder.UseHandler.html": {
    "href": "api/Sisk.Core.Http.Hosting.HttpServerHostContextBuilder.UseHandler.html",
    "title": "Method UseHandler | Sisk Framework",
    "keywords": "Method UseHandler Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll UseHandler<THandler>() This method is an shortcut for calling RegisterHandler<T>(). public HttpServerHostContextBuilder UseHandler<THandler>() where THandler : HttpServerHandler, new() Returns HttpServerHostContextBuilder Type Parameters THandler The handler which implements HttpServerHandler. UseHandler(HttpServerHandler) This method is an shortcut for calling RegisterHandler(HttpServerHandler). public HttpServerHostContextBuilder UseHandler(HttpServerHandler handler) Parameters handler HttpServerHandler The instance of the server handler. Returns HttpServerHostContextBuilder"
  },
  "api/Sisk.Core.Http.Hosting.HttpServerHostContextBuilder.UseHttpServer.html": {
    "href": "api/Sisk.Core.Http.Hosting.HttpServerHostContextBuilder.UseHttpServer.html",
    "title": "Method UseHttpServer | Sisk Framework",
    "keywords": "Method UseHttpServer Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll UseHttpServer(Action<HttpServer>) Calls an action that has the HTTP server instance as an argument. public HttpServerHostContextBuilder UseHttpServer(Action<HttpServer> handler) Parameters handler Action<HttpServer> An action where the first argument is the main HttpServer object. Returns HttpServerHostContextBuilder"
  },
  "api/Sisk.Core.Http.Hosting.HttpServerHostContextBuilder.UseListeningPort.html": {
    "href": "api/Sisk.Core.Http.Hosting.HttpServerHostContextBuilder.UseListeningPort.html",
    "title": "Method UseListeningPort | Sisk Framework",
    "keywords": "Method UseListeningPort Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll UseListeningPort(ushort) Sets the main ListeningPort of this host builder. public HttpServerHostContextBuilder UseListeningPort(ushort port) Parameters port ushort The port the server will listen on. Returns HttpServerHostContextBuilder UseListeningPort(string) Sets the main ListeningPort of this host builder. public HttpServerHostContextBuilder UseListeningPort(string uri) Parameters uri string The URI component that will be parsed to the listening port format. Returns HttpServerHostContextBuilder UseListeningPort(ListeningPort) Sets the main ListeningPort of this host builder. public HttpServerHostContextBuilder UseListeningPort(ListeningPort listeningPort) Parameters listeningPort ListeningPort The ListeningPort object which the HTTP server will listen to. Returns HttpServerHostContextBuilder"
  },
  "api/Sisk.Core.Http.Hosting.HttpServerHostContextBuilder.UseLocale.html": {
    "href": "api/Sisk.Core.Http.Hosting.HttpServerHostContextBuilder.UseLocale.html",
    "title": "Method UseLocale | Sisk Framework",
    "keywords": "Method UseLocale Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll UseLocale(CultureInfo) Overrides the DefaultCultureInfo property in the HTTP server configuration. public HttpServerHostContextBuilder UseLocale(CultureInfo locale) Parameters locale CultureInfo The default CultureInfo object which the HTTP server will apply to the request handlers and callbacks thread. Returns HttpServerHostContextBuilder"
  },
  "api/Sisk.Core.Http.Hosting.HttpServerHostContextBuilder.UsePortableConfiguration.html": {
    "href": "api/Sisk.Core.Http.Hosting.HttpServerHostContextBuilder.UsePortableConfiguration.html",
    "title": "Method UsePortableConfiguration | Sisk Framework",
    "keywords": "Method UsePortableConfiguration Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll UsePortableConfiguration(Action<PortableConfigurationBuilder>) Enables the portable configuration for this application, which imports settings, parameters, and other information from a JSON settings file. public HttpServerHostContextBuilder UsePortableConfiguration(Action<PortableConfigurationBuilder> portableConfigHandler) Parameters portableConfigHandler Action<PortableConfigurationBuilder> The handler of PortableConfigurationBuilder. Returns HttpServerHostContextBuilder Remarks This method overrides almost all of your CreateBuilder() configuration. To avoid this, call this method at the beginning of your builder, as the first immediate method."
  },
  "api/Sisk.Core.Http.Hosting.HttpServerHostContextBuilder.UseRouter.html": {
    "href": "api/Sisk.Core.Http.Hosting.HttpServerHostContextBuilder.UseRouter.html",
    "title": "Method UseRouter | Sisk Framework",
    "keywords": "Method UseRouter Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll UseRouter(Action<Router>) Calls an action that has an Router instance from the host HTTP server. public HttpServerHostContextBuilder UseRouter(Action<Router> handler) Parameters handler Action<Router> An action where the first argument is the main Router object. Returns HttpServerHostContextBuilder UseRouter(Router) Sets an Router instance in the current listening host. public HttpServerHostContextBuilder UseRouter(Router r) Parameters r Router The Router to the current host builder. Returns HttpServerHostContextBuilder"
  },
  "api/Sisk.Core.Http.Hosting.HttpServerHostContextBuilder.UseStartupMessage.html": {
    "href": "api/Sisk.Core.Http.Hosting.HttpServerHostContextBuilder.UseStartupMessage.html",
    "title": "Method UseStartupMessage | Sisk Framework",
    "keywords": "Method UseStartupMessage Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll UseStartupMessage(string) Add an optional message to the HttpServerHostContext output verbose. public HttpServerHostContextBuilder UseStartupMessage(string startupMessage) Parameters startupMessage string The startup message. Returns HttpServerHostContextBuilder UseStartupMessage(Func<string>) Adds a function that returns an optional initialization message to the HttpServerHostContext output verbose. public HttpServerHostContextBuilder UseStartupMessage(Func<string> startupMessage) Parameters startupMessage Func<string> The startup message function. Returns HttpServerHostContextBuilder"
  },
  "api/Sisk.Core.Http.Hosting.HttpServerHostContextBuilder.html": {
    "href": "api/Sisk.Core.Http.Hosting.HttpServerHostContextBuilder.html",
    "title": "Class HttpServerHostContextBuilder | Sisk Framework",
    "keywords": "Class HttpServerHostContextBuilder Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll Represents a context constructor for HttpServerHostContext. public sealed class HttpServerHostContextBuilder Inheritance object HttpServerHostContextBuilder Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties CatchConfigurationExceptions Defines how the constructor should capture errors thrown within UsePortableConfiguration(Action<PortableConfigurationBuilder>) and display in the Console. ServerConfiguration Gets the Server Configuration object. Methods Build() Builds an HttpServerHostContext with the specified parameters. UseAutoScan<TModule>() This method is an shortcut for calling AutoScanModules<TModule>(). UseAutoScan<TModule>(Assembly) This method is an shortcut for calling AutoScanModules<TModule>(). UseBootstraper(Action) Adds an function that will be executed immediately before starting the HTTP server. UseConfiguration(Action<HttpServerConfiguration>) Calls an action that has the HTTP server configuration as an argument. UseCors(CrossOriginResourceSharingHeaders) Sets an CrossOriginResourceSharingHeaders instance in the current listening host. UseCors(Action<CrossOriginResourceSharingHeaders>) Calls an action that has an CrossOriginResourceSharingHeaders instance from the main listening host as an argument. UseFlags(HttpServerFlags) Overrides the HTTP server flags with the provided flags. UseForwardingResolver(ForwardingResolver) This method is a shortcut for setting ForwardingResolver. UseForwardingResolver<TForwardingResolver>() This method is a shortcut for setting ForwardingResolver. UseHandler(HttpServerHandler) This method is an shortcut for calling RegisterHandler(HttpServerHandler). UseHandler<THandler>() This method is an shortcut for calling RegisterHandler<T>(). UseHttpServer(Action<HttpServer>) Calls an action that has the HTTP server instance as an argument. UseListeningPort(ListeningPort) Sets the main ListeningPort of this host builder. UseListeningPort(string) Sets the main ListeningPort of this host builder. UseListeningPort(ushort) Sets the main ListeningPort of this host builder. UseLocale(CultureInfo) Overrides the DefaultCultureInfo property in the HTTP server configuration. UsePortableConfiguration(Action<PortableConfigurationBuilder>) Enables the portable configuration for this application, which imports settings, parameters, and other information from a JSON settings file. UseRouter(Router) Sets an Router instance in the current listening host. UseRouter(Action<Router>) Calls an action that has an Router instance from the host HTTP server. UseStartupMessage(Func<string>) Adds a function that returns an optional initialization message to the HttpServerHostContext output verbose. UseStartupMessage(string) Add an optional message to the HttpServerHostContext output verbose."
  },
  "api/Sisk.Core.Http.Hosting.HttpServerHostContextBuilderExceptionMode.html": {
    "href": "api/Sisk.Core.Http.Hosting.HttpServerHostContextBuilderExceptionMode.html",
    "title": "Enum HttpServerHostContextBuilderExceptionMode | Sisk Framework",
    "keywords": "Enum HttpServerHostContextBuilderExceptionMode Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll Represents how the builder event error message should be displayed. public enum HttpServerHostContextBuilderExceptionMode Fields Detailed = 2 Detailed messages, including detailed exception trace and information, should be displayed. Normal = 1 Normal messages, including their exception type and message, should be displayed. Silent = 0 No message should be displayed. Throw = 3 No message should be displayed and exceptions should be thrown instead being caughts."
  },
  "api/Sisk.Core.Http.Hosting.IConfigurationReader.ReadConfiguration.html": {
    "href": "api/Sisk.Core.Http.Hosting.IConfigurationReader.ReadConfiguration.html",
    "title": "Method ReadConfiguration | Sisk Framework",
    "keywords": "Method ReadConfiguration Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll ReadConfiguration(ConfigurationContext) Represents the method that reads and applies settings from a settings file. void ReadConfiguration(ConfigurationContext context) Parameters context ConfigurationContext The configuration context object."
  },
  "api/Sisk.Core.Http.Hosting.IConfigurationReader.html": {
    "href": "api/Sisk.Core.Http.Hosting.IConfigurationReader.html",
    "title": "Interface IConfigurationReader | Sisk Framework",
    "keywords": "Interface IConfigurationReader Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll Represents an interface that reads and applies settings from a settings file. public interface IConfigurationReader Methods ReadConfiguration(ConfigurationContext) Represents the method that reads and applies settings from a settings file."
  },
  "api/Sisk.Core.Http.Hosting.InitializationParameterCollection.-ctor.html": {
    "href": "api/Sisk.Core.Http.Hosting.InitializationParameterCollection.-ctor.html",
    "title": "Constructor InitializationParameterCollection | Sisk Framework",
    "keywords": "Constructor InitializationParameterCollection Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll InitializationParameterCollection() public InitializationParameterCollection()"
  },
  "api/Sisk.Core.Http.Hosting.InitializationParameterCollection.AsNameValueCollection.html": {
    "href": "api/Sisk.Core.Http.Hosting.InitializationParameterCollection.AsNameValueCollection.html",
    "title": "Method AsNameValueCollection | Sisk Framework",
    "keywords": "Method AsNameValueCollection Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll AsNameValueCollection() Gets an instance of NameValueCollection with the values of this class. public NameValueCollection AsNameValueCollection() Returns NameValueCollection"
  },
  "api/Sisk.Core.Http.Hosting.InitializationParameterCollection.EnsureNotNull.html": {
    "href": "api/Sisk.Core.Http.Hosting.InitializationParameterCollection.EnsureNotNull.html",
    "title": "Method EnsureNotNull | Sisk Framework",
    "keywords": "Method EnsureNotNull Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll EnsureNotNull(string) Ensures that the parameter defined by name parameterName is present in this collection. public void EnsureNotNull(string parameterName) Parameters parameterName string The parameter name which will be evaluated. Remarks If the parameter doens't meet the above requirements, an ArgumentNullException exception is thrown."
  },
  "api/Sisk.Core.Http.Hosting.InitializationParameterCollection.EnsureNotNullOrEmpty.html": {
    "href": "api/Sisk.Core.Http.Hosting.InitializationParameterCollection.EnsureNotNullOrEmpty.html",
    "title": "Method EnsureNotNullOrEmpty | Sisk Framework",
    "keywords": "Method EnsureNotNullOrEmpty Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll EnsureNotNullOrEmpty(string) Ensures that the parameter defined by name parameterName is present and not empty in this collection. public void EnsureNotNullOrEmpty(string parameterName) Parameters parameterName string The parameter name which will be evaluated. Remarks If the parameter doens't meet the above requirements, an ArgumentNullException exception is thrown."
  },
  "api/Sisk.Core.Http.Hosting.InitializationParameterCollection.GetValueOption.html": {
    "href": "api/Sisk.Core.Http.Hosting.InitializationParameterCollection.GetValueOption.html",
    "title": "Enum InitializationParameterCollection.GetValueOption | Sisk Framework",
    "keywords": "Enum InitializationParameterCollection.GetValueOption Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll Represents the option used in the method GetValueOrThrow(string, GetValueOption). public enum InitializationParameterCollection.GetValueOption Fields NotNull = 0 The method should throw if the value is not present in the collection, but allow empty values. NotNullOrEmpty = 1 The method should throw if the value is not present in the collection or has an empty value. NotNullOrWhiteSpace = 2 The method should throw if the value is not present in the collection, has an empty value or consists of whitespaces (spaces, tabs, etc.)."
  },
  "api/Sisk.Core.Http.Hosting.InitializationParameterCollection.GetValueOrThrow.html": {
    "href": "api/Sisk.Core.Http.Hosting.InitializationParameterCollection.GetValueOrThrow.html",
    "title": "Method GetValueOrThrow | Sisk Framework",
    "keywords": "Method GetValueOrThrow Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll GetValueOrThrow(string, GetValueOption) Gets the specified value if present in this parameter collection, or throw an exception if the value is not present. public string GetValueOrThrow(string parameterName, InitializationParameterCollection.GetValueOption option = GetValueOption.NotNullOrEmpty) Parameters parameterName string The parameter name. option InitializationParameterCollection.GetValueOption Specifies the InitializationParameterCollection.GetValueOption used for getting the value. Returns string"
  },
  "api/Sisk.Core.Http.Hosting.InitializationParameterCollection.html": {
    "href": "api/Sisk.Core.Http.Hosting.InitializationParameterCollection.html",
    "title": "Class InitializationParameterCollection | Sisk Framework",
    "keywords": "Class InitializationParameterCollection Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll Provides a collection of HTTP server initialization variables. public sealed class InitializationParameterCollection : IDictionary<string, string?>, ICollection<KeyValuePair<string, string?>>, IEnumerable<KeyValuePair<string, string?>>, IEnumerable Inheritance object InitializationParameterCollection Implements IDictionary<string, string> ICollection<KeyValuePair<string, string>> IEnumerable<KeyValuePair<string, string>> IEnumerable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors InitializationParameterCollection() Methods AsNameValueCollection() Gets an instance of NameValueCollection with the values of this class. EnsureNotNull(string) Ensures that the parameter defined by name parameterName is present in this collection. EnsureNotNullOrEmpty(string) Ensures that the parameter defined by name parameterName is present and not empty in this collection. GetValueOrThrow(string, GetValueOption) Gets the specified value if present in this parameter collection, or throw an exception if the value is not present."
  },
  "api/Sisk.Core.Http.Hosting.PortableConfigurationBuilder.WithConfigFile.html": {
    "href": "api/Sisk.Core.Http.Hosting.PortableConfigurationBuilder.WithConfigFile.html",
    "title": "Method WithConfigFile | Sisk Framework",
    "keywords": "Method WithConfigFile Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll WithConfigFile(string, bool, ConfigurationFileLookupDirectory) Specifies the name of the server configuration file. public PortableConfigurationBuilder WithConfigFile(string filename, bool createIfDontExists = false, ConfigurationFileLookupDirectory lookupDirectories = ConfigurationFileLookupDirectory.CurrentDirectory) Parameters filename string The name of the JSON configuration file. createIfDontExists bool Optional. Determines if the configuration file should be created if it doens't exists. lookupDirectories ConfigurationFileLookupDirectory Optional. Specifies the directories which the IConfigurationReader should search for the configuration file. Returns PortableConfigurationBuilder"
  },
  "api/Sisk.Core.Http.Hosting.PortableConfigurationBuilder.WithConfigReader.html": {
    "href": "api/Sisk.Core.Http.Hosting.PortableConfigurationBuilder.WithConfigReader.html",
    "title": "Method WithConfigReader | Sisk Framework",
    "keywords": "Method WithConfigReader Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll WithConfigReader(IConfigurationReader) Defines an custom IConfigurationReader configuration pipeline to the builder. public PortableConfigurationBuilder WithConfigReader(IConfigurationReader reader) Parameters reader IConfigurationReader The IConfigurationReader object. Returns PortableConfigurationBuilder WithConfigReader<TReader>() Defines an custom IConfigurationReader configuration pipeline to the builder. public PortableConfigurationBuilder WithConfigReader<TReader>() where TReader : IConfigurationReader, new() Returns PortableConfigurationBuilder Type Parameters TReader The IConfigurationReader type."
  },
  "api/Sisk.Core.Http.Hosting.PortableConfigurationBuilder.WithParameters.html": {
    "href": "api/Sisk.Core.Http.Hosting.PortableConfigurationBuilder.WithParameters.html",
    "title": "Method WithParameters | Sisk Framework",
    "keywords": "Method WithParameters Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll WithParameters(Action<InitializationParameterCollection>) Invokes a method on the initialization parameter collection. public PortableConfigurationBuilder WithParameters(Action<InitializationParameterCollection> handler) Parameters handler Action<InitializationParameterCollection> The handler of InitializationParameterCollection. Returns PortableConfigurationBuilder"
  },
  "api/Sisk.Core.Http.Hosting.PortableConfigurationBuilder.html": {
    "href": "api/Sisk.Core.Http.Hosting.PortableConfigurationBuilder.html",
    "title": "Class PortableConfigurationBuilder | Sisk Framework",
    "keywords": "Class PortableConfigurationBuilder Namespace Sisk.Core.Http.Hosting Assembly Sisk.Core.dll Represents the portable configuration builder for HttpServerHostContextBuilder. public sealed class PortableConfigurationBuilder Inheritance object PortableConfigurationBuilder Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods WithConfigFile(string, bool, ConfigurationFileLookupDirectory) Specifies the name of the server configuration file. WithConfigReader(IConfigurationReader) Defines an custom IConfigurationReader configuration pipeline to the builder. WithConfigReader<TReader>() Defines an custom IConfigurationReader configuration pipeline to the builder. WithParameters(Action<InitializationParameterCollection>) Invokes a method on the initialization parameter collection."
  },
  "api/Sisk.Core.Http.Hosting.html": {
    "href": "api/Sisk.Core.Http.Hosting.html",
    "title": "Namespace Sisk.Core.Http.Hosting | Sisk Framework",
    "keywords": "Namespace Sisk.Core.Http.Hosting Classes ConfigurationContext Represents a reading context for a portable configuration file. HttpServerHostContext Represents the class that hosts most of the components needed to run a Sisk application. HttpServerHostContextBuilder Represents a context constructor for HttpServerHostContext. InitializationParameterCollection Provides a collection of HTTP server initialization variables. PortableConfigurationBuilder Represents the portable configuration builder for HttpServerHostContextBuilder. Interfaces IConfigurationReader Represents an interface that reads and applies settings from a settings file. Enums ConfigurationFileLookupDirectory Represents the base directory where the IConfigurationReader should search for the configuration file. HttpServerHostContextBuilderExceptionMode Represents how the builder event error message should be displayed. InitializationParameterCollection.GetValueOption Represents the option used in the method GetValueOrThrow(string, GetValueOption)."
  },
  "api/Sisk.Core.Http.HtmlContent.-ctor.html": {
    "href": "api/Sisk.Core.Http.HtmlContent.-ctor.html",
    "title": "Constructor HtmlContent | Sisk Framework",
    "keywords": "Constructor HtmlContent Namespace Sisk.Core.Http Assembly Sisk.Core.dll HtmlContent(string, Encoding) Creates an new HtmlContent class with given HTML content and encoding. public HtmlContent(string content, Encoding encoding) Parameters content string The HTML content string. encoding Encoding The encoding which will encode the HTML contents. HtmlContent(string) Creates an new HtmlContent class with given HTML content, using the environment default encoding. public HtmlContent(string content) Parameters content string The HTML content string."
  },
  "api/Sisk.Core.Http.HtmlContent.html": {
    "href": "api/Sisk.Core.Http.HtmlContent.html",
    "title": "Class HtmlContent | Sisk Framework",
    "keywords": "Class HtmlContent Namespace Sisk.Core.Http Assembly Sisk.Core.dll Provides HTTP content based on HTML contents. public class HtmlContent : StringContent, IDisposable Inheritance object HttpContent ByteArrayContent StringContent HtmlContent Implements IDisposable Inherited Members StringContent.SerializeToStreamAsync(Stream, TransportContext, CancellationToken) ByteArrayContent.SerializeToStream(Stream, TransportContext, CancellationToken) ByteArrayContent.SerializeToStreamAsync(Stream, TransportContext) ByteArrayContent.TryComputeLength(out long) ByteArrayContent.CreateContentReadStream(CancellationToken) ByteArrayContent.CreateContentReadStreamAsync() HttpContent.ReadAsStringAsync() HttpContent.ReadAsStringAsync(CancellationToken) HttpContent.ReadAsByteArrayAsync() HttpContent.ReadAsByteArrayAsync(CancellationToken) HttpContent.ReadAsStream() HttpContent.ReadAsStream(CancellationToken) HttpContent.ReadAsStreamAsync() HttpContent.ReadAsStreamAsync(CancellationToken) HttpContent.CopyTo(Stream, TransportContext, CancellationToken) HttpContent.CopyToAsync(Stream) HttpContent.CopyToAsync(Stream, CancellationToken) HttpContent.CopyToAsync(Stream, TransportContext) HttpContent.CopyToAsync(Stream, TransportContext, CancellationToken) HttpContent.LoadIntoBufferAsync() HttpContent.LoadIntoBufferAsync(long) HttpContent.CreateContentReadStreamAsync(CancellationToken) HttpContent.Dispose(bool) HttpContent.Dispose() HttpContent.Headers object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors HtmlContent(string) Creates an new HtmlContent class with given HTML content, using the environment default encoding. HtmlContent(string, Encoding) Creates an new HtmlContent class with given HTML content and encoding."
  },
  "api/Sisk.Core.Http.HttpContext.Current.html": {
    "href": "api/Sisk.Core.Http.HttpContext.Current.html",
    "title": "Property Current | Sisk Framework",
    "keywords": "Property Current Namespace Sisk.Core.Http Assembly Sisk.Core.dll Current Gets the current running HttpContext. public static HttpContext Current { get; } Property Value HttpContext Remarks This property is only accessible during an HTTP session, within the executing HTTP code."
  },
  "api/Sisk.Core.Http.HttpContext.ExtraHeaders.html": {
    "href": "api/Sisk.Core.Http.HttpContext.ExtraHeaders.html",
    "title": "Property ExtraHeaders | Sisk Framework",
    "keywords": "Property ExtraHeaders Namespace Sisk.Core.Http Assembly Sisk.Core.dll ExtraHeaders Gets or sets the HttpHeaderCollection indicating HTTP headers which will be added (not overwritten) in the final response. public HttpHeaderCollection ExtraHeaders { get; set; } Property Value HttpHeaderCollection"
  },
  "api/Sisk.Core.Http.HttpContext.HttpServer.html": {
    "href": "api/Sisk.Core.Http.HttpContext.HttpServer.html",
    "title": "Property HttpServer | Sisk Framework",
    "keywords": "Property HttpServer Namespace Sisk.Core.Http Assembly Sisk.Core.dll HttpServer Gets the context HttpServer instance. public HttpServer HttpServer { get; } Property Value HttpServer"
  },
  "api/Sisk.Core.Http.HttpContext.IsRequestContext.html": {
    "href": "api/Sisk.Core.Http.HttpContext.IsRequestContext.html",
    "title": "Property IsRequestContext | Sisk Framework",
    "keywords": "Property IsRequestContext Namespace Sisk.Core.Http Assembly Sisk.Core.dll IsRequestContext Gets whether the current thread context is running inside an HTTP context. public static bool IsRequestContext { get; } Property Value bool"
  },
  "api/Sisk.Core.Http.HttpContext.ListeningHost.html": {
    "href": "api/Sisk.Core.Http.HttpContext.ListeningHost.html",
    "title": "Property ListeningHost | Sisk Framework",
    "keywords": "Property ListeningHost Namespace Sisk.Core.Http Assembly Sisk.Core.dll ListeningHost Gets the ListeningHost instance of this HTTP context. public ListeningHost? ListeningHost { get; } Property Value ListeningHost"
  },
  "api/Sisk.Core.Http.HttpContext.MatchedRoute.html": {
    "href": "api/Sisk.Core.Http.HttpContext.MatchedRoute.html",
    "title": "Property MatchedRoute | Sisk Framework",
    "keywords": "Property MatchedRoute Namespace Sisk.Core.Http Assembly Sisk.Core.dll MatchedRoute Gets the matched Route for this context. public Route? MatchedRoute { get; } Property Value Route"
  },
  "api/Sisk.Core.Http.HttpContext.OverrideHeaders.html": {
    "href": "api/Sisk.Core.Http.HttpContext.OverrideHeaders.html",
    "title": "Property OverrideHeaders | Sisk Framework",
    "keywords": "Property OverrideHeaders Namespace Sisk.Core.Http Assembly Sisk.Core.dll OverrideHeaders Gets or sets an HttpHeaderCollection indicating HTTP headers which will overwrite headers set by CORS, router response or request handlers. public HttpHeaderCollection OverrideHeaders { get; set; } Property Value HttpHeaderCollection Remarks This property replaces existing headers in the final response. Use ExtraHeaders to add headers without replacing existing ones."
  },
  "api/Sisk.Core.Http.HttpContext.Request.html": {
    "href": "api/Sisk.Core.Http.HttpContext.Request.html",
    "title": "Property Request | Sisk Framework",
    "keywords": "Property Request Namespace Sisk.Core.Http Assembly Sisk.Core.dll Request Gets the HttpRequest which is contained in this HTTP context. public HttpRequest Request { get; } Property Value HttpRequest"
  },
  "api/Sisk.Core.Http.HttpContext.RequestBag.html": {
    "href": "api/Sisk.Core.Http.HttpContext.RequestBag.html",
    "title": "Property RequestBag | Sisk Framework",
    "keywords": "Property RequestBag Namespace Sisk.Core.Http Assembly Sisk.Core.dll RequestBag Gets or sets a managed collection for this HTTP context. public TypedValueDictionary RequestBag { get; set; } Property Value TypedValueDictionary"
  },
  "api/Sisk.Core.Http.HttpContext.Router.html": {
    "href": "api/Sisk.Core.Http.HttpContext.Router.html",
    "title": "Property Router | Sisk Framework",
    "keywords": "Property Router Namespace Sisk.Core.Http Assembly Sisk.Core.dll Router Gets the Router where this context was created. public Router? Router { get; } Property Value Router"
  },
  "api/Sisk.Core.Http.HttpContext.RouterResponse.html": {
    "href": "api/Sisk.Core.Http.HttpContext.RouterResponse.html",
    "title": "Property RouterResponse | Sisk Framework",
    "keywords": "Property RouterResponse Namespace Sisk.Core.Http Assembly Sisk.Core.dll RouterResponse Gets the HttpResponse for this context. This property acessible when a post-executing IRequestHandler was executed for this router context. public HttpResponse? RouterResponse { get; } Property Value HttpResponse"
  },
  "api/Sisk.Core.Http.HttpContext.html": {
    "href": "api/Sisk.Core.Http.HttpContext.html",
    "title": "Class HttpContext | Sisk Framework",
    "keywords": "Class HttpContext Namespace Sisk.Core.Http Assembly Sisk.Core.dll Represents an context that is shared in a entire HTTP session. public sealed class HttpContext Inheritance object HttpContext Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties Current Gets the current running HttpContext. ExtraHeaders Gets or sets the HttpHeaderCollection indicating HTTP headers which will be added (not overwritten) in the final response. HttpServer Gets the context HttpServer instance. IsRequestContext Gets whether the current thread context is running inside an HTTP context. ListeningHost Gets the ListeningHost instance of this HTTP context. MatchedRoute Gets the matched Route for this context. OverrideHeaders Gets or sets an HttpHeaderCollection indicating HTTP headers which will overwrite headers set by CORS, router response or request handlers. Request Gets the HttpRequest which is contained in this HTTP context. RequestBag Gets or sets a managed collection for this HTTP context. Router Gets the Router where this context was created. RouterResponse Gets the HttpResponse for this context. This property acessible when a post-executing IRequestHandler was executed for this router context."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.Accept.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.Accept.html",
    "title": "Field Accept | Sisk Framework",
    "keywords": "Field Accept Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Accept header. Specifies the media types that are acceptable for the response, allowing the client to indicate its preferences. public const string Accept = \"Accept\" Returns string The HTTP Accept header. Specifies the media types that are acceptable for the response, allowing the client to indicate its preferences."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.AcceptCharset.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.AcceptCharset.html",
    "title": "Field AcceptCharset | Sisk Framework",
    "keywords": "Field AcceptCharset Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Accept-Charset header. Indicates the character sets that are acceptable for the response, allowing the client to specify its preferred encoding. public const string AcceptCharset = \"Accept-Charset\" Returns string The HTTP Accept-Charset header. Indicates the character sets that are acceptable for the response, allowing the client to specify its preferred encoding."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.AcceptEncoding.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.AcceptEncoding.html",
    "title": "Field AcceptEncoding | Sisk Framework",
    "keywords": "Field AcceptEncoding Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Accept-Encoding header. Specifies the content encodings that are acceptable for the response, allowing the client to indicate its preferences for compression. public const string AcceptEncoding = \"Accept-Encoding\" Returns string The HTTP Accept-Encoding header. Specifies the content encodings that are acceptable for the response, allowing the client to indicate its preferences for compression."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.AcceptLanguage.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.AcceptLanguage.html",
    "title": "Field AcceptLanguage | Sisk Framework",
    "keywords": "Field AcceptLanguage Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Accept-Language header. Indicates the natural languages that are preferred for the response, allowing the client to specify its language preferences. public const string AcceptLanguage = \"Accept-Language\" Returns string The HTTP Accept-Language header. Indicates the natural languages that are preferred for the response, allowing the client to specify its language preferences."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.AcceptPatch.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.AcceptPatch.html",
    "title": "Field AcceptPatch | Sisk Framework",
    "keywords": "Field AcceptPatch Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Accept-Patch header. Indicates the patch document formats that are acceptable for the response, allowing the client to specify its preferences for patching resources. public const string AcceptPatch = \"Accept-Patch\" Returns string The HTTP Accept-Patch header. Indicates the patch document formats that are acceptable for the response, allowing the client to specify its preferences for patching resources."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.AcceptRanges.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.AcceptRanges.html",
    "title": "Field AcceptRanges | Sisk Framework",
    "keywords": "Field AcceptRanges Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Accept-Ranges header. Indicates that the server supports range requests for the resource, allowing clients to request specific byte ranges. public const string AcceptRanges = \"Accept-Ranges\" Returns string The HTTP Accept-Ranges header. Indicates that the server supports range requests for the resource, allowing clients to request specific byte ranges."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.AccessControlAllowCredentials.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.AccessControlAllowCredentials.html",
    "title": "Field AccessControlAllowCredentials | Sisk Framework",
    "keywords": "Field AccessControlAllowCredentials Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Access-Control-Allow-Credentials header. Indicates whether the response to the request can expose credentials, allowing cross-origin requests to include credentials. public const string AccessControlAllowCredentials = \"Access-Control-Allow-Credentials\" Returns string The HTTP Access-Control-Allow-Credentials header. Indicates whether the response to the request can expose credentials, allowing cross-origin requests to include credentials."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.AccessControlAllowHeaders.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.AccessControlAllowHeaders.html",
    "title": "Field AccessControlAllowHeaders | Sisk Framework",
    "keywords": "Field AccessControlAllowHeaders Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Access-Control-Allow-Headers header. Specifies which headers can be used when making the actual request in a cross-origin resource sharing (CORS) context. public const string AccessControlAllowHeaders = \"Access-Control-Allow-Headers\" Returns string The HTTP Access-Control-Allow-Headers header. Specifies which headers can be used when making the actual request in a cross-origin resource sharing (CORS) context."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.AccessControlAllowMethods.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.AccessControlAllowMethods.html",
    "title": "Field AccessControlAllowMethods | Sisk Framework",
    "keywords": "Field AccessControlAllowMethods Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Access-Control-Allow-Methods header. Specifies the methods that are allowed when accessing the resource in a CORS context. public const string AccessControlAllowMethods = \"Access-Control-Allow-Methods\" Returns string The HTTP Access-Control-Allow-Methods header. Specifies the methods that are allowed when accessing the resource in a CORS context."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.AccessControlAllowOrigin.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.AccessControlAllowOrigin.html",
    "title": "Field AccessControlAllowOrigin | Sisk Framework",
    "keywords": "Field AccessControlAllowOrigin Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Access-Control-Allow-Origin header. Specifies which origins are allowed to access the resource in a CORS context, helping to control cross-origin requests. public const string AccessControlAllowOrigin = \"Access-Control-Allow-Origin\" Returns string The HTTP Access-Control-Allow-Origin header. Specifies which origins are allowed to access the resource in a CORS context, helping to control cross-origin requests."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.AccessControlExposeHeaders.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.AccessControlExposeHeaders.html",
    "title": "Field AccessControlExposeHeaders | Sisk Framework",
    "keywords": "Field AccessControlExposeHeaders Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Access-Control-Expose-Headers header. Indicates which headers can be exposed as part of the response to a cross-origin request. public const string AccessControlExposeHeaders = \"Access-Control-Expose-Headers\" Returns string The HTTP Access-Control-Expose-Headers header. Indicates which headers can be exposed as part of the response to a cross-origin request."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.AccessControlMaxAge.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.AccessControlMaxAge.html",
    "title": "Field AccessControlMaxAge | Sisk Framework",
    "keywords": "Field AccessControlMaxAge Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Access-Control-Max-Age header. Specifies how long the results of a preflight request can be cached, reducing the number of preflight requests made. public const string AccessControlMaxAge = \"Access-Control-Max-Age\" Returns string The HTTP Access-Control-Max-Age header. Specifies how long the results of a preflight request can be cached, reducing the number of preflight requests made."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.Age.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.Age.html",
    "title": "Field Age | Sisk Framework",
    "keywords": "Field Age Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Age header. Indicates the age of the object in a cache, helping clients understand how fresh the cached response is. public const string Age = \"Age\" Returns string The HTTP Age header. Indicates the age of the object in a cache, helping clients understand how fresh the cached response is."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.Allow.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.Allow.html",
    "title": "Field Allow | Sisk Framework",
    "keywords": "Field Allow Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Allow header. Lists the HTTP methods that are supported by the resource, informing clients about the available actions. public const string Allow = \"Allow\" Returns string The HTTP Allow header. Lists the HTTP methods that are supported by the resource, informing clients about the available actions."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.AltSvc.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.AltSvc.html",
    "title": "Field AltSvc | Sisk Framework",
    "keywords": "Field AltSvc Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Alt-Svc header. Indicates that an alternative service is available for the resource, allowing clients to connect to a different server or protocol. public const string AltSvc = \"Alt-Svc\" Returns string The HTTP Alt-Svc header. Indicates that an alternative service is available for the resource, allowing clients to connect to a different server or protocol."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.Authorization.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.Authorization.html",
    "title": "Field Authorization | Sisk Framework",
    "keywords": "Field Authorization Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Authorization header. Contains credentials for authenticating the client with the server, often used for basic or bearer token authentication. public const string Authorization = \"Authorization\" Returns string The HTTP Authorization header. Contains credentials for authenticating the client with the server, often used for basic or bearer token authentication."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.CacheControl.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.CacheControl.html",
    "title": "Field CacheControl | Sisk Framework",
    "keywords": "Field CacheControl Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Cache-Control header. Directs caching mechanisms on how to cache the response, including directives for expiration and revalidation. public const string CacheControl = \"Cache-Control\" Returns string The HTTP Cache-Control header. Directs caching mechanisms on how to cache the response, including directives for expiration and revalidation."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.Connection.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.Connection.html",
    "title": "Field Connection | Sisk Framework",
    "keywords": "Field Connection Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Connection header. Controls whether the network connection stays open after the current transaction finishes, allowing for persistent connections. public const string Connection = \"Connection\" Returns string The HTTP Connection header. Controls whether the network connection stays open after the current transaction finishes, allowing for persistent connections."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.ContentDisposition.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.ContentDisposition.html",
    "title": "Field ContentDisposition | Sisk Framework",
    "keywords": "Field ContentDisposition Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Content-Disposition header. Indicates if the content should be displayed inline in the browser or treated as an attachment to be downloaded. public const string ContentDisposition = \"Content-Disposition\" Returns string The HTTP Content-Disposition header. Indicates if the content should be displayed inline in the browser or treated as an attachment to be downloaded."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.ContentEncoding.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.ContentEncoding.html",
    "title": "Field ContentEncoding | Sisk Framework",
    "keywords": "Field ContentEncoding Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Content-Encoding header. Specifies the encoding transformations that have been applied to the response body, such as gzip or deflate. public const string ContentEncoding = \"Content-Encoding\" Returns string The HTTP Content-Encoding header. Specifies the encoding transformations that have been applied to the response body, such as gzip or deflate."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.ContentLanguage.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.ContentLanguage.html",
    "title": "Field ContentLanguage | Sisk Framework",
    "keywords": "Field ContentLanguage Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Content-Language header. Indicates the natural language(s) of the intended audience for the response, helping clients understand the content's language. public const string ContentLanguage = \"Content-Language\" Returns string The HTTP Content-Language header. Indicates the natural language(s) of the intended audience for the response, helping clients understand the content's language."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.ContentLength.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.ContentLength.html",
    "title": "Field ContentLength | Sisk Framework",
    "keywords": "Field ContentLength Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Content-Length header. Indicates the size of the response body in bytes, allowing the client to know how much data to expect. public const string ContentLength = \"Content-Length\" Returns string The HTTP Content-Length header. Indicates the size of the response body in bytes, allowing the client to know how much data to expect."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.ContentLocation.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.ContentLocation.html",
    "title": "Field ContentLocation | Sisk Framework",
    "keywords": "Field ContentLocation Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Content-Location header. Indicates an alternate location for the returned data, often used for redirecting clients to a different resource. public const string ContentLocation = \"Content-Location\" Returns string The HTTP Content-Location header. Indicates an alternate location for the returned data, often used for redirecting clients to a different resource."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.ContentMD5.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.ContentMD5.html",
    "title": "Field ContentMD5 | Sisk Framework",
    "keywords": "Field ContentMD5 Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Content-MD5 header. Contains the MD5 hash of the response body, allowing clients to verify the integrity of the received data. public const string ContentMD5 = \"Content-MD5\" Returns string The HTTP Content-MD5 header. Contains the MD5 hash of the response body, allowing clients to verify the integrity of the received data."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.ContentRange.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.ContentRange.html",
    "title": "Field ContentRange | Sisk Framework",
    "keywords": "Field ContentRange Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Content-Range header. Indicates the part of a document that the server is returning, used in range requests to specify byte ranges. public const string ContentRange = \"Content-Range\" Returns string The HTTP Content-Range header. Indicates the part of a document that the server is returning, used in range requests to specify byte ranges."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.ContentSecurityPolicy.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.ContentSecurityPolicy.html",
    "title": "Field ContentSecurityPolicy | Sisk Framework",
    "keywords": "Field ContentSecurityPolicy Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Content-Security-Policy header. Defines security policies for the content, helping to prevent cross-site scripting (XSS) and other code injection attacks. public const string ContentSecurityPolicy = \"Content-Security-Policy\" Returns string The HTTP Content-Security-Policy header. Defines security policies for the content, helping to prevent cross-site scripting (XSS) and other code injection attacks."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.ContentType.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.ContentType.html",
    "title": "Field ContentType | Sisk Framework",
    "keywords": "Field ContentType Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Content-Type header. Indicates the media type of the resource, allowing the client to understand how to process the response body. public const string ContentType = \"Content-Type\" Returns string The HTTP Content-Type header. Indicates the media type of the resource, allowing the client to understand how to process the response body."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.Cookie.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.Cookie.html",
    "title": "Field Cookie | Sisk Framework",
    "keywords": "Field Cookie Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Cookie header. Contains stored HTTP cookies previously sent by the server, allowing the server to identify the client on subsequent requests. public const string Cookie = \"Cookie\" Returns string The HTTP Cookie header. Contains stored HTTP cookies previously sent by the server, allowing the server to identify the client on subsequent requests."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.Cookie2.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.Cookie2.html",
    "title": "Field Cookie2 | Sisk Framework",
    "keywords": "Field Cookie2 Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Cookie2 header. Used to send cookies in a more advanced format, primarily for compatibility with older versions of HTTP. public const string Cookie2 = \"Cookie2\" Returns string The HTTP Cookie2 header. Used to send cookies in a more advanced format, primarily for compatibility with older versions of HTTP."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.Date.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.Date.html",
    "title": "Field Date | Sisk Framework",
    "keywords": "Field Date Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Date header. Indicates the date and time at which the message was sent, helping clients understand the freshness of the response. public const string Date = \"Date\" Returns string The HTTP Date header. Indicates the date and time at which the message was sent, helping clients understand the freshness of the response."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.ETag.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.ETag.html",
    "title": "Field ETag | Sisk Framework",
    "keywords": "Field ETag Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP ETag header. Provides a unique identifier for a specific version of a resource, allowing clients to cache and validate resources efficiently. public const string ETag = \"ETag\" Returns string The HTTP ETag header. Provides a unique identifier for a specific version of a resource, allowing clients to cache and validate resources efficiently."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.Expect.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.Expect.html",
    "title": "Field Expect | Sisk Framework",
    "keywords": "Field Expect Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Expect header. Indicates that the client expects certain behaviors from the server, such as support for specific features or conditions. public const string Expect = \"Expect\" Returns string The HTTP Expect header. Indicates that the client expects certain behaviors from the server, such as support for specific features or conditions."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.Expires.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.Expires.html",
    "title": "Field Expires | Sisk Framework",
    "keywords": "Field Expires Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Expires header. Indicates the date and time after which the response is considered stale, helping clients manage caching. public const string Expires = \"Expires\" Returns string The HTTP Expires header. Indicates the date and time after which the response is considered stale, helping clients manage caching."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.Host.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.Host.html",
    "title": "Field Host | Sisk Framework",
    "keywords": "Field Host Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Host header. Specifies the domain name of the server and the TCP port number on which the server is listening, allowing for virtual hosting. public const string Host = \"Host\" Returns string The HTTP Host header. Specifies the domain name of the server and the TCP port number on which the server is listening, allowing for virtual hosting."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.IfMatch.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.IfMatch.html",
    "title": "Field IfMatch | Sisk Framework",
    "keywords": "Field IfMatch Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP If-Match header. Used to make a conditional request, allowing the client to specify that the request should only be processed if the resource matches the given ETag. public const string IfMatch = \"If-Match\" Returns string The HTTP If-Match header. Used to make a conditional request, allowing the client to specify that the request should only be processed if the resource matches the given ETag."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.IfModifiedSince.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.IfModifiedSince.html",
    "title": "Field IfModifiedSince | Sisk Framework",
    "keywords": "Field IfModifiedSince Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP If-Modified-Since header. Used to make a conditional request, allowing the client to specify that the resource should only be returned if it has been modified since the given date. public const string IfModifiedSince = \"If-Modified-Since\" Returns string The HTTP If-Modified-Since header. Used to make a conditional request, allowing the client to specify that the resource should only be returned if it has been modified since the given date."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.IfNoneMatch.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.IfNoneMatch.html",
    "title": "Field IfNoneMatch | Sisk Framework",
    "keywords": "Field IfNoneMatch Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP If-None-Match header. Used to make a conditional request, allowing the client to specify that the resource should only be returned if it does not match the given ETag. public const string IfNoneMatch = \"If-None-Match\" Returns string The HTTP If-None-Match header. Used to make a conditional request, allowing the client to specify that the resource should only be returned if it does not match the given ETag."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.IfRange.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.IfRange.html",
    "title": "Field IfRange | Sisk Framework",
    "keywords": "Field IfRange Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP If-Range header. Used to make a conditional range request, allowing the client to specify that the range should only be returned if the resource has not changed. public const string IfRange = \"If-Range\" Returns string The HTTP If-Range header. Used to make a conditional range request, allowing the client to specify that the range should only be returned if the resource has not changed."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.IfUnmodifiedSince.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.IfUnmodifiedSince.html",
    "title": "Field IfUnmodifiedSince | Sisk Framework",
    "keywords": "Field IfUnmodifiedSince Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP If-Unmodified-Since header. Used to make a conditional request, allowing the client to specify that the resource should only be returned if it has not been modified since the given date. public const string IfUnmodifiedSince = \"If-Unmodified-Since\" Returns string The HTTP If-Unmodified-Since header. Used to make a conditional request, allowing the client to specify that the resource should only be returned if it has not been modified since the given date."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.KeepAlive.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.KeepAlive.html",
    "title": "Field KeepAlive | Sisk Framework",
    "keywords": "Field KeepAlive Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Keep-Alive header. Used to specify parameters for persistent connections, allowing the client and server to maintain an open connection for multiple requests. public const string KeepAlive = \"Keep-Alive\" Returns string The HTTP Keep-Alive header. Used to specify parameters for persistent connections, allowing the client and server to maintain an open connection for multiple requests."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.LastModified.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.LastModified.html",
    "title": "Field LastModified | Sisk Framework",
    "keywords": "Field LastModified Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Last-Modified header. Indicates the date and time at which the resource was last modified, helping clients determine if they need to refresh their cached version. public const string LastModified = \"Last-Modified\" Returns string The HTTP Last-Modified header. Indicates the date and time at which the resource was last modified, helping clients determine if they need to refresh their cached version."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.Link.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.Link.html",
    "title": "Field Link | Sisk Framework",
    "keywords": "Field Link Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Link header. Used to provide relationships between the current resource and other resources, often used for navigation and linking. public const string Link = \"Link\" Returns string The HTTP Link header. Used to provide relationships between the current resource and other resources, often used for navigation and linking."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.Location.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.Location.html",
    "title": "Field Location | Sisk Framework",
    "keywords": "Field Location Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Location header. Used in redirection responses to indicate the URL to which the client should redirect. public const string Location = \"Location\" Returns string The HTTP Location header. Used in redirection responses to indicate the URL to which the client should redirect."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.MaxForwards.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.MaxForwards.html",
    "title": "Field MaxForwards | Sisk Framework",
    "keywords": "Field MaxForwards Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Max-Forwards header. Used in OPTIONS requests to limit the number of times the request can be forwarded by proxies. public const string MaxForwards = \"Max-Forwards\" Returns string The HTTP Max-Forwards header. Used in OPTIONS requests to limit the number of times the request can be forwarded by proxies."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.Origin.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.Origin.html",
    "title": "Field Origin | Sisk Framework",
    "keywords": "Field Origin Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Origin header. Indicates the origin of the request, helping servers implement CORS and manage cross-origin requests. public const string Origin = \"Origin\" Returns string The HTTP Origin header. Indicates the origin of the request, helping servers implement CORS and manage cross-origin requests."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.P3P.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.P3P.html",
    "title": "Field P3P | Sisk Framework",
    "keywords": "Field P3P Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP P3P header. Used to indicate the privacy policy of the server, allowing clients to understand how their data will be handled. public const string P3P = \"P3P\" Returns string The HTTP P3P header. Used to indicate the privacy policy of the server, allowing clients to understand how their data will be handled."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.Pragma.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.Pragma.html",
    "title": "Field Pragma | Sisk Framework",
    "keywords": "Field Pragma Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Pragma header. Used to include implementation-specific directives that might apply to any recipient along the request/response chain. public const string Pragma = \"Pragma\" Returns string The HTTP Pragma header. Used to include implementation-specific directives that might apply to any recipient along the request/response chain."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.ProxyAuthenticate.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.ProxyAuthenticate.html",
    "title": "Field ProxyAuthenticate | Sisk Framework",
    "keywords": "Field ProxyAuthenticate Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Proxy-Authenticate header. Used by a proxy server to request authentication from the client, indicating the authentication method required. public const string ProxyAuthenticate = \"Proxy-Authenticate\" Returns string The HTTP Proxy-Authenticate header. Used by a proxy server to request authentication from the client, indicating the authentication method required."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.ProxyAuthorization.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.ProxyAuthorization.html",
    "title": "Field ProxyAuthorization | Sisk Framework",
    "keywords": "Field ProxyAuthorization Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Proxy-Authorization header. Contains credentials for authenticating the client with a proxy server, allowing access to the requested resource. public const string ProxyAuthorization = \"Proxy-Authorization\" Returns string The HTTP Proxy-Authorization header. Contains credentials for authenticating the client with a proxy server, allowing access to the requested resource."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.ProxyConnection.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.ProxyConnection.html",
    "title": "Field ProxyConnection | Sisk Framework",
    "keywords": "Field ProxyConnection Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Proxy-Connection header. Used to control whether the network connection to the proxy server should be kept open after the current transaction. public const string ProxyConnection = \"Proxy-Connection\" Returns string The HTTP Proxy-Connection header. Used to control whether the network connection to the proxy server should be kept open after the current transaction."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.PublicKeyPins.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.PublicKeyPins.html",
    "title": "Field PublicKeyPins | Sisk Framework",
    "keywords": "Field PublicKeyPins Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Public-Key-Pins header. Used to prevent man-in-the-middle attacks by specifying which public keys are valid for the server's certificate. public const string PublicKeyPins = \"Public-Key-Pins\" Returns string The HTTP Public-Key-Pins header. Used to prevent man-in-the-middle attacks by specifying which public keys are valid for the server's certificate."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.Range.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.Range.html",
    "title": "Field Range | Sisk Framework",
    "keywords": "Field Range Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Range header. Used to request a specific range of bytes from a resource, allowing clients to download large files in parts. public const string Range = \"Range\" Returns string The HTTP Range header. Used to request a specific range of bytes from a resource, allowing clients to download large files in parts."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.Referer.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.Referer.html",
    "title": "Field Referer | Sisk Framework",
    "keywords": "Field Referer Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Referer header. Indicates the URL of the resource from which the request originated, helping servers understand the source of traffic. public const string Referer = \"Referer\" Returns string The HTTP Referer header. Indicates the URL of the resource from which the request originated, helping servers understand the source of traffic."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.RetryAfter.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.RetryAfter.html",
    "title": "Field RetryAfter | Sisk Framework",
    "keywords": "Field RetryAfter Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Retry-After header. Indicates how long the client should wait before making a follow-up request, often used in rate limiting scenarios. public const string RetryAfter = \"Retry-After\" Returns string The HTTP Retry-After header. Indicates how long the client should wait before making a follow-up request, often used in rate limiting scenarios."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.SecWebSocketAccept.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.SecWebSocketAccept.html",
    "title": "Field SecWebSocketAccept | Sisk Framework",
    "keywords": "Field SecWebSocketAccept Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Sec-WebSocket-Accept header. Used in the WebSocket handshake to confirm the server's acceptance of the connection request. public const string SecWebSocketAccept = \"Sec-WebSocket-Accept\" Returns string The HTTP Sec-WebSocket-Accept header. Used in the WebSocket handshake to confirm the server's acceptance of the connection request."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.SecWebSocketExtensions.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.SecWebSocketExtensions.html",
    "title": "Field SecWebSocketExtensions | Sisk Framework",
    "keywords": "Field SecWebSocketExtensions Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Sec-WebSocket-Extensions header. Used to negotiate WebSocket extensions during the handshake, allowing for additional features and capabilities. public const string SecWebSocketExtensions = \"Sec-WebSocket-Extensions\" Returns string The HTTP Sec-WebSocket-Extensions header. Used to negotiate WebSocket extensions during the handshake, allowing for additional features and capabilities."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.SecWebSocketKey.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.SecWebSocketKey.html",
    "title": "Field SecWebSocketKey | Sisk Framework",
    "keywords": "Field SecWebSocketKey Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Sec-WebSocket-Key header. Contains a base64-encoded value used to establish a WebSocket connection, ensuring the request is valid. public const string SecWebSocketKey = \"Sec-WebSocket-Key\" Returns string The HTTP Sec-WebSocket-Key header. Contains a base64-encoded value used to establish a WebSocket connection, ensuring the request is valid."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.SecWebSocketProtocol.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.SecWebSocketProtocol.html",
    "title": "Field SecWebSocketProtocol | Sisk Framework",
    "keywords": "Field SecWebSocketProtocol Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Sec-WebSocket-Protocol header. Used to specify subprotocols that the client wishes to use during the WebSocket connection. public const string SecWebSocketProtocol = \"Sec-WebSocket-Protocol\" Returns string The HTTP Sec-WebSocket-Protocol header. Used to specify subprotocols that the client wishes to use during the WebSocket connection."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.SecWebSocketVersion.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.SecWebSocketVersion.html",
    "title": "Field SecWebSocketVersion | Sisk Framework",
    "keywords": "Field SecWebSocketVersion Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Sec-WebSocket-Version header. Indicates the version of the WebSocket protocol that the client wishes to use. public const string SecWebSocketVersion = \"Sec-WebSocket-Version\" Returns string The HTTP Sec-WebSocket-Version header. Indicates the version of the WebSocket protocol that the client wishes to use."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.Server.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.Server.html",
    "title": "Field Server | Sisk Framework",
    "keywords": "Field Server Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Server header. Contains information about the server software handling the request, often used for informational purposes. public const string Server = \"Server\" Returns string The HTTP Server header. Contains information about the server software handling the request, often used for informational purposes."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.SetCookie.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.SetCookie.html",
    "title": "Field SetCookie | Sisk Framework",
    "keywords": "Field SetCookie Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Set-Cookie header. Used to send cookies from the server to the client, allowing the server to store state information on the client. public const string SetCookie = \"Set-Cookie\" Returns string The HTTP Set-Cookie header. Used to send cookies from the server to the client, allowing the server to store state information on the client."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.SetCookie2.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.SetCookie2.html",
    "title": "Field SetCookie2 | Sisk Framework",
    "keywords": "Field SetCookie2 Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Set-Cookie2 header. Used to send cookies in a more advanced format, primarily for compatibility with older versions of HTTP. public const string SetCookie2 = \"Set-Cookie2\" Returns string The HTTP Set-Cookie2 header. Used to send cookies in a more advanced format, primarily for compatibility with older versions of HTTP."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.StrictTransportSecurity.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.StrictTransportSecurity.html",
    "title": "Field StrictTransportSecurity | Sisk Framework",
    "keywords": "Field StrictTransportSecurity Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Strict-Transport-Security header. Enforces secure (HTTPS) connections to the server, helping to prevent man-in-the-middle attacks. public const string StrictTransportSecurity = \"Strict-Transport-Security\" Returns string The HTTP Strict-Transport-Security header. Enforces secure (HTTPS) connections to the server, helping to prevent man-in-the-middle attacks."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.TE.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.TE.html",
    "title": "Field TE | Sisk Framework",
    "keywords": "Field TE Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP TE header. Indicates the transfer encodings that are acceptable for the response, allowing for content negotiation. public const string TE = \"TE\" Returns string The HTTP TE header. Indicates the transfer encodings that are acceptable for the response, allowing for content negotiation."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.TSV.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.TSV.html",
    "title": "Field TSV | Sisk Framework",
    "keywords": "Field TSV Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP TSV header. Used to indicate the type of data being sent in a transaction, often used in specific applications or protocols. public const string TSV = \"TSV\" Returns string The HTTP TSV header. Used to indicate the type of data being sent in a transaction, often used in specific applications or protocols."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.Trailer.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.Trailer.html",
    "title": "Field Trailer | Sisk Framework",
    "keywords": "Field Trailer Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Trailer header. Indicates that the sender will include additional fields in the message trailer, which can be used for metadata. public const string Trailer = \"Trailer\" Returns string The HTTP Trailer header. Indicates that the sender will include additional fields in the message trailer, which can be used for metadata."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.TransferEncoding.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.TransferEncoding.html",
    "title": "Field TransferEncoding | Sisk Framework",
    "keywords": "Field TransferEncoding Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Transfer-Encoding header. Specifies the form of encoding used to safely transfer the payload body to the user. public const string TransferEncoding = \"Transfer-Encoding\" Returns string The HTTP Transfer-Encoding header. Specifies the form of encoding used to safely transfer the payload body to the user."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.Upgrade.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.Upgrade.html",
    "title": "Field Upgrade | Sisk Framework",
    "keywords": "Field Upgrade Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Upgrade header. Indicates that the client prefers to upgrade to a different protocol, such as switching from HTTP/1.1 to HTTP/2. public const string Upgrade = \"Upgrade\" Returns string The HTTP Upgrade header. Indicates that the client prefers to upgrade to a different protocol, such as switching from HTTP/1.1 to HTTP/2."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.UpgradeInsecureRequests.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.UpgradeInsecureRequests.html",
    "title": "Field UpgradeInsecureRequests | Sisk Framework",
    "keywords": "Field UpgradeInsecureRequests Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Upgrade-Insecure-Requests header. Indicates that the client prefers to receive an upgraded version of the resource over HTTPS instead of HTTP. public const string UpgradeInsecureRequests = \"Upgrade-Insecure-Requests\" Returns string The HTTP Upgrade-Insecure-Requests header. Indicates that the client prefers to receive an upgraded version of the resource over HTTPS instead of HTTP."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.UserAgent.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.UserAgent.html",
    "title": "Field UserAgent | Sisk Framework",
    "keywords": "Field UserAgent Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP User-Agent header. Contains information about the user agent (browser or application) making the request, including its version and platform. public const string UserAgent = \"User-Agent\" Returns string The HTTP User-Agent header. Contains information about the user agent (browser or application) making the request, including its version and platform."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.Vary.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.Vary.html",
    "title": "Field Vary | Sisk Framework",
    "keywords": "Field Vary Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Vary header. Indicates that the response varies based on the value of the specified request headers, allowing for content negotiation. public const string Vary = \"Vary\" Returns string The HTTP Vary header. Indicates that the response varies based on the value of the specified request headers, allowing for content negotiation."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.Via.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.Via.html",
    "title": "Field Via | Sisk Framework",
    "keywords": "Field Via Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Via header. Used to track message forwards and proxies, indicating the intermediate protocols and recipients involved in the request/response chain. public const string Via = \"Via\" Returns string The HTTP Via header. Used to track message forwards and proxies, indicating the intermediate protocols and recipients involved in the request/response chain."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.WWWAuthenticate.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.WWWAuthenticate.html",
    "title": "Field WWWAuthenticate | Sisk Framework",
    "keywords": "Field WWWAuthenticate Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP WWW-Authenticate header. Used in response to a request for authentication, indicating the authentication method that should be used to access the resource. public const string WWWAuthenticate = \"WWW-Authenticate\" Returns string The HTTP WWW-Authenticate header. Used in response to a request for authentication, indicating the authentication method that should be used to access the resource."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.Warning.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.Warning.html",
    "title": "Field Warning | Sisk Framework",
    "keywords": "Field Warning Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP Warning header. Provides additional information about the status or transformation of a message, often used for caching and validation. public const string Warning = \"Warning\" Returns string The HTTP Warning header. Provides additional information about the status or transformation of a message, often used for caching and validation."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.XContentDuration.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.XContentDuration.html",
    "title": "Field XContentDuration | Sisk Framework",
    "keywords": "Field XContentDuration Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP X-Content-Duration header. Specifies the duration of the content in seconds, often used for media files. public const string XContentDuration = \"X-Content-Duration\" Returns string The HTTP X-Content-Duration header. Specifies the duration of the content in seconds, often used for media files."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.XContentTypeOptions.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.XContentTypeOptions.html",
    "title": "Field XContentTypeOptions | Sisk Framework",
    "keywords": "Field XContentTypeOptions Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP X-Content-Type-Options header. Used to prevent MIME type sniffing, ensuring that the browser respects the declared content type. public const string XContentTypeOptions = \"X-Content-Type-Options\" Returns string The HTTP X-Content-Type-Options header. Used to prevent MIME type sniffing, ensuring that the browser respects the declared content type."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.XForwardedFor.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.XForwardedFor.html",
    "title": "Field XForwardedFor | Sisk Framework",
    "keywords": "Field XForwardedFor Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP X-Forwarded-For header. Used to identify the originating IP address of a client connecting to a web server through an HTTP proxy or load balancer. public const string XForwardedFor = \"X-Forwarded-For\" Returns string The HTTP X-Forwarded-For header. Used to identify the originating IP address of a client connecting to a web server through an HTTP proxy or load balancer."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.XForwardedHost.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.XForwardedHost.html",
    "title": "Field XForwardedHost | Sisk Framework",
    "keywords": "Field XForwardedHost Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP X-Forwarded-Host header. Used to identify the original host requested by the client in the Host HTTP request header, often used in proxy setups. public const string XForwardedHost = \"X-Forwarded-Host\" Returns string The HTTP X-Forwarded-Host header. Used to identify the original host requested by the client in the Host HTTP request header, often used in proxy setups."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.XFrameOptions.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.XFrameOptions.html",
    "title": "Field XFrameOptions | Sisk Framework",
    "keywords": "Field XFrameOptions Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP X-Frame-Options header. Used to control whether a browser should be allowed to render a page in a iframe, frame, embed or object tag, helping to prevent clickjacking attacks. public const string XFrameOptions = \"X-Frame-Options\" Returns string The HTTP X-Frame-Options header. Used to control whether a browser should be allowed to render a page in a iframe, frame, embed or object tag, helping to prevent clickjacking attacks."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.XPoweredBy.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.XPoweredBy.html",
    "title": "Field XPoweredBy | Sisk Framework",
    "keywords": "Field XPoweredBy Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP X-Powered-By header. Indicates the technology or framework that powers the web application, often used for informational purposes. public const string XPoweredBy = \"X-Powered-By\" Returns string The HTTP X-Powered-By header. Indicates the technology or framework that powers the web application, often used for informational purposes."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.XRequestID.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.XRequestID.html",
    "title": "Field XRequestID | Sisk Framework",
    "keywords": "Field XRequestID Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP X-Request-ID header. Used to uniquely identify a request for tracking and debugging purposes, often generated by the client or server. public const string XRequestID = \"X-Request-ID\" Returns string The HTTP X-Request-ID header. Used to uniquely identify a request for tracking and debugging purposes, often generated by the client or server."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.XUACompatible.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.XUACompatible.html",
    "title": "Field XUACompatible | Sisk Framework",
    "keywords": "Field XUACompatible Namespace Sisk.Core.Http Assembly Sisk.Core.dll The HTTP X-UA-Compatible header. Used to specify the document mode that Internet Explorer should use to render the page, helping to ensure compatibility with older versions. public const string XUACompatible = \"X-UA-Compatible\" Returns string The HTTP X-UA-Compatible header. Used to specify the document mode that Internet Explorer should use to render the page, helping to ensure compatibility with older versions."
  },
  "api/Sisk.Core.Http.HttpKnownHeaderNames.html": {
    "href": "api/Sisk.Core.Http.HttpKnownHeaderNames.html",
    "title": "Class HttpKnownHeaderNames | Sisk Framework",
    "keywords": "Class HttpKnownHeaderNames Namespace Sisk.Core.Http Assembly Sisk.Core.dll Provides most of the most commonly known HTTP headers for constants. public static class HttpKnownHeaderNames Inheritance object HttpKnownHeaderNames Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Fields Accept The HTTP Accept header. Specifies the media types that are acceptable for the response, allowing the client to indicate its preferences. AcceptCharset The HTTP Accept-Charset header. Indicates the character sets that are acceptable for the response, allowing the client to specify its preferred encoding. AcceptEncoding The HTTP Accept-Encoding header. Specifies the content encodings that are acceptable for the response, allowing the client to indicate its preferences for compression. AcceptLanguage The HTTP Accept-Language header. Indicates the natural languages that are preferred for the response, allowing the client to specify its language preferences. AcceptPatch The HTTP Accept-Patch header. Indicates the patch document formats that are acceptable for the response, allowing the client to specify its preferences for patching resources. AcceptRanges The HTTP Accept-Ranges header. Indicates that the server supports range requests for the resource, allowing clients to request specific byte ranges. AccessControlAllowCredentials The HTTP Access-Control-Allow-Credentials header. Indicates whether the response to the request can expose credentials, allowing cross-origin requests to include credentials. AccessControlAllowHeaders The HTTP Access-Control-Allow-Headers header. Specifies which headers can be used when making the actual request in a cross-origin resource sharing (CORS) context. AccessControlAllowMethods The HTTP Access-Control-Allow-Methods header. Specifies the methods that are allowed when accessing the resource in a CORS context. AccessControlAllowOrigin The HTTP Access-Control-Allow-Origin header. Specifies which origins are allowed to access the resource in a CORS context, helping to control cross-origin requests. AccessControlExposeHeaders The HTTP Access-Control-Expose-Headers header. Indicates which headers can be exposed as part of the response to a cross-origin request. AccessControlMaxAge The HTTP Access-Control-Max-Age header. Specifies how long the results of a preflight request can be cached, reducing the number of preflight requests made. Age The HTTP Age header. Indicates the age of the object in a cache, helping clients understand how fresh the cached response is. Allow The HTTP Allow header. Lists the HTTP methods that are supported by the resource, informing clients about the available actions. AltSvc The HTTP Alt-Svc header. Indicates that an alternative service is available for the resource, allowing clients to connect to a different server or protocol. Authorization The HTTP Authorization header. Contains credentials for authenticating the client with the server, often used for basic or bearer token authentication. CacheControl The HTTP Cache-Control header. Directs caching mechanisms on how to cache the response, including directives for expiration and revalidation. Connection The HTTP Connection header. Controls whether the network connection stays open after the current transaction finishes, allowing for persistent connections. ContentDisposition The HTTP Content-Disposition header. Indicates if the content should be displayed inline in the browser or treated as an attachment to be downloaded. ContentEncoding The HTTP Content-Encoding header. Specifies the encoding transformations that have been applied to the response body, such as gzip or deflate. ContentLanguage The HTTP Content-Language header. Indicates the natural language(s) of the intended audience for the response, helping clients understand the content's language. ContentLength The HTTP Content-Length header. Indicates the size of the response body in bytes, allowing the client to know how much data to expect. ContentLocation The HTTP Content-Location header. Indicates an alternate location for the returned data, often used for redirecting clients to a different resource. ContentMD5 The HTTP Content-MD5 header. Contains the MD5 hash of the response body, allowing clients to verify the integrity of the received data. ContentRange The HTTP Content-Range header. Indicates the part of a document that the server is returning, used in range requests to specify byte ranges. ContentSecurityPolicy The HTTP Content-Security-Policy header. Defines security policies for the content, helping to prevent cross-site scripting (XSS) and other code injection attacks. ContentType The HTTP Content-Type header. Indicates the media type of the resource, allowing the client to understand how to process the response body. Cookie The HTTP Cookie header. Contains stored HTTP cookies previously sent by the server, allowing the server to identify the client on subsequent requests. Cookie2 The HTTP Cookie2 header. Used to send cookies in a more advanced format, primarily for compatibility with older versions of HTTP. Date The HTTP Date header. Indicates the date and time at which the message was sent, helping clients understand the freshness of the response. ETag The HTTP ETag header. Provides a unique identifier for a specific version of a resource, allowing clients to cache and validate resources efficiently. Expect The HTTP Expect header. Indicates that the client expects certain behaviors from the server, such as support for specific features or conditions. Expires The HTTP Expires header. Indicates the date and time after which the response is considered stale, helping clients manage caching. Host The HTTP Host header. Specifies the domain name of the server and the TCP port number on which the server is listening, allowing for virtual hosting. IfMatch The HTTP If-Match header. Used to make a conditional request, allowing the client to specify that the request should only be processed if the resource matches the given ETag. IfModifiedSince The HTTP If-Modified-Since header. Used to make a conditional request, allowing the client to specify that the resource should only be returned if it has been modified since the given date. IfNoneMatch The HTTP If-None-Match header. Used to make a conditional request, allowing the client to specify that the resource should only be returned if it does not match the given ETag. IfRange The HTTP If-Range header. Used to make a conditional range request, allowing the client to specify that the range should only be returned if the resource has not changed. IfUnmodifiedSince The HTTP If-Unmodified-Since header. Used to make a conditional request, allowing the client to specify that the resource should only be returned if it has not been modified since the given date. KeepAlive The HTTP Keep-Alive header. Used to specify parameters for persistent connections, allowing the client and server to maintain an open connection for multiple requests. LastModified The HTTP Last-Modified header. Indicates the date and time at which the resource was last modified, helping clients determine if they need to refresh their cached version. Link The HTTP Link header. Used to provide relationships between the current resource and other resources, often used for navigation and linking. Location The HTTP Location header. Used in redirection responses to indicate the URL to which the client should redirect. MaxForwards The HTTP Max-Forwards header. Used in OPTIONS requests to limit the number of times the request can be forwarded by proxies. Origin The HTTP Origin header. Indicates the origin of the request, helping servers implement CORS and manage cross-origin requests. P3P The HTTP P3P header. Used to indicate the privacy policy of the server, allowing clients to understand how their data will be handled. Pragma The HTTP Pragma header. Used to include implementation-specific directives that might apply to any recipient along the request/response chain. ProxyAuthenticate The HTTP Proxy-Authenticate header. Used by a proxy server to request authentication from the client, indicating the authentication method required. ProxyAuthorization The HTTP Proxy-Authorization header. Contains credentials for authenticating the client with a proxy server, allowing access to the requested resource. ProxyConnection The HTTP Proxy-Connection header. Used to control whether the network connection to the proxy server should be kept open after the current transaction. PublicKeyPins The HTTP Public-Key-Pins header. Used to prevent man-in-the-middle attacks by specifying which public keys are valid for the server's certificate. Range The HTTP Range header. Used to request a specific range of bytes from a resource, allowing clients to download large files in parts. Referer The HTTP Referer header. Indicates the URL of the resource from which the request originated, helping servers understand the source of traffic. RetryAfter The HTTP Retry-After header. Indicates how long the client should wait before making a follow-up request, often used in rate limiting scenarios. SecWebSocketAccept The HTTP Sec-WebSocket-Accept header. Used in the WebSocket handshake to confirm the server's acceptance of the connection request. SecWebSocketExtensions The HTTP Sec-WebSocket-Extensions header. Used to negotiate WebSocket extensions during the handshake, allowing for additional features and capabilities. SecWebSocketKey The HTTP Sec-WebSocket-Key header. Contains a base64-encoded value used to establish a WebSocket connection, ensuring the request is valid. SecWebSocketProtocol The HTTP Sec-WebSocket-Protocol header. Used to specify subprotocols that the client wishes to use during the WebSocket connection. SecWebSocketVersion The HTTP Sec-WebSocket-Version header. Indicates the version of the WebSocket protocol that the client wishes to use. Server The HTTP Server header. Contains information about the server software handling the request, often used for informational purposes. SetCookie The HTTP Set-Cookie header. Used to send cookies from the server to the client, allowing the server to store state information on the client. SetCookie2 The HTTP Set-Cookie2 header. Used to send cookies in a more advanced format, primarily for compatibility with older versions of HTTP. StrictTransportSecurity The HTTP Strict-Transport-Security header. Enforces secure (HTTPS) connections to the server, helping to prevent man-in-the-middle attacks. TE The HTTP TE header. Indicates the transfer encodings that are acceptable for the response, allowing for content negotiation. TSV The HTTP TSV header. Used to indicate the type of data being sent in a transaction, often used in specific applications or protocols. Trailer The HTTP Trailer header. Indicates that the sender will include additional fields in the message trailer, which can be used for metadata. TransferEncoding The HTTP Transfer-Encoding header. Specifies the form of encoding used to safely transfer the payload body to the user. Upgrade The HTTP Upgrade header. Indicates that the client prefers to upgrade to a different protocol, such as switching from HTTP/1.1 to HTTP/2. UpgradeInsecureRequests The HTTP Upgrade-Insecure-Requests header. Indicates that the client prefers to receive an upgraded version of the resource over HTTPS instead of HTTP. UserAgent The HTTP User-Agent header. Contains information about the user agent (browser or application) making the request, including its version and platform. Vary The HTTP Vary header. Indicates that the response varies based on the value of the specified request headers, allowing for content negotiation. Via The HTTP Via header. Used to track message forwards and proxies, indicating the intermediate protocols and recipients involved in the request/response chain. WWWAuthenticate The HTTP WWW-Authenticate header. Used in response to a request for authentication, indicating the authentication method that should be used to access the resource. Warning The HTTP Warning header. Provides additional information about the status or transformation of a message, often used for caching and validation. XContentDuration The HTTP X-Content-Duration header. Specifies the duration of the content in seconds, often used for media files. XContentTypeOptions The HTTP X-Content-Type-Options header. Used to prevent MIME type sniffing, ensuring that the browser respects the declared content type. XForwardedFor The HTTP X-Forwarded-For header. Used to identify the originating IP address of a client connecting to a web server through an HTTP proxy or load balancer. XForwardedHost The HTTP X-Forwarded-Host header. Used to identify the original host requested by the client in the Host HTTP request header, often used in proxy setups. XFrameOptions The HTTP X-Frame-Options header. Used to control whether a browser should be allowed to render a page in a iframe, frame, embed or object tag, helping to prevent clickjacking attacks. XPoweredBy The HTTP X-Powered-By header. Indicates the technology or framework that powers the web application, often used for informational purposes. XRequestID The HTTP X-Request-ID header. Used to uniquely identify a request for tracking and debugging purposes, often generated by the client or server. XUACompatible The HTTP X-UA-Compatible header. Used to specify the document mode that Internet Explorer should use to render the page, helping to ensure compatibility with older versions."
  },
  "api/Sisk.Core.Http.HttpRequest.Abort.html": {
    "href": "api/Sisk.Core.Http.HttpRequest.Abort.html",
    "title": "Method Abort | Sisk Framework",
    "keywords": "Method Abort Namespace Sisk.Core.Http Assembly Sisk.Core.dll Abort() Immediately closes the connection with the client and does not send any response. public HttpResponse Abort() Returns HttpResponse Remarks This method returns an HttpResponse indicated to exit outside the scope of the request context. However, when calling this method, the connection is interrupted instantly."
  },
  "api/Sisk.Core.Http.HttpRequest.Authority.html": {
    "href": "api/Sisk.Core.Http.HttpRequest.Authority.html",
    "title": "Property Authority | Sisk Framework",
    "keywords": "Property Authority Namespace Sisk.Core.Http Assembly Sisk.Core.dll Authority Get the requested host header with the port from this HTTP request. public string Authority { get; } Property Value string Remarks This property brings local request data, so it may not reflect the original client request when used with proxy or CDNs."
  },
  "api/Sisk.Core.Http.HttpRequest.Bag.html": {
    "href": "api/Sisk.Core.Http.HttpRequest.Bag.html",
    "title": "Property Bag | Sisk Framework",
    "keywords": "Property Bag Namespace Sisk.Core.Http Assembly Sisk.Core.dll Bag Gets the managed object which holds data for an entire HTTP session. public TypedValueDictionary Bag { get; } Property Value TypedValueDictionary Remarks This property is an shortcut for RequestBag property."
  },
  "api/Sisk.Core.Http.HttpRequest.Body.html": {
    "href": "api/Sisk.Core.Http.HttpRequest.Body.html",
    "title": "Property Body | Sisk Framework",
    "keywords": "Property Body Namespace Sisk.Core.Http Assembly Sisk.Core.dll Body Gets the HTTP request body as string, decoded by the request content encoding. public string Body { get; } Property Value string Remarks When calling this property, the entire content of the request is read into memory and stored in RawBody."
  },
  "api/Sisk.Core.Http.HttpRequest.ContentLength.html": {
    "href": "api/Sisk.Core.Http.HttpRequest.ContentLength.html",
    "title": "Property ContentLength | Sisk Framework",
    "keywords": "Property ContentLength Namespace Sisk.Core.Http Assembly Sisk.Core.dll ContentLength Gets the content length in bytes count. public long ContentLength { get; } Property Value long Remarks This value can be negative if the content length is unknown."
  },
  "api/Sisk.Core.Http.HttpRequest.Context.html": {
    "href": "api/Sisk.Core.Http.HttpRequest.Context.html",
    "title": "Property Context | Sisk Framework",
    "keywords": "Property Context Namespace Sisk.Core.Http Assembly Sisk.Core.dll Context Gets the HttpContext for this request. public HttpContext Context { get; } Property Value HttpContext"
  },
  "api/Sisk.Core.Http.HttpRequest.Cookies.html": {
    "href": "api/Sisk.Core.Http.HttpRequest.Cookies.html",
    "title": "Property Cookies | Sisk Framework",
    "keywords": "Property Cookies Namespace Sisk.Core.Http Assembly Sisk.Core.dll Cookies Gets an StringKeyStore object with all cookies set in this request. public StringKeyStore Cookies { get; } Property Value StringKeyStore"
  },
  "api/Sisk.Core.Http.HttpRequest.FullPath.html": {
    "href": "api/Sisk.Core.Http.HttpRequest.FullPath.html",
    "title": "Property FullPath | Sisk Framework",
    "keywords": "Property FullPath Namespace Sisk.Core.Http Assembly Sisk.Core.dll FullPath Gets the raw, full HTTP request path with the query string. public string FullPath { get; } Property Value string"
  },
  "api/Sisk.Core.Http.HttpRequest.FullUrl.html": {
    "href": "api/Sisk.Core.Http.HttpRequest.FullUrl.html",
    "title": "Property FullUrl | Sisk Framework",
    "keywords": "Property FullUrl Namespace Sisk.Core.Http Assembly Sisk.Core.dll FullUrl Gets the full URL for this request, with scheme, host, port, path and query. public string FullUrl { get; } Property Value string Remarks This property brings local request data, so it may not reflect the original client request when used with proxy or CDNs."
  },
  "api/Sisk.Core.Http.HttpRequest.GetEventSource.html": {
    "href": "api/Sisk.Core.Http.HttpRequest.GetEventSource.html",
    "title": "Method GetEventSource | Sisk Framework",
    "keywords": "Method GetEventSource Namespace Sisk.Core.Http Assembly Sisk.Core.dll GetEventSource(string?) Gets an Event Source interface for this request. Calling this method will put this HttpRequest instance in it's event source listening state. public HttpRequestEventSource GetEventSource(string? identifier = null) Parameters identifier string Optional. Defines an label to the EventStream connection, useful for finding this connection's reference later. Returns HttpRequestEventSource"
  },
  "api/Sisk.Core.Http.HttpRequest.GetFormContent.html": {
    "href": "api/Sisk.Core.Http.HttpRequest.GetFormContent.html",
    "title": "Method GetFormContent | Sisk Framework",
    "keywords": "Method GetFormContent Namespace Sisk.Core.Http Assembly Sisk.Core.dll GetFormContent() Reads the request body and extracts form data parameters from it. public StringKeyStore GetFormContent() Returns StringKeyStore"
  },
  "api/Sisk.Core.Http.HttpRequest.GetMultipartFormContent.html": {
    "href": "api/Sisk.Core.Http.HttpRequest.GetMultipartFormContent.html",
    "title": "Method GetMultipartFormContent | Sisk Framework",
    "keywords": "Method GetMultipartFormContent Namespace Sisk.Core.Http Assembly Sisk.Core.dll GetMultipartFormContent() Reads the request body and obtains a MultipartFormCollection from it. public MultipartFormCollection GetMultipartFormContent() Returns MultipartFormCollection"
  },
  "api/Sisk.Core.Http.HttpRequest.GetRawHttpRequest.html": {
    "href": "api/Sisk.Core.Http.HttpRequest.GetRawHttpRequest.html",
    "title": "Method GetRawHttpRequest | Sisk Framework",
    "keywords": "Method GetRawHttpRequest Namespace Sisk.Core.Http Assembly Sisk.Core.dll GetRawHttpRequest(bool, bool) Gets a visual representation of this request. public string GetRawHttpRequest(bool includeBody = true, bool appendExtraInfo = false) Parameters includeBody bool Optional. Defines if the body should be included in the output. appendExtraInfo bool Optional. Appends extra information, such as request id and date into the output. Returns string"
  },
  "api/Sisk.Core.Http.HttpRequest.GetRequestStream.html": {
    "href": "api/Sisk.Core.Http.HttpRequest.GetRequestStream.html",
    "title": "Method GetRequestStream | Sisk Framework",
    "keywords": "Method GetRequestStream Namespace Sisk.Core.Http Assembly Sisk.Core.dll GetRequestStream() Gets the HTTP request content stream. This property is only available while the content has not been imported by the HTTP server and will invalidate the body content cached in this object. public Stream GetRequestStream() Returns Stream"
  },
  "api/Sisk.Core.Http.HttpRequest.GetResponseStream.html": {
    "href": "api/Sisk.Core.Http.HttpRequest.GetResponseStream.html",
    "title": "Method GetResponseStream | Sisk Framework",
    "keywords": "Method GetResponseStream Namespace Sisk.Core.Http Assembly Sisk.Core.dll GetResponseStream() Gets an HTTP response stream for this HTTP request. public HttpResponseStream GetResponseStream() Returns HttpResponseStream"
  },
  "api/Sisk.Core.Http.HttpRequest.GetWebSocket.html": {
    "href": "api/Sisk.Core.Http.HttpRequest.GetWebSocket.html",
    "title": "Method GetWebSocket | Sisk Framework",
    "keywords": "Method GetWebSocket Namespace Sisk.Core.Http Assembly Sisk.Core.dll GetWebSocket(string?, string?) Accepts and acquires a websocket for this request. Calling this method will put this HttpRequest instance in streaming state. public HttpWebSocket GetWebSocket(string? subprotocol = null, string? identifier = null) Parameters subprotocol string Optional. Determines the sub-protocol to plug the websocket in. identifier string Optional. Defines an label to the Web Socket connection, useful for finding this connection's reference later. Returns HttpWebSocket"
  },
  "api/Sisk.Core.Http.HttpRequest.HasContents.html": {
    "href": "api/Sisk.Core.Http.HttpRequest.HasContents.html",
    "title": "Property HasContents | Sisk Framework",
    "keywords": "Property HasContents Namespace Sisk.Core.Http Assembly Sisk.Core.dll HasContents Gets a boolean indicating whether this request has body contents. public bool HasContents { get; } Property Value bool"
  },
  "api/Sisk.Core.Http.HttpRequest.Headers.html": {
    "href": "api/Sisk.Core.Http.HttpRequest.Headers.html",
    "title": "Property Headers | Sisk Framework",
    "keywords": "Property Headers Namespace Sisk.Core.Http Assembly Sisk.Core.dll Headers Gets the HTTP request headers. public HttpHeaderCollection Headers { get; } Property Value HttpHeaderCollection"
  },
  "api/Sisk.Core.Http.HttpRequest.Host.html": {
    "href": "api/Sisk.Core.Http.HttpRequest.Host.html",
    "title": "Property Host | Sisk Framework",
    "keywords": "Property Host Namespace Sisk.Core.Http Assembly Sisk.Core.dll Host Get the requested host (without port) for this HttpRequest. public string? Host { get; } Property Value string"
  },
  "api/Sisk.Core.Http.HttpRequest.IsContentAvailable.html": {
    "href": "api/Sisk.Core.Http.HttpRequest.IsContentAvailable.html",
    "title": "Property IsContentAvailable | Sisk Framework",
    "keywords": "Property IsContentAvailable Namespace Sisk.Core.Http Assembly Sisk.Core.dll IsContentAvailable Gets a boolean indicating whether this request has body contents and whether it has already been read into memory by the server. public bool IsContentAvailable { get; } Property Value bool"
  },
  "api/Sisk.Core.Http.HttpRequest.IsSecure.html": {
    "href": "api/Sisk.Core.Http.HttpRequest.IsSecure.html",
    "title": "Property IsSecure | Sisk Framework",
    "keywords": "Property IsSecure Namespace Sisk.Core.Http Assembly Sisk.Core.dll IsSecure Gets a boolean indicating whether this request was locally made by an secure transport context (SSL/TLS) or not. public bool IsSecure { get; } Property Value bool Remarks This property brings local request data, so it may not reflect the original client request when used with proxy or CDNs."
  },
  "api/Sisk.Core.Http.HttpRequest.Method.html": {
    "href": "api/Sisk.Core.Http.HttpRequest.Method.html",
    "title": "Property Method | Sisk Framework",
    "keywords": "Property Method Namespace Sisk.Core.Http Assembly Sisk.Core.dll Method Gets the HTTP request method. public HttpMethod Method { get; } Property Value HttpMethod"
  },
  "api/Sisk.Core.Http.HttpRequest.Path.html": {
    "href": "api/Sisk.Core.Http.HttpRequest.Path.html",
    "title": "Property Path | Sisk Framework",
    "keywords": "Property Path Namespace Sisk.Core.Http Assembly Sisk.Core.dll Path Gets the HTTP request path without the query string. public string Path { get; } Property Value string"
  },
  "api/Sisk.Core.Http.HttpRequest.Query.html": {
    "href": "api/Sisk.Core.Http.HttpRequest.Query.html",
    "title": "Property Query | Sisk Framework",
    "keywords": "Property Query Namespace Sisk.Core.Http Assembly Sisk.Core.dll Query Gets the HTTP request query value collection. public StringValueCollection Query { get; } Property Value StringValueCollection"
  },
  "api/Sisk.Core.Http.HttpRequest.QueryString.html": {
    "href": "api/Sisk.Core.Http.HttpRequest.QueryString.html",
    "title": "Property QueryString | Sisk Framework",
    "keywords": "Property QueryString Namespace Sisk.Core.Http Assembly Sisk.Core.dll QueryString Gets the HTTP request URL raw query string, including the '?' char. public string QueryString { get; } Property Value string"
  },
  "api/Sisk.Core.Http.HttpRequest.RawBody.html": {
    "href": "api/Sisk.Core.Http.HttpRequest.RawBody.html",
    "title": "Property RawBody | Sisk Framework",
    "keywords": "Property RawBody Namespace Sisk.Core.Http Assembly Sisk.Core.dll RawBody Gets the HTTP request body as a byte array. public byte[] RawBody { get; } Property Value byte[] Remarks When calling this property, the entire content of the request is read into memory."
  },
  "api/Sisk.Core.Http.HttpRequest.RemoteAddress.html": {
    "href": "api/Sisk.Core.Http.HttpRequest.RemoteAddress.html",
    "title": "Property RemoteAddress | Sisk Framework",
    "keywords": "Property RemoteAddress Namespace Sisk.Core.Http Assembly Sisk.Core.dll RemoteAddress Gets the incoming local IP address from the request. public IPAddress RemoteAddress { get; } Property Value IPAddress"
  },
  "api/Sisk.Core.Http.HttpRequest.RequestEncoding.html": {
    "href": "api/Sisk.Core.Http.HttpRequest.RequestEncoding.html",
    "title": "Property RequestEncoding | Sisk Framework",
    "keywords": "Property RequestEncoding Namespace Sisk.Core.Http Assembly Sisk.Core.dll RequestEncoding Gets an string Encoding that can be used to decode text in this HTTP request. public Encoding RequestEncoding { get; } Property Value Encoding"
  },
  "api/Sisk.Core.Http.HttpRequest.RequestId.html": {
    "href": "api/Sisk.Core.Http.HttpRequest.RequestId.html",
    "title": "Property RequestId | Sisk Framework",
    "keywords": "Property RequestId Namespace Sisk.Core.Http Assembly Sisk.Core.dll RequestId Gets a unique random ID for this request. public Guid RequestId { get; } Property Value Guid"
  },
  "api/Sisk.Core.Http.HttpRequest.RequestedAt.html": {
    "href": "api/Sisk.Core.Http.HttpRequest.RequestedAt.html",
    "title": "Property RequestedAt | Sisk Framework",
    "keywords": "Property RequestedAt Namespace Sisk.Core.Http Assembly Sisk.Core.dll RequestedAt Gets the moment which the request was received by the server. public DateTime RequestedAt { get; } Property Value DateTime"
  },
  "api/Sisk.Core.Http.HttpRequest.RouteParameters.html": {
    "href": "api/Sisk.Core.Http.HttpRequest.RouteParameters.html",
    "title": "Property RouteParameters | Sisk Framework",
    "keywords": "Property RouteParameters Namespace Sisk.Core.Http Assembly Sisk.Core.dll RouteParameters Gets the StringValueCollection object which represents the current route parameters. public StringValueCollection RouteParameters { get; } Property Value StringValueCollection"
  },
  "api/Sisk.Core.Http.HttpRequest.SendTo.html": {
    "href": "api/Sisk.Core.Http.HttpRequest.SendTo.html",
    "title": "Method SendTo | Sisk Framework",
    "keywords": "Method SendTo Namespace Sisk.Core.Http Assembly Sisk.Core.dll SendTo(RouteAction) Calls another handler for this request, preserving the current call-stack frame, and then returns the response from it. This method manages to prevent possible stack overflows. public object SendTo(RouteAction otherCallback) Parameters otherCallback RouteAction Defines the RouteAction method which will handle this request. Returns object"
  },
  "api/Sisk.Core.Http.HttpRequest.ToString.html": {
    "href": "api/Sisk.Core.Http.HttpRequest.ToString.html",
    "title": "Method ToString | Sisk Framework",
    "keywords": "Method ToString Namespace Sisk.Core.Http Assembly Sisk.Core.dll ToString() Gets an string representation of this HttpRequest object. public override string ToString() Returns string"
  },
  "api/Sisk.Core.Http.HttpRequest.Uri.html": {
    "href": "api/Sisk.Core.Http.HttpRequest.Uri.html",
    "title": "Property Uri | Sisk Framework",
    "keywords": "Property Uri Namespace Sisk.Core.Http Assembly Sisk.Core.dll Uri Gets the System.Uri component for this HTTP request requested URL. public Uri Uri { get; } Property Value Uri"
  },
  "api/Sisk.Core.Http.HttpRequest.html": {
    "href": "api/Sisk.Core.Http.HttpRequest.html",
    "title": "Class HttpRequest | Sisk Framework",
    "keywords": "Class HttpRequest Namespace Sisk.Core.Http Assembly Sisk.Core.dll Represents an HTTP request received by a Sisk server. public sealed class HttpRequest Inheritance object HttpRequest Inherited Members object.GetType() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties Authority Get the requested host header with the port from this HTTP request. Bag Gets the managed object which holds data for an entire HTTP session. Body Gets the HTTP request body as string, decoded by the request content encoding. ContentLength Gets the content length in bytes count. Context Gets the HttpContext for this request. Cookies Gets an StringKeyStore object with all cookies set in this request. FullPath Gets the raw, full HTTP request path with the query string. FullUrl Gets the full URL for this request, with scheme, host, port, path and query. HasContents Gets a boolean indicating whether this request has body contents. Headers Gets the HTTP request headers. Host Get the requested host (without port) for this HttpRequest. IsContentAvailable Gets a boolean indicating whether this request has body contents and whether it has already been read into memory by the server. IsSecure Gets a boolean indicating whether this request was locally made by an secure transport context (SSL/TLS) or not. Method Gets the HTTP request method. Path Gets the HTTP request path without the query string. Query Gets the HTTP request query value collection. QueryString Gets the HTTP request URL raw query string, including the '?' char. RawBody Gets the HTTP request body as a byte array. RemoteAddress Gets the incoming local IP address from the request. RequestEncoding Gets an string Encoding that can be used to decode text in this HTTP request. RequestId Gets a unique random ID for this request. RequestedAt Gets the moment which the request was received by the server. RouteParameters Gets the StringValueCollection object which represents the current route parameters. Uri Gets the System.Uri component for this HTTP request requested URL. Methods Abort() Immediately closes the connection with the client and does not send any response. GetEventSource(string?) Gets an Event Source interface for this request. Calling this method will put this HttpRequest instance in it's event source listening state. GetFormContent() Reads the request body and extracts form data parameters from it. GetMultipartFormContent() Reads the request body and obtains a MultipartFormCollection from it. GetRawHttpRequest(bool, bool) Gets a visual representation of this request. GetRequestStream() Gets the HTTP request content stream. This property is only available while the content has not been imported by the HTTP server and will invalidate the body content cached in this object. GetResponseStream() Gets an HTTP response stream for this HTTP request. GetWebSocket(string?, string?) Accepts and acquires a websocket for this request. Calling this method will put this HttpRequest instance in streaming state. SendTo(RouteAction) Calls another handler for this request, preserving the current call-stack frame, and then returns the response from it. This method manages to prevent possible stack overflows. ToString() Gets an string representation of this HttpRequest object."
  },
  "api/Sisk.Core.Http.HttpRequestException.html": {
    "href": "api/Sisk.Core.Http.HttpRequestException.html",
    "title": "Class HttpRequestException | Sisk Framework",
    "keywords": "Class HttpRequestException Namespace Sisk.Core.Http Assembly Sisk.Core.dll Represents an exception that is thrown while a request is being interpreted by the HTTP server. public sealed class HttpRequestException : Exception, ISerializable Inheritance object Exception HttpRequestException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode()"
  },
  "api/Sisk.Core.Http.HttpResponse.-ctor.html": {
    "href": "api/Sisk.Core.Http.HttpResponse.-ctor.html",
    "title": "Constructor HttpResponse | Sisk Framework",
    "keywords": "Constructor HttpResponse Namespace Sisk.Core.Http Assembly Sisk.Core.dll HttpResponse() Creates an new HttpResponse instance with HTTP OK status code and no content. public HttpResponse() HttpResponse(HttpStatusCode) Creates an new HttpResponse instance with given status code. public HttpResponse(HttpStatusCode status) Parameters status HttpStatusCode The HttpStatusCode of this HTTP response. HttpResponse(int) Creates an new HttpResponse instance with given status code. public HttpResponse(int status) Parameters status int The status code of this HTTP response. HttpResponse(int, HttpContent?) Creates an new HttpResponse instance with given status code and HTTP content. public HttpResponse(int status, HttpContent? content) Parameters status int The status code of this HTTP response. content HttpContent The response content, if any. HttpResponse(HttpContent?) Creates an new HttpResponse instance with given HTTP content, with default status code as 200 OK. public HttpResponse(HttpContent? content) Parameters content HttpContent The response content, if any. HttpResponse(string) Creates an new HttpResponse instanec with given string content and status code as 200 OK. public HttpResponse(string stringContent) Parameters stringContent string The UTF-8 string content. HttpResponse(HttpStatusCode, HttpContent?) Creates an new HttpResponse instance with given status code and HTTP contents. public HttpResponse(HttpStatusCode status, HttpContent? content) Parameters status HttpStatusCode The HttpStatusCode of this HTTP response. content HttpContent The response content, if any. HttpResponse(in HttpStatusInformation) Creates an new HttpResponse instance with given status code. public HttpResponse(in HttpStatusInformation status) Parameters status HttpStatusInformation The HttpStatusInformation of this HTTP response."
  },
  "api/Sisk.Core.Http.HttpResponse.Content.html": {
    "href": "api/Sisk.Core.Http.HttpResponse.Content.html",
    "title": "Property Content | Sisk Framework",
    "keywords": "Property Content Namespace Sisk.Core.Http Assembly Sisk.Core.dll Content Gets or sets the HTTP response body contents. public HttpContent? Content { get; set; } Property Value HttpContent"
  },
  "api/Sisk.Core.Http.HttpResponse.Equals.html": {
    "href": "api/Sisk.Core.Http.HttpResponse.Equals.html",
    "title": "Method Equals | Sisk Framework",
    "keywords": "Method Equals Namespace Sisk.Core.Http Assembly Sisk.Core.dll Equals(object?) public override bool Equals(object? obj) Parameters obj object Returns bool"
  },
  "api/Sisk.Core.Http.HttpResponse.GetHashCode.html": {
    "href": "api/Sisk.Core.Http.HttpResponse.GetHashCode.html",
    "title": "Method GetHashCode | Sisk Framework",
    "keywords": "Method GetHashCode Namespace Sisk.Core.Http Assembly Sisk.Core.dll GetHashCode() public override int GetHashCode() Returns int"
  },
  "api/Sisk.Core.Http.HttpResponse.GetRawHttpResponse.html": {
    "href": "api/Sisk.Core.Http.HttpResponse.GetRawHttpResponse.html",
    "title": "Method GetRawHttpResponse | Sisk Framework",
    "keywords": "Method GetRawHttpResponse Namespace Sisk.Core.Http Assembly Sisk.Core.dll GetRawHttpResponse(bool) Gets a visual representation of this HTTP response. public string GetRawHttpResponse(bool includeBody = true) Parameters includeBody bool Determines whether the message content will also be included in the return from this function. Returns string"
  },
  "api/Sisk.Core.Http.HttpResponse.Headers.html": {
    "href": "api/Sisk.Core.Http.HttpResponse.Headers.html",
    "title": "Property Headers | Sisk Framework",
    "keywords": "Property Headers Namespace Sisk.Core.Http Assembly Sisk.Core.dll Headers Gets or sets the HttpHeaderCollection instance of the HTTP response headers. public HttpHeaderCollection Headers { get; set; } Property Value HttpHeaderCollection"
  },
  "api/Sisk.Core.Http.HttpResponse.Refuse.html": {
    "href": "api/Sisk.Core.Http.HttpResponse.Refuse.html",
    "title": "Method Refuse | Sisk Framework",
    "keywords": "Method Refuse Namespace Sisk.Core.Http Assembly Sisk.Core.dll Refuse() Creates an HttpResponse object which closes the connection with the client immediately (ECONNRESET). public static HttpResponse Refuse() Returns HttpResponse"
  },
  "api/Sisk.Core.Http.HttpResponse.SendChunked.html": {
    "href": "api/Sisk.Core.Http.HttpResponse.SendChunked.html",
    "title": "Property SendChunked | Sisk Framework",
    "keywords": "Property SendChunked Namespace Sisk.Core.Http Assembly Sisk.Core.dll SendChunked Gets or sets whether the HTTP response will be sent chunked. When setting this property to true, the Content-Length header is automatically omitted. public bool SendChunked { get; set; } Property Value bool Remarks The response is always sent as chunked when it is not possible to determine the size of the content to send."
  },
  "api/Sisk.Core.Http.HttpResponse.SetCookie.html": {
    "href": "api/Sisk.Core.Http.HttpResponse.SetCookie.html",
    "title": "Method SetCookie | Sisk Framework",
    "keywords": "Method SetCookie Namespace Sisk.Core.Http Assembly Sisk.Core.dll SetCookie(Cookie) Sets a cookie and sends it in the response to be set by the client. public void SetCookie(Cookie cookie) Parameters cookie Cookie The cookie object. SetCookie(string, string) Sets a cookie and sends it in the response to be set by the client. public void SetCookie(string name, string value) Parameters name string The cookie name. value string The cookie value. SetCookie(string, string, DateTime?, TimeSpan?, string?, string?, bool?, bool?, string?) Sets a cookie and sends it in the response to be set by the client. public void SetCookie(string name, string value, DateTime? expires = null, TimeSpan? maxAge = null, string? domain = null, string? path = null, bool? secure = null, bool? httpOnly = null, string? sameSite = null) Parameters name string The cookie name. value string The cookie value. expires DateTime? The cookie expirity date. maxAge TimeSpan? The cookie max duration after being set. domain string The domain where the cookie will be valid. path string The path where the cookie will be valid. secure bool? Determines if the cookie will only be stored in an secure context. httpOnly bool? Determines if the cookie will be only available in the HTTP context. sameSite string The cookie SameSite parameter."
  },
  "api/Sisk.Core.Http.HttpResponse.Status.html": {
    "href": "api/Sisk.Core.Http.HttpResponse.Status.html",
    "title": "Property Status | Sisk Framework",
    "keywords": "Property Status Namespace Sisk.Core.Http Assembly Sisk.Core.dll Status Gets or sets the HTTP status code and description for this HTTP response. public HttpStatusInformation Status { get; set; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpResponse.ToString.html": {
    "href": "api/Sisk.Core.Http.HttpResponse.ToString.html",
    "title": "Method ToString | Sisk Framework",
    "keywords": "Method ToString Namespace Sisk.Core.Http Assembly Sisk.Core.dll ToString() public override string ToString() Returns string"
  },
  "api/Sisk.Core.Http.HttpResponse.html": {
    "href": "api/Sisk.Core.Http.HttpResponse.html",
    "title": "Class HttpResponse | Sisk Framework",
    "keywords": "Class HttpResponse Namespace Sisk.Core.Http Assembly Sisk.Core.dll Represents an HTTP Response. public class HttpResponse Inheritance object HttpResponse Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object, object) object.ReferenceEquals(object, object) Extension Methods HttpResponseExtensions.WithContent<THttpResponse>(THttpResponse, HttpContent) HttpResponseExtensions.WithContent<THttpResponse>(THttpResponse, string) HttpResponseExtensions.WithContent<THttpResponse>(THttpResponse, string, Encoding?, string) HttpResponseExtensions.WithCookie<THttpResponse>(THttpResponse, Cookie) HttpResponseExtensions.WithCookie<THttpResponse>(THttpResponse, string, string, DateTime?, TimeSpan?, string?, string?, bool?, bool?, string?) HttpResponseExtensions.WithHeader<THttpResponse>(THttpResponse, StringKeyStore) HttpResponseExtensions.WithHeader<THttpResponse>(THttpResponse, NameValueCollection) HttpResponseExtensions.WithHeader<THttpResponse>(THttpResponse, string, string) HttpResponseExtensions.WithStatus<THttpResponse>(THttpResponse, in HttpStatusInformation) HttpResponseExtensions.WithStatus<THttpResponse>(THttpResponse, int) HttpResponseExtensions.WithStatus<THttpResponse>(THttpResponse, HttpStatusCode) Constructors HttpResponse() Creates an new HttpResponse instance with HTTP OK status code and no content. HttpResponse(in HttpStatusInformation) Creates an new HttpResponse instance with given status code. HttpResponse(int) Creates an new HttpResponse instance with given status code. HttpResponse(int, HttpContent?) Creates an new HttpResponse instance with given status code and HTTP content. HttpResponse(HttpContent?) Creates an new HttpResponse instance with given HTTP content, with default status code as 200 OK. HttpResponse(HttpStatusCode) Creates an new HttpResponse instance with given status code. HttpResponse(HttpStatusCode, HttpContent?) Creates an new HttpResponse instance with given status code and HTTP contents. HttpResponse(string) Creates an new HttpResponse instanec with given string content and status code as 200 OK. Properties Content Gets or sets the HTTP response body contents. Headers Gets or sets the HttpHeaderCollection instance of the HTTP response headers. SendChunked Gets or sets whether the HTTP response will be sent chunked. When setting this property to true, the Content-Length header is automatically omitted. Status Gets or sets the HTTP status code and description for this HTTP response. Methods Equals(object?) GetHashCode() GetRawHttpResponse(bool) Gets a visual representation of this HTTP response. Refuse() Creates an HttpResponse object which closes the connection with the client immediately (ECONNRESET). SetCookie(Cookie) Sets a cookie and sends it in the response to be set by the client. SetCookie(string, string) Sets a cookie and sends it in the response to be set by the client. SetCookie(string, string, DateTime?, TimeSpan?, string?, string?, bool?, bool?, string?) Sets a cookie and sends it in the response to be set by the client. ToString()"
  },
  "api/Sisk.Core.Http.HttpResponseExtensions.WithContent.html": {
    "href": "api/Sisk.Core.Http.HttpResponseExtensions.WithContent.html",
    "title": "Method WithContent | Sisk Framework",
    "keywords": "Method WithContent Namespace Sisk.Core.Http Assembly Sisk.Core.dll WithContent<THttpResponse>(THttpResponse, string) Sets an UTF-8 string as the HTTP response content in this HttpResponse. public static THttpResponse WithContent<THttpResponse>(this THttpResponse response, string content) where THttpResponse : HttpResponse Parameters response THttpResponse The HttpResponse object. content string The UTF-8 string containing the response body. Returns THttpResponse The self THttpResponse object. Type Parameters THttpResponse The type which implements HttpResponse. WithContent<THttpResponse>(THttpResponse, string, Encoding?, string) Sets an string as the HTTP response content in this HttpResponse. public static THttpResponse WithContent<THttpResponse>(this THttpResponse response, string content, Encoding? encoding, string mimeType) where THttpResponse : HttpResponse Parameters response THttpResponse The HttpResponse object. content string The string containing the response body. encoding Encoding The encoding to encode the string message. mimeType string The mime-type of the response content. Returns THttpResponse The self THttpResponse object. Type Parameters THttpResponse The type which implements HttpResponse. WithContent<THttpResponse>(THttpResponse, HttpContent) Sets an HttpContent as the HTTP content body in this HttpResponse. public static THttpResponse WithContent<THttpResponse>(this THttpResponse response, HttpContent content) where THttpResponse : HttpResponse Parameters response THttpResponse The HttpResponse object. content HttpContent The HTTP content object. Returns THttpResponse The self THttpResponse object. Type Parameters THttpResponse The type which implements HttpResponse."
  },
  "api/Sisk.Core.Http.HttpResponseExtensions.WithCookie.html": {
    "href": "api/Sisk.Core.Http.HttpResponseExtensions.WithCookie.html",
    "title": "Method WithCookie | Sisk Framework",
    "keywords": "Method WithCookie Namespace Sisk.Core.Http Assembly Sisk.Core.dll WithCookie<THttpResponse>(THttpResponse, string, string, DateTime?, TimeSpan?, string?, string?, bool?, bool?, string?) Sets a cookie and sends it in the response to be set by the client. public static THttpResponse WithCookie<THttpResponse>(this THttpResponse response, string name, string value, DateTime? expires = null, TimeSpan? maxAge = null, string? domain = null, string? path = null, bool? secure = null, bool? httpOnly = null, string? sameSite = null) where THttpResponse : HttpResponse Parameters response THttpResponse The HttpResponse object. name string The cookie name. value string The cookie value. expires DateTime? The cookie expirity date. maxAge TimeSpan? The cookie max duration after being set. domain string The domain where the cookie will be valid. path string The path where the cookie will be valid. secure bool? Determines if the cookie will only be stored in an secure context. httpOnly bool? Determines if the cookie will be only available in the HTTP context. sameSite string The cookie SameSite parameter. Returns THttpResponse Type Parameters THttpResponse The type which implements HttpResponse. WithCookie<THttpResponse>(THttpResponse, Cookie) Sets a cookie and sends it in the response to be set by the client. public static THttpResponse WithCookie<THttpResponse>(this THttpResponse response, Cookie cookie) where THttpResponse : HttpResponse Parameters response THttpResponse The HttpResponse object. cookie Cookie The cookie object. Returns THttpResponse Type Parameters THttpResponse The type which implements HttpResponse."
  },
  "api/Sisk.Core.Http.HttpResponseExtensions.WithHeader.html": {
    "href": "api/Sisk.Core.Http.HttpResponseExtensions.WithHeader.html",
    "title": "Method WithHeader | Sisk Framework",
    "keywords": "Method WithHeader Namespace Sisk.Core.Http Assembly Sisk.Core.dll WithHeader<THttpResponse>(THttpResponse, string, string) Sets an HTTP header in this HttpResponse. public static THttpResponse WithHeader<THttpResponse>(this THttpResponse response, string headerName, string headerValue) where THttpResponse : HttpResponse Parameters response THttpResponse The HttpResponse object. headerName string The name of the header. headerValue string The header value. Returns THttpResponse The self THttpResponse object. Type Parameters THttpResponse The type which implements HttpResponse. WithHeader<THttpResponse>(THttpResponse, NameValueCollection) Sets an list of HTTP headers in this HttpResponse. public static THttpResponse WithHeader<THttpResponse>(this THttpResponse response, NameValueCollection headers) where THttpResponse : HttpResponse Parameters response THttpResponse The HttpResponse object. headers NameValueCollection The collection of HTTP headers. Returns THttpResponse The self THttpResponse object. Type Parameters THttpResponse The type which implements HttpResponse. WithHeader<THttpResponse>(THttpResponse, StringKeyStore) Sets an list of HTTP headers in this HttpResponse. public static THttpResponse WithHeader<THttpResponse>(this THttpResponse response, StringKeyStore headers) where THttpResponse : HttpResponse Parameters response THttpResponse The HttpResponse object. headers StringKeyStore The collection of HTTP headers. Returns THttpResponse The self THttpResponse object. Type Parameters THttpResponse The type which implements HttpResponse."
  },
  "api/Sisk.Core.Http.HttpResponseExtensions.WithStatus.html": {
    "href": "api/Sisk.Core.Http.HttpResponseExtensions.WithStatus.html",
    "title": "Method WithStatus | Sisk Framework",
    "keywords": "Method WithStatus Namespace Sisk.Core.Http Assembly Sisk.Core.dll WithStatus<THttpResponse>(THttpResponse, int) Sets the HTTP status code of this HttpResponse. public static THttpResponse WithStatus<THttpResponse>(this THttpResponse response, int httpStatusCode) where THttpResponse : HttpResponse Parameters response THttpResponse The HttpResponse object. httpStatusCode int The HTTP status code. Returns THttpResponse The self THttpResponse object. Type Parameters THttpResponse The type which implements HttpResponse. WithStatus<THttpResponse>(THttpResponse, HttpStatusCode) Sets the HTTP status code of this HttpResponse. public static THttpResponse WithStatus<THttpResponse>(this THttpResponse response, HttpStatusCode httpStatusCode) where THttpResponse : HttpResponse Parameters response THttpResponse The HttpResponse object. httpStatusCode HttpStatusCode The HTTP status code. Returns THttpResponse The self THttpResponse object. Type Parameters THttpResponse The type which implements HttpResponse. WithStatus<THttpResponse>(THttpResponse, in HttpStatusInformation) Sets the HTTP status code of this HttpResponse. public static THttpResponse WithStatus<THttpResponse>(this THttpResponse response, in HttpStatusInformation statusInformation) where THttpResponse : HttpResponse Parameters response THttpResponse The HttpResponse object. statusInformation HttpStatusInformation The HTTP status information. Returns THttpResponse The self THttpResponse object. Type Parameters THttpResponse The type which implements HttpResponse."
  },
  "api/Sisk.Core.Http.HttpResponseExtensions.html": {
    "href": "api/Sisk.Core.Http.HttpResponseExtensions.html",
    "title": "Class HttpResponseExtensions | Sisk Framework",
    "keywords": "Class HttpResponseExtensions Namespace Sisk.Core.Http Assembly Sisk.Core.dll Provides useful extensions for HttpResponse objects. public static class HttpResponseExtensions Inheritance object HttpResponseExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods WithContent<THttpResponse>(THttpResponse, HttpContent) Sets an HttpContent as the HTTP content body in this HttpResponse. WithContent<THttpResponse>(THttpResponse, string) Sets an UTF-8 string as the HTTP response content in this HttpResponse. WithContent<THttpResponse>(THttpResponse, string, Encoding?, string) Sets an string as the HTTP response content in this HttpResponse. WithCookie<THttpResponse>(THttpResponse, Cookie) Sets a cookie and sends it in the response to be set by the client. WithCookie<THttpResponse>(THttpResponse, string, string, DateTime?, TimeSpan?, string?, string?, bool?, bool?, string?) Sets a cookie and sends it in the response to be set by the client. WithHeader<THttpResponse>(THttpResponse, StringKeyStore) Sets an list of HTTP headers in this HttpResponse. WithHeader<THttpResponse>(THttpResponse, NameValueCollection) Sets an list of HTTP headers in this HttpResponse. WithHeader<THttpResponse>(THttpResponse, string, string) Sets an HTTP header in this HttpResponse. WithStatus<THttpResponse>(THttpResponse, in HttpStatusInformation) Sets the HTTP status code of this HttpResponse. WithStatus<THttpResponse>(THttpResponse, int) Sets the HTTP status code of this HttpResponse. WithStatus<THttpResponse>(THttpResponse, HttpStatusCode) Sets the HTTP status code of this HttpResponse."
  },
  "api/Sisk.Core.Http.HttpServer.-ctor.html": {
    "href": "api/Sisk.Core.Http.HttpServer.-ctor.html",
    "title": "Constructor HttpServer | Sisk Framework",
    "keywords": "Constructor HttpServer Namespace Sisk.Core.Http Assembly Sisk.Core.dll HttpServer(HttpServerConfiguration) Creates a new default configuration HttpServer instance with the given Route and server configuration. public HttpServer(HttpServerConfiguration configuration) Parameters configuration HttpServerConfiguration The configuration object of the server."
  },
  "api/Sisk.Core.Http.HttpServer.CreateBuilder.html": {
    "href": "api/Sisk.Core.Http.HttpServer.CreateBuilder.html",
    "title": "Method CreateBuilder | Sisk Framework",
    "keywords": "Method CreateBuilder Namespace Sisk.Core.Http Assembly Sisk.Core.dll CreateBuilder(Action<HttpServerHostContextBuilder>) Builds an HttpServerHostContext context invoking the handler on it. public static HttpServerHostContextBuilder CreateBuilder(Action<HttpServerHostContextBuilder> handler) Parameters handler Action<HttpServerHostContextBuilder> The action which will configure the host context. Returns HttpServerHostContextBuilder CreateBuilder(ushort) Builds an empty HttpServerHostContext context with predefined listening port. public static HttpServerHostContextBuilder CreateBuilder(ushort port) Parameters port ushort Returns HttpServerHostContextBuilder CreateBuilder(string) Builds an empty HttpServerHostContext context with predefined listening host string. public static HttpServerHostContextBuilder CreateBuilder(string listeningHost) Parameters listeningHost string Returns HttpServerHostContextBuilder CreateBuilder() Builds an empty HttpServerHostContext context. public static HttpServerHostContextBuilder CreateBuilder() Returns HttpServerHostContextBuilder"
  },
  "api/Sisk.Core.Http.HttpServer.CreateListener.html": {
    "href": "api/Sisk.Core.Http.HttpServer.CreateListener.html",
    "title": "Method CreateListener | Sisk Framework",
    "keywords": "Method CreateListener Namespace Sisk.Core.Http Assembly Sisk.Core.dll CreateListener() Gets an listening and running HTTP server in an random port. public static HttpServer CreateListener() Returns HttpServer CreateListener(ushort) Gets an listening and running HTTP server in the specified port. public static HttpServer CreateListener(ushort port) Parameters port ushort The listening port of the HTTP server. Returns HttpServer CreateListener(ushort, out HttpServerConfiguration, out ListeningHost, out Router) Gets an listening and running HTTP server in the specified port. public static HttpServer CreateListener(ushort insecureHttpPort, out HttpServerConfiguration configuration, out ListeningHost host, out Router router) Parameters insecureHttpPort ushort The insecure port where the HTTP server will listen. configuration HttpServerConfiguration The HttpServerConfiguration object issued from this method. host ListeningHost The ListeningHost object issued from this method. router Router The Router object issued from this method. Returns HttpServer"
  },
  "api/Sisk.Core.Http.HttpServer.Dispose.html": {
    "href": "api/Sisk.Core.Http.HttpServer.Dispose.html",
    "title": "Method Dispose | Sisk Framework",
    "keywords": "Method Dispose Namespace Sisk.Core.Http Assembly Sisk.Core.dll Dispose() Invalidates this class and releases the resources used by it, and permanently closes the HTTP server. public void Dispose()"
  },
  "api/Sisk.Core.Http.HttpServer.Emit.html": {
    "href": "api/Sisk.Core.Http.HttpServer.Emit.html",
    "title": "Method Emit | Sisk Framework",
    "keywords": "Method Emit Namespace Sisk.Core.Http Assembly Sisk.Core.dll Emit(ushort, out HttpServerConfiguration, out ListeningHost, out Router) Gets an non-listening HTTP server with configuration, listening host, and router. public static HttpServer Emit(ushort insecureHttpPort, out HttpServerConfiguration configuration, out ListeningHost host, out Router router) Parameters insecureHttpPort ushort The insecure port where the HTTP server will listen. configuration HttpServerConfiguration The HttpServerConfiguration object issued from this method. host ListeningHost The ListeningHost object issued from this method. router Router The Router object issued from this method. Returns HttpServer"
  },
  "api/Sisk.Core.Http.HttpServer.EventSources.html": {
    "href": "api/Sisk.Core.Http.HttpServer.EventSources.html",
    "title": "Property EventSources | Sisk Framework",
    "keywords": "Property EventSources Namespace Sisk.Core.Http Assembly Sisk.Core.dll EventSources Gets an HttpEventSourceCollection with active event source connections in this HTTP server. public HttpEventSourceCollection EventSources { get; } Property Value HttpEventSourceCollection"
  },
  "api/Sisk.Core.Http.HttpServer.IsDynamicCodeSupported.html": {
    "href": "api/Sisk.Core.Http.HttpServer.IsDynamicCodeSupported.html",
    "title": "Property IsDynamicCodeSupported | Sisk Framework",
    "keywords": "Property IsDynamicCodeSupported Namespace Sisk.Core.Http Assembly Sisk.Core.dll IsDynamicCodeSupported Gets an bool indicating if the current environment supports dynamic code or it's running in an AOT assembly. public static bool IsDynamicCodeSupported { get; } Property Value bool"
  },
  "api/Sisk.Core.Http.HttpServer.IsListening.html": {
    "href": "api/Sisk.Core.Http.HttpServer.IsListening.html",
    "title": "Property IsListening | Sisk Framework",
    "keywords": "Property IsListening Namespace Sisk.Core.Http Assembly Sisk.Core.dll IsListening Gets an boolean indicating if this HTTP server is running and listening. public bool IsListening { get; } Property Value bool"
  },
  "api/Sisk.Core.Http.HttpServer.IsSupported.html": {
    "href": "api/Sisk.Core.Http.HttpServer.IsSupported.html",
    "title": "Property IsSupported | Sisk Framework",
    "keywords": "Property IsSupported Namespace Sisk.Core.Http Assembly Sisk.Core.dll IsSupported Gets an bool indicating if Sisk can be used with the current environment. public static bool IsSupported { get; } Property Value bool"
  },
  "api/Sisk.Core.Http.HttpServer.ListeningPrefixes.html": {
    "href": "api/Sisk.Core.Http.HttpServer.ListeningPrefixes.html",
    "title": "Property ListeningPrefixes | Sisk Framework",
    "keywords": "Property ListeningPrefixes Namespace Sisk.Core.Http Assembly Sisk.Core.dll ListeningPrefixes Gets an string array containing all URL prefixes which this HTTP server is listening to. public string[] ListeningPrefixes { get; } Property Value string[]"
  },
  "api/Sisk.Core.Http.HttpServer.PoweredBy.html": {
    "href": "api/Sisk.Core.Http.HttpServer.PoweredBy.html",
    "title": "Property PoweredBy | Sisk Framework",
    "keywords": "Property PoweredBy Namespace Sisk.Core.Http Assembly Sisk.Core.dll PoweredBy Gets the X-Powered-By Sisk header value. public static string PoweredBy { get; } Property Value string"
  },
  "api/Sisk.Core.Http.HttpServer.RegisterHandler.html": {
    "href": "api/Sisk.Core.Http.HttpServer.RegisterHandler.html",
    "title": "Method RegisterHandler | Sisk Framework",
    "keywords": "Method RegisterHandler Namespace Sisk.Core.Http Assembly Sisk.Core.dll RegisterHandler<T>() Associate an HttpServerHandler in this HttpServer to handle functions such as requests, routers and contexts. public void RegisterHandler<T>() where T : HttpServerHandler, new() Type Parameters T The handler which implements HttpServerHandler. RegisterHandler(HttpServerHandler) Associate an HttpServerHandler in this HttpServer to handle functions such as requests, routers and contexts. public void RegisterHandler(HttpServerHandler obj) Parameters obj HttpServerHandler The instance of the server handler."
  },
  "api/Sisk.Core.Http.HttpServer.Restart.html": {
    "href": "api/Sisk.Core.Http.HttpServer.Restart.html",
    "title": "Method Restart | Sisk Framework",
    "keywords": "Method Restart Namespace Sisk.Core.Http Assembly Sisk.Core.dll Restart() Restarts this HTTP server, sending all processing responses and starting them again, reading the listening ports again. public void Restart()"
  },
  "api/Sisk.Core.Http.HttpServer.ServerConfiguration.html": {
    "href": "api/Sisk.Core.Http.HttpServer.ServerConfiguration.html",
    "title": "Property ServerConfiguration | Sisk Framework",
    "keywords": "Property ServerConfiguration Namespace Sisk.Core.Http Assembly Sisk.Core.dll ServerConfiguration Gets or sets the Server Configuration object. public HttpServerConfiguration ServerConfiguration { get; set; } Property Value HttpServerConfiguration"
  },
  "api/Sisk.Core.Http.HttpServer.SiskVersion.html": {
    "href": "api/Sisk.Core.Http.HttpServer.SiskVersion.html",
    "title": "Property SiskVersion | Sisk Framework",
    "keywords": "Property SiskVersion Namespace Sisk.Core.Http Assembly Sisk.Core.dll SiskVersion Gets the current Sisk version. public static Version SiskVersion { get; } Property Value Version"
  },
  "api/Sisk.Core.Http.HttpServer.Start.html": {
    "href": "api/Sisk.Core.Http.HttpServer.Start.html",
    "title": "Method Start | Sisk Framework",
    "keywords": "Method Start Namespace Sisk.Core.Http Assembly Sisk.Core.dll Start() Starts listening to the set port and handling requests on this server. public void Start()"
  },
  "api/Sisk.Core.Http.HttpServer.Stop.html": {
    "href": "api/Sisk.Core.Http.HttpServer.Stop.html",
    "title": "Method Stop | Sisk Framework",
    "keywords": "Method Stop Namespace Sisk.Core.Http Assembly Sisk.Core.dll Stop() Stops the server from listening and stops the request handler. public void Stop()"
  },
  "api/Sisk.Core.Http.HttpServer.WaitNext.html": {
    "href": "api/Sisk.Core.Http.HttpServer.WaitNext.html",
    "title": "Method WaitNext | Sisk Framework",
    "keywords": "Method WaitNext Namespace Sisk.Core.Http Assembly Sisk.Core.dll WaitNext() Waits for the next execution result from the server. This method obtains the next completed context from the HTTP server, both with the request and its response. This method does not interrupt the asynchronous processing of requests. public HttpServerExecutionResult WaitNext() Returns HttpServerExecutionResult Remarks Calling this method, it starts the HTTP server if it ins't started yet."
  },
  "api/Sisk.Core.Http.HttpServer.WaitNextAsync.html": {
    "href": "api/Sisk.Core.Http.HttpServer.WaitNextAsync.html",
    "title": "Method WaitNextAsync | Sisk Framework",
    "keywords": "Method WaitNextAsync Namespace Sisk.Core.Http Assembly Sisk.Core.dll WaitNextAsync() Waits for the next execution result from the server asynchronously. This method obtains the next completed context from the HTTP server, both with the request and its response. This method does not interrupt the asynchronous processing of requests. public Task<HttpServerExecutionResult> WaitNextAsync() Returns Task<HttpServerExecutionResult> Remarks Calling this method, it starts the HTTP server if it ins't started yet."
  },
  "api/Sisk.Core.Http.HttpServer.WebSockets.html": {
    "href": "api/Sisk.Core.Http.HttpServer.WebSockets.html",
    "title": "Property WebSockets | Sisk Framework",
    "keywords": "Property WebSockets Namespace Sisk.Core.Http Assembly Sisk.Core.dll WebSockets Gets an HttpWebSocketConnectionCollection with active Web Sockets connections in this HTTP server. public HttpWebSocketConnectionCollection WebSockets { get; } Property Value HttpWebSocketConnectionCollection"
  },
  "api/Sisk.Core.Http.HttpServer.html": {
    "href": "api/Sisk.Core.Http.HttpServer.html",
    "title": "Class HttpServer | Sisk Framework",
    "keywords": "Class HttpServer Namespace Sisk.Core.Http Assembly Sisk.Core.dll Provides an lightweight HTTP server powered by Sisk. public sealed class HttpServer : IDisposable Inheritance object HttpServer Implements IDisposable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors HttpServer(HttpServerConfiguration) Creates a new default configuration HttpServer instance with the given Route and server configuration. Properties EventSources Gets an HttpEventSourceCollection with active event source connections in this HTTP server. IsDynamicCodeSupported Gets an bool indicating if the current environment supports dynamic code or it's running in an AOT assembly. IsListening Gets an boolean indicating if this HTTP server is running and listening. IsSupported Gets an bool indicating if Sisk can be used with the current environment. ListeningPrefixes Gets an string array containing all URL prefixes which this HTTP server is listening to. PoweredBy Gets the X-Powered-By Sisk header value. ServerConfiguration Gets or sets the Server Configuration object. SiskVersion Gets the current Sisk version. WebSockets Gets an HttpWebSocketConnectionCollection with active Web Sockets connections in this HTTP server. Methods CreateBuilder() Builds an empty HttpServerHostContext context. CreateBuilder(Action<HttpServerHostContextBuilder>) Builds an HttpServerHostContext context invoking the handler on it. CreateBuilder(string) Builds an empty HttpServerHostContext context with predefined listening host string. CreateBuilder(ushort) Builds an empty HttpServerHostContext context with predefined listening port. CreateListener() Gets an listening and running HTTP server in an random port. CreateListener(ushort) Gets an listening and running HTTP server in the specified port. CreateListener(ushort, out HttpServerConfiguration, out ListeningHost, out Router) Gets an listening and running HTTP server in the specified port. Dispose() Invalidates this class and releases the resources used by it, and permanently closes the HTTP server. Emit(ushort, out HttpServerConfiguration, out ListeningHost, out Router) Gets an non-listening HTTP server with configuration, listening host, and router. RegisterHandler(HttpServerHandler) Associate an HttpServerHandler in this HttpServer to handle functions such as requests, routers and contexts. RegisterHandler<T>() Associate an HttpServerHandler in this HttpServer to handle functions such as requests, routers and contexts. Restart() Restarts this HTTP server, sending all processing responses and starting them again, reading the listening ports again. Start() Starts listening to the set port and handling requests on this server. Stop() Stops the server from listening and stops the request handler. WaitNext() Waits for the next execution result from the server. This method obtains the next completed context from the HTTP server, both with the request and its response. This method does not interrupt the asynchronous processing of requests. WaitNextAsync() Waits for the next execution result from the server asynchronously. This method obtains the next completed context from the HTTP server, both with the request and its response. This method does not interrupt the asynchronous processing of requests."
  },
  "api/Sisk.Core.Http.HttpServerConfiguration.-ctor.html": {
    "href": "api/Sisk.Core.Http.HttpServerConfiguration.-ctor.html",
    "title": "Constructor HttpServerConfiguration | Sisk Framework",
    "keywords": "Constructor HttpServerConfiguration Namespace Sisk.Core.Http Assembly Sisk.Core.dll HttpServerConfiguration() Creates an new HttpServerConfiguration instance with no parameters. public HttpServerConfiguration()"
  },
  "api/Sisk.Core.Http.HttpServerConfiguration.AccessLogsFormat.html": {
    "href": "api/Sisk.Core.Http.HttpServerConfiguration.AccessLogsFormat.html",
    "title": "Property AccessLogsFormat | Sisk Framework",
    "keywords": "Property AccessLogsFormat Namespace Sisk.Core.Http Assembly Sisk.Core.dll AccessLogsFormat Gets or sets the access logging format for incoming HTTP requests. public string AccessLogsFormat { get; set; } Property Value string"
  },
  "api/Sisk.Core.Http.HttpServerConfiguration.AccessLogsStream.html": {
    "href": "api/Sisk.Core.Http.HttpServerConfiguration.AccessLogsStream.html",
    "title": "Property AccessLogsStream | Sisk Framework",
    "keywords": "Property AccessLogsStream Namespace Sisk.Core.Http Assembly Sisk.Core.dll AccessLogsStream Gets or sets the LogStream object which the HTTP server will write HTTP server access messages to. public LogStream? AccessLogsStream { get; set; } Property Value LogStream"
  },
  "api/Sisk.Core.Http.HttpServerConfiguration.DefaultCultureInfo.html": {
    "href": "api/Sisk.Core.Http.HttpServerConfiguration.DefaultCultureInfo.html",
    "title": "Property DefaultCultureInfo | Sisk Framework",
    "keywords": "Property DefaultCultureInfo Namespace Sisk.Core.Http Assembly Sisk.Core.dll DefaultCultureInfo Gets or sets the default CultureInfo object which the HTTP server will apply to the request handlers and callbacks thread. public CultureInfo? DefaultCultureInfo { get; set; } Property Value CultureInfo"
  },
  "api/Sisk.Core.Http.HttpServerConfiguration.Dispose.html": {
    "href": "api/Sisk.Core.Http.HttpServerConfiguration.Dispose.html",
    "title": "Method Dispose | Sisk Framework",
    "keywords": "Method Dispose Namespace Sisk.Core.Http Assembly Sisk.Core.dll Dispose() Frees the resources and invalidates this instance. public void Dispose()"
  },
  "api/Sisk.Core.Http.HttpServerConfiguration.ErrorsLogsStream.html": {
    "href": "api/Sisk.Core.Http.HttpServerConfiguration.ErrorsLogsStream.html",
    "title": "Property ErrorsLogsStream | Sisk Framework",
    "keywords": "Property ErrorsLogsStream Namespace Sisk.Core.Http Assembly Sisk.Core.dll ErrorsLogsStream Gets or sets the LogStream object which the HTTP server will write HTTP server error transcriptions to. public LogStream? ErrorsLogsStream { get; set; } Property Value LogStream"
  },
  "api/Sisk.Core.Http.HttpServerConfiguration.Flags.html": {
    "href": "api/Sisk.Core.Http.HttpServerConfiguration.Flags.html",
    "title": "Property Flags | Sisk Framework",
    "keywords": "Property Flags Namespace Sisk.Core.Http Assembly Sisk.Core.dll Flags Gets or sets advanced flags and configuration settings for the HTTP server. public HttpServerFlags Flags { get; set; } Property Value HttpServerFlags"
  },
  "api/Sisk.Core.Http.HttpServerConfiguration.ForwardingResolver.html": {
    "href": "api/Sisk.Core.Http.HttpServerConfiguration.ForwardingResolver.html",
    "title": "Property ForwardingResolver | Sisk Framework",
    "keywords": "Property ForwardingResolver Namespace Sisk.Core.Http Assembly Sisk.Core.dll ForwardingResolver Gets or sets an object that is responsible for resolving the client address, host and protocol of a proxy, load balancer or CDN, through the HTTP request. public ForwardingResolver? ForwardingResolver { get; set; } Property Value ForwardingResolver"
  },
  "api/Sisk.Core.Http.HttpServerConfiguration.IncludeRequestIdHeader.html": {
    "href": "api/Sisk.Core.Http.HttpServerConfiguration.IncludeRequestIdHeader.html",
    "title": "Property IncludeRequestIdHeader | Sisk Framework",
    "keywords": "Property IncludeRequestIdHeader Namespace Sisk.Core.Http Assembly Sisk.Core.dll IncludeRequestIdHeader Gets or sets whether the server should include the \"X-Request-Id\" header in response headers. public bool IncludeRequestIdHeader { get; set; } Property Value bool"
  },
  "api/Sisk.Core.Http.HttpServerConfiguration.KeepAlive.html": {
    "href": "api/Sisk.Core.Http.HttpServerConfiguration.KeepAlive.html",
    "title": "Property KeepAlive | Sisk Framework",
    "keywords": "Property KeepAlive Namespace Sisk.Core.Http Assembly Sisk.Core.dll KeepAlive Gets or sets whether the client should mantain an persistent connection with the HTTP server. public bool KeepAlive { get; set; } Property Value bool"
  },
  "api/Sisk.Core.Http.HttpServerConfiguration.ListeningHosts.html": {
    "href": "api/Sisk.Core.Http.HttpServerConfiguration.ListeningHosts.html",
    "title": "Property ListeningHosts | Sisk Framework",
    "keywords": "Property ListeningHosts Namespace Sisk.Core.Http Assembly Sisk.Core.dll ListeningHosts Gets or sets the listening hosts repository that the HttpServer instance will listen to. public ListeningHostRepository ListeningHosts { get; set; } Property Value ListeningHostRepository"
  },
  "api/Sisk.Core.Http.HttpServerConfiguration.MaximumContentLength.html": {
    "href": "api/Sisk.Core.Http.HttpServerConfiguration.MaximumContentLength.html",
    "title": "Property MaximumContentLength | Sisk Framework",
    "keywords": "Property MaximumContentLength Namespace Sisk.Core.Http Assembly Sisk.Core.dll MaximumContentLength Gets or sets the maximum size of a request body before it is closed by the socket. public long MaximumContentLength { get; set; } Property Value long Remarks Leave it as \"0\" to set the maximum content length to unlimited."
  },
  "api/Sisk.Core.Http.HttpServerConfiguration.RemoteRequestsAction.html": {
    "href": "api/Sisk.Core.Http.HttpServerConfiguration.RemoteRequestsAction.html",
    "title": "Property RemoteRequestsAction | Sisk Framework",
    "keywords": "Property RemoteRequestsAction Namespace Sisk.Core.Http Assembly Sisk.Core.dll RemoteRequestsAction Gets or sets the server's action when it receives an HTTP request outside the localhost. public RequestListenAction RemoteRequestsAction { get; set; } Property Value RequestListenAction Remarks It is recommended to use Drop in this property when working with a reverse proxy or in environments where the service is not directly exposed to the internet."
  },
  "api/Sisk.Core.Http.HttpServerConfiguration.ThrowExceptions.html": {
    "href": "api/Sisk.Core.Http.HttpServerConfiguration.ThrowExceptions.html",
    "title": "Property ThrowExceptions | Sisk Framework",
    "keywords": "Property ThrowExceptions Namespace Sisk.Core.Http Assembly Sisk.Core.dll ThrowExceptions Gets or sets whether the server should throw exceptions instead of reporting it on HttpServerExecutionStatus if any is thrown while processing requests. public bool ThrowExceptions { get; set; } Property Value bool"
  },
  "api/Sisk.Core.Http.HttpServerConfiguration.html": {
    "href": "api/Sisk.Core.Http.HttpServerConfiguration.html",
    "title": "Class HttpServerConfiguration | Sisk Framework",
    "keywords": "Class HttpServerConfiguration Namespace Sisk.Core.Http Assembly Sisk.Core.dll Provides execution parameters for an HttpServer. public sealed class HttpServerConfiguration : IDisposable Inheritance object HttpServerConfiguration Implements IDisposable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors HttpServerConfiguration() Creates an new HttpServerConfiguration instance with no parameters. Properties AccessLogsFormat Gets or sets the access logging format for incoming HTTP requests. AccessLogsStream Gets or sets the LogStream object which the HTTP server will write HTTP server access messages to. DefaultCultureInfo Gets or sets the default CultureInfo object which the HTTP server will apply to the request handlers and callbacks thread. ErrorsLogsStream Gets or sets the LogStream object which the HTTP server will write HTTP server error transcriptions to. Flags Gets or sets advanced flags and configuration settings for the HTTP server. ForwardingResolver Gets or sets an object that is responsible for resolving the client address, host and protocol of a proxy, load balancer or CDN, through the HTTP request. IncludeRequestIdHeader Gets or sets whether the server should include the \"X-Request-Id\" header in response headers. KeepAlive Gets or sets whether the client should mantain an persistent connection with the HTTP server. ListeningHosts Gets or sets the listening hosts repository that the HttpServer instance will listen to. MaximumContentLength Gets or sets the maximum size of a request body before it is closed by the socket. RemoteRequestsAction Gets or sets the server's action when it receives an HTTP request outside the localhost. ThrowExceptions Gets or sets whether the server should throw exceptions instead of reporting it on HttpServerExecutionStatus if any is thrown while processing requests. Methods Dispose() Frees the resources and invalidates this instance."
  },
  "api/Sisk.Core.Http.HttpServerExecutionResult.Context.html": {
    "href": "api/Sisk.Core.Http.HttpServerExecutionResult.Context.html",
    "title": "Property Context | Sisk Framework",
    "keywords": "Property Context Namespace Sisk.Core.Http Assembly Sisk.Core.dll Context Gets the HttpContext of this execution result. public HttpContext Context { get; } Property Value HttpContext"
  },
  "api/Sisk.Core.Http.HttpServerExecutionResult.Elapsed.html": {
    "href": "api/Sisk.Core.Http.HttpServerExecutionResult.Elapsed.html",
    "title": "Property Elapsed | Sisk Framework",
    "keywords": "Property Elapsed Namespace Sisk.Core.Http Assembly Sisk.Core.dll Elapsed Gets the total processing time of the HTTP session. public TimeSpan Elapsed { get; } Property Value TimeSpan"
  },
  "api/Sisk.Core.Http.HttpServerExecutionResult.IsSuccessStatus.html": {
    "href": "api/Sisk.Core.Http.HttpServerExecutionResult.IsSuccessStatus.html",
    "title": "Property IsSuccessStatus | Sisk Framework",
    "keywords": "Property IsSuccessStatus Namespace Sisk.Core.Http Assembly Sisk.Core.dll IsSuccessStatus Gets an boolean indicating if this execution status is an success status. public bool IsSuccessStatus { get; } Property Value bool"
  },
  "api/Sisk.Core.Http.HttpServerExecutionResult.Request.html": {
    "href": "api/Sisk.Core.Http.HttpServerExecutionResult.Request.html",
    "title": "Property Request | Sisk Framework",
    "keywords": "Property Request Namespace Sisk.Core.Http Assembly Sisk.Core.dll Request Gets the HttpRequest received in this diagnosis. public HttpRequest Request { get; } Property Value HttpRequest"
  },
  "api/Sisk.Core.Http.HttpServerExecutionResult.RequestSize.html": {
    "href": "api/Sisk.Core.Http.HttpServerExecutionResult.RequestSize.html",
    "title": "Property RequestSize | Sisk Framework",
    "keywords": "Property RequestSize Namespace Sisk.Core.Http Assembly Sisk.Core.dll RequestSize Gets the estimated request size in bytes. public long RequestSize { get; } Property Value long"
  },
  "api/Sisk.Core.Http.HttpServerExecutionResult.Response.html": {
    "href": "api/Sisk.Core.Http.HttpServerExecutionResult.Response.html",
    "title": "Property Response | Sisk Framework",
    "keywords": "Property Response Namespace Sisk.Core.Http Assembly Sisk.Core.dll Response Gets the resulted HttpResponse send by the router, if any. This object can be null if the server didn't sent any response to the client. public HttpResponse? Response { get; } Property Value HttpResponse"
  },
  "api/Sisk.Core.Http.HttpServerExecutionResult.ResponseSize.html": {
    "href": "api/Sisk.Core.Http.HttpServerExecutionResult.ResponseSize.html",
    "title": "Property ResponseSize | Sisk Framework",
    "keywords": "Property ResponseSize Namespace Sisk.Core.Http Assembly Sisk.Core.dll ResponseSize Gets the estimated response size in bytes, if any. public long ResponseSize { get; } Property Value long"
  },
  "api/Sisk.Core.Http.HttpServerExecutionResult.ServerException.html": {
    "href": "api/Sisk.Core.Http.HttpServerExecutionResult.ServerException.html",
    "title": "Property ServerException | Sisk Framework",
    "keywords": "Property ServerException Namespace Sisk.Core.Http Assembly Sisk.Core.dll ServerException Gets the exception that was thrown when executing the route, if any. public Exception? ServerException { get; } Property Value Exception"
  },
  "api/Sisk.Core.Http.HttpServerExecutionResult.Status.html": {
    "href": "api/Sisk.Core.Http.HttpServerExecutionResult.Status.html",
    "title": "Property Status | Sisk Framework",
    "keywords": "Property Status Namespace Sisk.Core.Http Assembly Sisk.Core.dll Status Gets the status of server operation. public HttpServerExecutionStatus Status { get; } Property Value HttpServerExecutionStatus"
  },
  "api/Sisk.Core.Http.HttpServerExecutionResult.html": {
    "href": "api/Sisk.Core.Http.HttpServerExecutionResult.html",
    "title": "Class HttpServerExecutionResult | Sisk Framework",
    "keywords": "Class HttpServerExecutionResult Namespace Sisk.Core.Http Assembly Sisk.Core.dll Represents the results of an request execution on the HTTP server. public sealed class HttpServerExecutionResult Inheritance object HttpServerExecutionResult Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties Context Gets the HttpContext of this execution result. Elapsed Gets the total processing time of the HTTP session. IsSuccessStatus Gets an boolean indicating if this execution status is an success status. Request Gets the HttpRequest received in this diagnosis. RequestSize Gets the estimated request size in bytes. Response Gets the resulted HttpResponse send by the router, if any. This object can be null if the server didn't sent any response to the client. ResponseSize Gets the estimated response size in bytes, if any. ServerException Gets the exception that was thrown when executing the route, if any. Status Gets the status of server operation."
  },
  "api/Sisk.Core.Http.HttpServerExecutionStatus.html": {
    "href": "api/Sisk.Core.Http.HttpServerExecutionStatus.html",
    "title": "Enum HttpServerExecutionStatus | Sisk Framework",
    "keywords": "Enum HttpServerExecutionStatus Namespace Sisk.Core.Http Assembly Sisk.Core.dll Represents the status of an execution of a request on an HttpServer. public enum HttpServerExecutionStatus Fields ConnectionClosed = 3 Represents that the connection stream was closed by the client. ContentServedOnIllegalMethod = 1 Represents that the request has sent an request body with an with a HTTP method that is not indicated for receiving request contents. ContentTooLarge = 2 Represents that the content of the request is too large than what was configured on the server, or it's bigger than the max supported size (2GB). DnsFailed = 5 Represents that the client did not correctly specify a host in the request. DnsUnknownHost = 6 Represents that the client requested an host that's not been set up on this server. ExceptionThrown = 7 Indicates that the server encountered an exception while processing the request. Executed = 0 Represents that the request was closed by the HTTP server and executed by a router and its response was succesfully delivered. ListeningHostNotReady = 9 Indicates that the DNS was successful, however the matched ListeningHost does not have an valid initialized router. MalformedRequest = 10 Indicates that the server cannot or will not process the request due to something that is perceived to be a client error. NoResponse = 4 Represents that the router did not deliver a response to the received request. RemoteRequestDropped = 11 Indicates that the HTTP server closed an unwanted remote connection. UncaughtExceptionThrown = 8 Indicates that the router encontered an uncaught exception while calling it's action function."
  },
  "api/Sisk.Core.Http.HttpServerFlags.-ctor.html": {
    "href": "api/Sisk.Core.Http.HttpServerFlags.-ctor.html",
    "title": "Constructor HttpServerFlags | Sisk Framework",
    "keywords": "Constructor HttpServerFlags Namespace Sisk.Core.Http Assembly Sisk.Core.dll HttpServerFlags() Creates an new HttpServerFlags instance with default flags values. public HttpServerFlags()"
  },
  "api/Sisk.Core.Http.HttpServerFlags.AsyncRequestProcessing.html": {
    "href": "api/Sisk.Core.Http.HttpServerFlags.AsyncRequestProcessing.html",
    "title": "Field AsyncRequestProcessing | Sisk Framework",
    "keywords": "Field AsyncRequestProcessing Namespace Sisk.Core.Http Assembly Sisk.Core.dll Determines if the HTTP server should handle requests asynchronously or if it should limit the request processing to one request per time. Default value: true public bool AsyncRequestProcessing Returns bool Determines if the HTTP server should handle requests asynchronously or if it should limit the request processing to one request per time. Default value: true"
  },
  "api/Sisk.Core.Http.HttpServerFlags.ConvertIAsyncEnumerableIntoEnumerable.html": {
    "href": "api/Sisk.Core.Http.HttpServerFlags.ConvertIAsyncEnumerableIntoEnumerable.html",
    "title": "Field ConvertIAsyncEnumerableIntoEnumerable | Sisk Framework",
    "keywords": "Field ConvertIAsyncEnumerableIntoEnumerable Namespace Sisk.Core.Http Assembly Sisk.Core.dll Determines if the HTTP server should convert IAsyncEnumerable<T> object responses into an blocking IEnumerable<T>. Default value: true public bool ConvertIAsyncEnumerableIntoEnumerable Returns bool Determines if the HTTP server should convert object responses into an blocking . Default value: true"
  },
  "api/Sisk.Core.Http.HttpServerFlags.EnableNewMultipartFormReader.html": {
    "href": "api/Sisk.Core.Http.HttpServerFlags.EnableNewMultipartFormReader.html",
    "title": "Field EnableNewMultipartFormReader | Sisk Framework",
    "keywords": "Field EnableNewMultipartFormReader Namespace Sisk.Core.Http Assembly Sisk.Core.dll Determines if the new span-based multipart form reader should be used. Default value: true public bool EnableNewMultipartFormReader Returns bool Determines if the new span-based multipart form reader should be used. Default value: true"
  },
  "api/Sisk.Core.Http.HttpServerFlags.ForceTrailingSlash.html": {
    "href": "api/Sisk.Core.Http.HttpServerFlags.ForceTrailingSlash.html",
    "title": "Field ForceTrailingSlash | Sisk Framework",
    "keywords": "Field ForceTrailingSlash Namespace Sisk.Core.Http Assembly Sisk.Core.dll Determines if the HTTP server should automatically rewrite GET requests to end their path with /. This is non-applyable to Regex routes. Default value: false public bool ForceTrailingSlash Returns bool Determines if the HTTP server should automatically rewrite GET requests to end their path with /. This is non-applyable to Regex routes. Default value: false"
  },
  "api/Sisk.Core.Http.HttpServerFlags.HeaderNameRequestId.html": {
    "href": "api/Sisk.Core.Http.HttpServerFlags.HeaderNameRequestId.html",
    "title": "Field HeaderNameRequestId | Sisk Framework",
    "keywords": "Field HeaderNameRequestId Namespace Sisk.Core.Http Assembly Sisk.Core.dll Determines the HTTP header name of the request ID. Default value: \"X-Request-Id\" public string HeaderNameRequestId Returns string Determines the HTTP header name of the request ID. Default value: \"X-Request-Id\""
  },
  "api/Sisk.Core.Http.HttpServerFlags.IdleConnectionTimeout.html": {
    "href": "api/Sisk.Core.Http.HttpServerFlags.IdleConnectionTimeout.html",
    "title": "Field IdleConnectionTimeout | Sisk Framework",
    "keywords": "Field IdleConnectionTimeout Namespace Sisk.Core.Http Assembly Sisk.Core.dll Determines the maximum amount of time an connection can keep alive without sending or receiving any data. Default value: TimeSpan.FromSeconds(120) public TimeSpan IdleConnectionTimeout Returns TimeSpan Determines the maximum amount of time an connection can keep alive without sending or receiving any data. Default value: TimeSpan.FromSeconds(120)"
  },
  "api/Sisk.Core.Http.HttpServerFlags.NormalizeHeadersEncodings.html": {
    "href": "api/Sisk.Core.Http.HttpServerFlags.NormalizeHeadersEncodings.html",
    "title": "Field NormalizeHeadersEncodings | Sisk Framework",
    "keywords": "Field NormalizeHeadersEncodings Namespace Sisk.Core.Http Assembly Sisk.Core.dll Determines if the HTTP server should convert request headers encoding to the content encoding. Default value: false public bool NormalizeHeadersEncodings Returns bool Determines if the HTTP server should convert request headers encoding to the content encoding. Default value: false"
  },
  "api/Sisk.Core.Http.HttpServerFlags.OptionsLogMode.html": {
    "href": "api/Sisk.Core.Http.HttpServerFlags.OptionsLogMode.html",
    "title": "Field OptionsLogMode | Sisk Framework",
    "keywords": "Field OptionsLogMode Namespace Sisk.Core.Http Assembly Sisk.Core.dll Determines if the HTTP server should write log to OPTIONS requests. Default value: LogOutput.Both public LogOutput OptionsLogMode Returns LogOutput Determines if the HTTP server should write log to OPTIONS requests. Default value: LogOutput.Both"
  },
  "api/Sisk.Core.Http.HttpServerFlags.PreventResponseContentsInProhibitedMethods.html": {
    "href": "api/Sisk.Core.Http.HttpServerFlags.PreventResponseContentsInProhibitedMethods.html",
    "title": "Field PreventResponseContentsInProhibitedMethods | Sisk Framework",
    "keywords": "Field PreventResponseContentsInProhibitedMethods Namespace Sisk.Core.Http Assembly Sisk.Core.dll Determines if the HTTP server should prevent sending body contents in responses when the HTTP request method prohibits it. Default value: true public bool PreventResponseContentsInProhibitedMethods Returns bool Determines if the HTTP server should prevent sending body contents in responses when the HTTP request method prohibits it. Default value: true"
  },
  "api/Sisk.Core.Http.HttpServerFlags.RequestStreamCopyBufferSize.html": {
    "href": "api/Sisk.Core.Http.HttpServerFlags.RequestStreamCopyBufferSize.html",
    "title": "Field RequestStreamCopyBufferSize | Sisk Framework",
    "keywords": "Field RequestStreamCopyBufferSize Namespace Sisk.Core.Http Assembly Sisk.Core.dll Specifies the size, in bytes, of the copy buffer of both streams (inbound and outgoing) of the response stream. Default value: 81920 public int RequestStreamCopyBufferSize Returns int Specifies the size, in bytes, of the copy buffer of both streams (inbound and outgoing) of the response stream. Default value: 81920"
  },
  "api/Sisk.Core.Http.HttpServerFlags.SendCorsHeaders.html": {
    "href": "api/Sisk.Core.Http.HttpServerFlags.SendCorsHeaders.html",
    "title": "Field SendCorsHeaders | Sisk Framework",
    "keywords": "Field SendCorsHeaders Namespace Sisk.Core.Http Assembly Sisk.Core.dll Determines if the HTTP server automatically should send CORS headers if set. Default value: true public bool SendCorsHeaders Returns bool Determines if the HTTP server automatically should send CORS headers if set. Default value: true"
  },
  "api/Sisk.Core.Http.HttpServerFlags.SendSiskHeader.html": {
    "href": "api/Sisk.Core.Http.HttpServerFlags.SendSiskHeader.html",
    "title": "Field SendSiskHeader | Sisk Framework",
    "keywords": "Field SendSiskHeader Namespace Sisk.Core.Http Assembly Sisk.Core.dll Determines if the HTTP server should send the X-Powered-By header in all responses. Default value: true public bool SendSiskHeader Returns bool Determines if the HTTP server should send the X-Powered-By header in all responses. Default value: true"
  },
  "api/Sisk.Core.Http.HttpServerFlags.ThrowContentOnNonSemanticMethods.html": {
    "href": "api/Sisk.Core.Http.HttpServerFlags.ThrowContentOnNonSemanticMethods.html",
    "title": "Field ThrowContentOnNonSemanticMethods | Sisk Framework",
    "keywords": "Field ThrowContentOnNonSemanticMethods Namespace Sisk.Core.Http Assembly Sisk.Core.dll Determines if the HTTP server should drop requests which has content body in GET, OPTIONS, HEAD and TRACE methods. Default value: true public bool ThrowContentOnNonSemanticMethods Returns bool Determines if the HTTP server should drop requests which has content body in GET, OPTIONS, HEAD and TRACE methods. Default value: true"
  },
  "api/Sisk.Core.Http.HttpServerFlags.TreatHeadAsGetMethod.html": {
    "href": "api/Sisk.Core.Http.HttpServerFlags.TreatHeadAsGetMethod.html",
    "title": "Field TreatHeadAsGetMethod | Sisk Framework",
    "keywords": "Field TreatHeadAsGetMethod Namespace Sisk.Core.Http Assembly Sisk.Core.dll Determines if the HTTP server should automatically send HTTP headers of an pre-processed GET response if the request is using HEAD method. Default value: true public bool TreatHeadAsGetMethod Returns bool Determines if the HTTP server should automatically send HTTP headers of an pre-processed GET response if the request is using HEAD method. Default value: true"
  },
  "api/Sisk.Core.Http.HttpServerFlags.WebSocketBufferSize.html": {
    "href": "api/Sisk.Core.Http.HttpServerFlags.WebSocketBufferSize.html",
    "title": "Field WebSocketBufferSize | Sisk Framework",
    "keywords": "Field WebSocketBufferSize Namespace Sisk.Core.Http Assembly Sisk.Core.dll Determines the WebSocket buffer initial and max length. Default value: 1024 public int WebSocketBufferSize Returns int Determines the WebSocket buffer initial and max length. Default value: 1024"
  },
  "api/Sisk.Core.Http.HttpServerFlags.html": {
    "href": "api/Sisk.Core.Http.HttpServerFlags.html",
    "title": "Class HttpServerFlags | Sisk Framework",
    "keywords": "Class HttpServerFlags Namespace Sisk.Core.Http Assembly Sisk.Core.dll Provides advanced fields for Sisk server behavior. public sealed class HttpServerFlags Inheritance object HttpServerFlags Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors HttpServerFlags() Creates an new HttpServerFlags instance with default flags values. Fields AsyncRequestProcessing Determines if the HTTP server should handle requests asynchronously or if it should limit the request processing to one request per time. Default value: true ConvertIAsyncEnumerableIntoEnumerable Determines if the HTTP server should convert IAsyncEnumerable<T> object responses into an blocking IEnumerable<T>. Default value: true EnableNewMultipartFormReader Determines if the new span-based multipart form reader should be used. Default value: true ForceTrailingSlash Determines if the HTTP server should automatically rewrite GET requests to end their path with /. This is non-applyable to Regex routes. Default value: false HeaderNameRequestId Determines the HTTP header name of the request ID. Default value: \"X-Request-Id\" IdleConnectionTimeout Determines the maximum amount of time an connection can keep alive without sending or receiving any data. Default value: TimeSpan.FromSeconds(120) NormalizeHeadersEncodings Determines if the HTTP server should convert request headers encoding to the content encoding. Default value: false OptionsLogMode Determines if the HTTP server should write log to OPTIONS requests. Default value: LogOutput.Both PreventResponseContentsInProhibitedMethods Determines if the HTTP server should prevent sending body contents in responses when the HTTP request method prohibits it. Default value: true RequestStreamCopyBufferSize Specifies the size, in bytes, of the copy buffer of both streams (inbound and outgoing) of the response stream. Default value: 81920 SendCorsHeaders Determines if the HTTP server automatically should send CORS headers if set. Default value: true SendSiskHeader Determines if the HTTP server should send the X-Powered-By header in all responses. Default value: true ThrowContentOnNonSemanticMethods Determines if the HTTP server should drop requests which has content body in GET, OPTIONS, HEAD and TRACE methods. Default value: true TreatHeadAsGetMethod Determines if the HTTP server should automatically send HTTP headers of an pre-processed GET response if the request is using HEAD method. Default value: true WebSocketBufferSize Determines the WebSocket buffer initial and max length. Default value: 1024"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.-ctor.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.-ctor.html",
    "title": "Constructor HttpStatusInformation | Sisk Framework",
    "keywords": "Constructor HttpStatusInformation Namespace Sisk.Core.Http Assembly Sisk.Core.dll HttpStatusInformation() Creates an new HttpStatusInformation with default parameters (200 OK) status. public HttpStatusInformation() HttpStatusInformation(int) Creates an new HttpStatusInformation instance with given parameters. public HttpStatusInformation(int statusCode) Parameters statusCode int Sets the numeric HTTP status code of the HTTP message. HttpStatusInformation(HttpStatusCode) Creates an new HttpStatusInformation instance with given parameters. public HttpStatusInformation(HttpStatusCode statusCode) Parameters statusCode HttpStatusCode Sets the numeric HTTP status code of the HTTP message. HttpStatusInformation(int, string) Creates an new HttpStatusInformation instance with given parameters. public HttpStatusInformation(int statusCode, string description) Parameters statusCode int Sets the numeric HTTP status code of the HTTP message. description string Sets the short description of the HTTP message. Remarks Custom status descriptions is only supported for plain HTTP/1.1 and 1.0 transfers. Exceptions ArgumentNullException"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.Accepted.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.Accepted.html",
    "title": "Property Accepted | Sisk Framework",
    "keywords": "Property Accepted Namespace Sisk.Core.Http Assembly Sisk.Core.dll Accepted Gets an HttpStatusInformation with an HTTP 202 Accepted status. public static HttpStatusInformation Accepted { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.AlreadyReported.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.AlreadyReported.html",
    "title": "Property AlreadyReported | Sisk Framework",
    "keywords": "Property AlreadyReported Namespace Sisk.Core.Http Assembly Sisk.Core.dll AlreadyReported Gets an HttpStatusInformation with an HTTP 208 Already Reported status. public static HttpStatusInformation AlreadyReported { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.BadGateway.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.BadGateway.html",
    "title": "Property BadGateway | Sisk Framework",
    "keywords": "Property BadGateway Namespace Sisk.Core.Http Assembly Sisk.Core.dll BadGateway Gets an HttpStatusInformation with an HTTP 502 Bad Gateway status. public static HttpStatusInformation BadGateway { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.BadRequest.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.BadRequest.html",
    "title": "Property BadRequest | Sisk Framework",
    "keywords": "Property BadRequest Namespace Sisk.Core.Http Assembly Sisk.Core.dll BadRequest Gets an HttpStatusInformation with an HTTP 400 Bad Request status. public static HttpStatusInformation BadRequest { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.Conflict.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.Conflict.html",
    "title": "Property Conflict | Sisk Framework",
    "keywords": "Property Conflict Namespace Sisk.Core.Http Assembly Sisk.Core.dll Conflict Gets an HttpStatusInformation with an HTTP 409 Conflict status. public static HttpStatusInformation Conflict { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.Continue.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.Continue.html",
    "title": "Property Continue | Sisk Framework",
    "keywords": "Property Continue Namespace Sisk.Core.Http Assembly Sisk.Core.dll Continue Gets an HttpStatusInformation with an HTTP 100 Continue status. public static HttpStatusInformation Continue { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.Created.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.Created.html",
    "title": "Property Created | Sisk Framework",
    "keywords": "Property Created Namespace Sisk.Core.Http Assembly Sisk.Core.dll Created Gets an HttpStatusInformation with an HTTP 201 Created status. public static HttpStatusInformation Created { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.Description.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.Description.html",
    "title": "Property Description | Sisk Framework",
    "keywords": "Property Description Namespace Sisk.Core.Http Assembly Sisk.Core.dll Description Gets the short description of the HTTP message. public string Description { get; } Property Value string Remarks Custom status descriptions is only supported for plain HTTP/1.1 and 1.0 transfers."
  },
  "api/Sisk.Core.Http.HttpStatusInformation.EarlyHints.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.EarlyHints.html",
    "title": "Property EarlyHints | Sisk Framework",
    "keywords": "Property EarlyHints Namespace Sisk.Core.Http Assembly Sisk.Core.dll EarlyHints Gets an HttpStatusInformation with an HTTP 103 Early Hints status. public static HttpStatusInformation EarlyHints { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.ExpectationFailed.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.ExpectationFailed.html",
    "title": "Property ExpectationFailed | Sisk Framework",
    "keywords": "Property ExpectationFailed Namespace Sisk.Core.Http Assembly Sisk.Core.dll ExpectationFailed Gets an HttpStatusInformation with an HTTP 417 Expectation Failed status. public static HttpStatusInformation ExpectationFailed { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.FailedDependency.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.FailedDependency.html",
    "title": "Property FailedDependency | Sisk Framework",
    "keywords": "Property FailedDependency Namespace Sisk.Core.Http Assembly Sisk.Core.dll FailedDependency Gets an HttpStatusInformation with an HTTP 424 Failed Dependency status. public static HttpStatusInformation FailedDependency { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.Forbidden.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.Forbidden.html",
    "title": "Property Forbidden | Sisk Framework",
    "keywords": "Property Forbidden Namespace Sisk.Core.Http Assembly Sisk.Core.dll Forbidden Gets an HttpStatusInformation with an HTTP 403 Forbidden status. public static HttpStatusInformation Forbidden { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.Found.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.Found.html",
    "title": "Property Found | Sisk Framework",
    "keywords": "Property Found Namespace Sisk.Core.Http Assembly Sisk.Core.dll Found Gets an HttpStatusInformation with an HTTP 302 Found status. public static HttpStatusInformation Found { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.GatewayTimeout.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.GatewayTimeout.html",
    "title": "Property GatewayTimeout | Sisk Framework",
    "keywords": "Property GatewayTimeout Namespace Sisk.Core.Http Assembly Sisk.Core.dll GatewayTimeout Gets an HttpStatusInformation with an HTTP 504 Gateway Timeout status. public static HttpStatusInformation GatewayTimeout { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.GetHttpStatusCode.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.GetHttpStatusCode.html",
    "title": "Method GetHttpStatusCode | Sisk Framework",
    "keywords": "Method GetHttpStatusCode Namespace Sisk.Core.Http Assembly Sisk.Core.dll GetHttpStatusCode() Gets an HttpStatusCode corresponding to this instance, or null if the HTTP status does not match any value. public HttpStatusCode? GetHttpStatusCode() Returns HttpStatusCode? An HttpStatusCode or null if the HTTP status matches no entry on it."
  },
  "api/Sisk.Core.Http.HttpStatusInformation.GetStatusCodeDescription.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.GetStatusCodeDescription.html",
    "title": "Method GetStatusCodeDescription | Sisk Framework",
    "keywords": "Method GetStatusCodeDescription Namespace Sisk.Core.Http Assembly Sisk.Core.dll GetStatusCodeDescription(int) Gets the description of the HTTP status based on its description. public static string GetStatusCodeDescription(int statusCode) Parameters statusCode int The HTTP status code. Returns string GetStatusCodeDescription(HttpStatusCode) Gets the description of the HTTP status based on its description. public static string GetStatusCodeDescription(HttpStatusCode statusCode) Parameters statusCode HttpStatusCode The HTTP status code. Returns string"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.Gone.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.Gone.html",
    "title": "Property Gone | Sisk Framework",
    "keywords": "Property Gone Namespace Sisk.Core.Http Assembly Sisk.Core.dll Gone Gets an HttpStatusInformation with an HTTP 410 Gone status. public static HttpStatusInformation Gone { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.HttpVersionNotSupported.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.HttpVersionNotSupported.html",
    "title": "Property HttpVersionNotSupported | Sisk Framework",
    "keywords": "Property HttpVersionNotSupported Namespace Sisk.Core.Http Assembly Sisk.Core.dll HttpVersionNotSupported Gets an HttpStatusInformation with an HTTP 505 HTTP Version Not Supported status. public static HttpStatusInformation HttpVersionNotSupported { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.ImATeapot.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.ImATeapot.html",
    "title": "Property ImATeapot | Sisk Framework",
    "keywords": "Property ImATeapot Namespace Sisk.Core.Http Assembly Sisk.Core.dll ImATeapot Gets an HttpStatusInformation with an HTTP 418 I'm a teapot status. public static HttpStatusInformation ImATeapot { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.ImUsed.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.ImUsed.html",
    "title": "Property ImUsed | Sisk Framework",
    "keywords": "Property ImUsed Namespace Sisk.Core.Http Assembly Sisk.Core.dll ImUsed Gets an HttpStatusInformation with an HTTP 226 IM Used status. public static HttpStatusInformation ImUsed { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.InsufficientStorage.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.InsufficientStorage.html",
    "title": "Property InsufficientStorage | Sisk Framework",
    "keywords": "Property InsufficientStorage Namespace Sisk.Core.Http Assembly Sisk.Core.dll InsufficientStorage Gets an HttpStatusInformation with an HTTP 507 Insufficient Storage status. public static HttpStatusInformation InsufficientStorage { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.InternalServerError.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.InternalServerError.html",
    "title": "Property InternalServerError | Sisk Framework",
    "keywords": "Property InternalServerError Namespace Sisk.Core.Http Assembly Sisk.Core.dll InternalServerError Gets an HttpStatusInformation with an HTTP 500 Internal Server Error status. public static HttpStatusInformation InternalServerError { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.LengthRequired.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.LengthRequired.html",
    "title": "Property LengthRequired | Sisk Framework",
    "keywords": "Property LengthRequired Namespace Sisk.Core.Http Assembly Sisk.Core.dll LengthRequired Gets an HttpStatusInformation with an HTTP 411 Length Required status. public static HttpStatusInformation LengthRequired { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.Locked.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.Locked.html",
    "title": "Property Locked | Sisk Framework",
    "keywords": "Property Locked Namespace Sisk.Core.Http Assembly Sisk.Core.dll Locked Gets an HttpStatusInformation with an HTTP 423 Locked status. public static HttpStatusInformation Locked { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.LoopDetected.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.LoopDetected.html",
    "title": "Property LoopDetected | Sisk Framework",
    "keywords": "Property LoopDetected Namespace Sisk.Core.Http Assembly Sisk.Core.dll LoopDetected Gets an HttpStatusInformation with an HTTP 508 Loop Detected status. public static HttpStatusInformation LoopDetected { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.MethodNotAllowed.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.MethodNotAllowed.html",
    "title": "Property MethodNotAllowed | Sisk Framework",
    "keywords": "Property MethodNotAllowed Namespace Sisk.Core.Http Assembly Sisk.Core.dll MethodNotAllowed Gets an HttpStatusInformation with an HTTP 405 Method Not Allowed status. public static HttpStatusInformation MethodNotAllowed { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.MisdirectedRequest.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.MisdirectedRequest.html",
    "title": "Property MisdirectedRequest | Sisk Framework",
    "keywords": "Property MisdirectedRequest Namespace Sisk.Core.Http Assembly Sisk.Core.dll MisdirectedRequest Gets an HttpStatusInformation with an HTTP 421 Misdirected Request status. public static HttpStatusInformation MisdirectedRequest { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.MovedPermanently.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.MovedPermanently.html",
    "title": "Property MovedPermanently | Sisk Framework",
    "keywords": "Property MovedPermanently Namespace Sisk.Core.Http Assembly Sisk.Core.dll MovedPermanently Gets an HttpStatusInformation with an HTTP 301 Moved Permanently status. public static HttpStatusInformation MovedPermanently { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.MultiStatus.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.MultiStatus.html",
    "title": "Property MultiStatus | Sisk Framework",
    "keywords": "Property MultiStatus Namespace Sisk.Core.Http Assembly Sisk.Core.dll MultiStatus Gets an HttpStatusInformation with an HTTP 207 Multi-Status status. public static HttpStatusInformation MultiStatus { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.MultipleChoices.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.MultipleChoices.html",
    "title": "Property MultipleChoices | Sisk Framework",
    "keywords": "Property MultipleChoices Namespace Sisk.Core.Http Assembly Sisk.Core.dll MultipleChoices Gets an HttpStatusInformation with an HTTP 300 Multiple Choices status. public static HttpStatusInformation MultipleChoices { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.NoContent.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.NoContent.html",
    "title": "Property NoContent | Sisk Framework",
    "keywords": "Property NoContent Namespace Sisk.Core.Http Assembly Sisk.Core.dll NoContent Gets an HttpStatusInformation with an HTTP 204 No Content status. public static HttpStatusInformation NoContent { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.NonAuthoritativeInformation.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.NonAuthoritativeInformation.html",
    "title": "Property NonAuthoritativeInformation | Sisk Framework",
    "keywords": "Property NonAuthoritativeInformation Namespace Sisk.Core.Http Assembly Sisk.Core.dll NonAuthoritativeInformation Gets an HttpStatusInformation with an HTTP 203 Non-Authoritative Information status. public static HttpStatusInformation NonAuthoritativeInformation { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.NotAcceptable.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.NotAcceptable.html",
    "title": "Property NotAcceptable | Sisk Framework",
    "keywords": "Property NotAcceptable Namespace Sisk.Core.Http Assembly Sisk.Core.dll NotAcceptable Gets an HttpStatusInformation with an HTTP 406 Not Acceptable status. public static HttpStatusInformation NotAcceptable { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.NotExtended.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.NotExtended.html",
    "title": "Property NotExtended | Sisk Framework",
    "keywords": "Property NotExtended Namespace Sisk.Core.Http Assembly Sisk.Core.dll NotExtended Gets an HttpStatusInformation with an HTTP 510 Not Extended status. public static HttpStatusInformation NotExtended { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.NotFound.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.NotFound.html",
    "title": "Property NotFound | Sisk Framework",
    "keywords": "Property NotFound Namespace Sisk.Core.Http Assembly Sisk.Core.dll NotFound Gets an HttpStatusInformation with an HTTP 404 Not Found status. public static HttpStatusInformation NotFound { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.NotImplemented.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.NotImplemented.html",
    "title": "Property NotImplemented | Sisk Framework",
    "keywords": "Property NotImplemented Namespace Sisk.Core.Http Assembly Sisk.Core.dll NotImplemented Gets an HttpStatusInformation with an HTTP 501 Not Implemented status. public static HttpStatusInformation NotImplemented { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.NotModified.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.NotModified.html",
    "title": "Property NotModified | Sisk Framework",
    "keywords": "Property NotModified Namespace Sisk.Core.Http Assembly Sisk.Core.dll NotModified Gets an HttpStatusInformation with an HTTP 304 Not Modified status. public static HttpStatusInformation NotModified { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.Ok.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.Ok.html",
    "title": "Property Ok | Sisk Framework",
    "keywords": "Property Ok Namespace Sisk.Core.Http Assembly Sisk.Core.dll Ok Gets an HttpStatusInformation with an HTTP 200 OK status. public static HttpStatusInformation Ok { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.PartialContent.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.PartialContent.html",
    "title": "Property PartialContent | Sisk Framework",
    "keywords": "Property PartialContent Namespace Sisk.Core.Http Assembly Sisk.Core.dll PartialContent Gets an HttpStatusInformation with an HTTP 206 Partial Content status. public static HttpStatusInformation PartialContent { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.PayloadTooLarge.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.PayloadTooLarge.html",
    "title": "Property PayloadTooLarge | Sisk Framework",
    "keywords": "Property PayloadTooLarge Namespace Sisk.Core.Http Assembly Sisk.Core.dll PayloadTooLarge Gets an HttpStatusInformation with an HTTP 413 Payload Too Large status. public static HttpStatusInformation PayloadTooLarge { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.PaymentRequired.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.PaymentRequired.html",
    "title": "Property PaymentRequired | Sisk Framework",
    "keywords": "Property PaymentRequired Namespace Sisk.Core.Http Assembly Sisk.Core.dll PaymentRequired Gets an HttpStatusInformation with an HTTP 402 Payment Required status. public static HttpStatusInformation PaymentRequired { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.PermanentRedirect.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.PermanentRedirect.html",
    "title": "Property PermanentRedirect | Sisk Framework",
    "keywords": "Property PermanentRedirect Namespace Sisk.Core.Http Assembly Sisk.Core.dll PermanentRedirect Gets an HttpStatusInformation with an HTTP 308 Permanent Redirect status. public static HttpStatusInformation PermanentRedirect { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.PreconditionFailed.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.PreconditionFailed.html",
    "title": "Property PreconditionFailed | Sisk Framework",
    "keywords": "Property PreconditionFailed Namespace Sisk.Core.Http Assembly Sisk.Core.dll PreconditionFailed Gets an HttpStatusInformation with an HTTP 412 Precondition Failed status. public static HttpStatusInformation PreconditionFailed { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.PreconditionRequired.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.PreconditionRequired.html",
    "title": "Property PreconditionRequired | Sisk Framework",
    "keywords": "Property PreconditionRequired Namespace Sisk.Core.Http Assembly Sisk.Core.dll PreconditionRequired Gets an HttpStatusInformation with an HTTP 428 Precondition Required status. public static HttpStatusInformation PreconditionRequired { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.Processing.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.Processing.html",
    "title": "Property Processing | Sisk Framework",
    "keywords": "Property Processing Namespace Sisk.Core.Http Assembly Sisk.Core.dll Processing Gets an HttpStatusInformation with an HTTP 102 Processing status. public static HttpStatusInformation Processing { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.ProxyAuthenticationRequired.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.ProxyAuthenticationRequired.html",
    "title": "Property ProxyAuthenticationRequired | Sisk Framework",
    "keywords": "Property ProxyAuthenticationRequired Namespace Sisk.Core.Http Assembly Sisk.Core.dll ProxyAuthenticationRequired Gets an HttpStatusInformation with an HTTP 407 Proxy Authentication Required status. public static HttpStatusInformation ProxyAuthenticationRequired { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.RangeNotSatisfiable.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.RangeNotSatisfiable.html",
    "title": "Property RangeNotSatisfiable | Sisk Framework",
    "keywords": "Property RangeNotSatisfiable Namespace Sisk.Core.Http Assembly Sisk.Core.dll RangeNotSatisfiable Gets an HttpStatusInformation with an HTTP 416 Range Not Satisfiable status. public static HttpStatusInformation RangeNotSatisfiable { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.RequestHeaderFieldsTooLarge.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.RequestHeaderFieldsTooLarge.html",
    "title": "Property RequestHeaderFieldsTooLarge | Sisk Framework",
    "keywords": "Property RequestHeaderFieldsTooLarge Namespace Sisk.Core.Http Assembly Sisk.Core.dll RequestHeaderFieldsTooLarge Gets an HttpStatusInformation with an HTTP 431 Request Header Fields Too Large status. public static HttpStatusInformation RequestHeaderFieldsTooLarge { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.RequestTimeout.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.RequestTimeout.html",
    "title": "Property RequestTimeout | Sisk Framework",
    "keywords": "Property RequestTimeout Namespace Sisk.Core.Http Assembly Sisk.Core.dll RequestTimeout Gets an HttpStatusInformation with an HTTP 408 Request Timeout status. public static HttpStatusInformation RequestTimeout { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.ResetContent.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.ResetContent.html",
    "title": "Property ResetContent | Sisk Framework",
    "keywords": "Property ResetContent Namespace Sisk.Core.Http Assembly Sisk.Core.dll ResetContent Gets an HttpStatusInformation with an HTTP 205 Reset Content status. public static HttpStatusInformation ResetContent { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.SeeOther.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.SeeOther.html",
    "title": "Property SeeOther | Sisk Framework",
    "keywords": "Property SeeOther Namespace Sisk.Core.Http Assembly Sisk.Core.dll SeeOther Gets an HttpStatusInformation with an HTTP 303 See Other status. public static HttpStatusInformation SeeOther { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.ServiceUnavailable.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.ServiceUnavailable.html",
    "title": "Property ServiceUnavailable | Sisk Framework",
    "keywords": "Property ServiceUnavailable Namespace Sisk.Core.Http Assembly Sisk.Core.dll ServiceUnavailable Gets an HttpStatusInformation with an HTTP 503 Service Unavailable status. public static HttpStatusInformation ServiceUnavailable { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.StatusCode.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.StatusCode.html",
    "title": "Property StatusCode | Sisk Framework",
    "keywords": "Property StatusCode Namespace Sisk.Core.Http Assembly Sisk.Core.dll StatusCode Gets the numeric HTTP status code of the HTTP message. public int StatusCode { get; } Property Value int"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.SwitchProxy.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.SwitchProxy.html",
    "title": "Property SwitchProxy | Sisk Framework",
    "keywords": "Property SwitchProxy Namespace Sisk.Core.Http Assembly Sisk.Core.dll SwitchProxy Gets an HttpStatusInformation with an HTTP 306 Switch Proxy status. public static HttpStatusInformation SwitchProxy { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.SwitchingProtocols.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.SwitchingProtocols.html",
    "title": "Property SwitchingProtocols | Sisk Framework",
    "keywords": "Property SwitchingProtocols Namespace Sisk.Core.Http Assembly Sisk.Core.dll SwitchingProtocols Gets an HttpStatusInformation with an HTTP 101 Switching Protocols status. public static HttpStatusInformation SwitchingProtocols { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.TemporaryRedirect.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.TemporaryRedirect.html",
    "title": "Property TemporaryRedirect | Sisk Framework",
    "keywords": "Property TemporaryRedirect Namespace Sisk.Core.Http Assembly Sisk.Core.dll TemporaryRedirect Gets an HttpStatusInformation with an HTTP 307 Temporary Redirect status. public static HttpStatusInformation TemporaryRedirect { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.ToString.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.ToString.html",
    "title": "Method ToString | Sisk Framework",
    "keywords": "Method ToString Namespace Sisk.Core.Http Assembly Sisk.Core.dll ToString() Gets an string representation of this HTTP Status Code. public override string ToString() Returns string"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.TooManyRequests.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.TooManyRequests.html",
    "title": "Property TooManyRequests | Sisk Framework",
    "keywords": "Property TooManyRequests Namespace Sisk.Core.Http Assembly Sisk.Core.dll TooManyRequests Gets an HttpStatusInformation with an HTTP 429 Too Many Requests status. public static HttpStatusInformation TooManyRequests { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.Unauthorized.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.Unauthorized.html",
    "title": "Property Unauthorized | Sisk Framework",
    "keywords": "Property Unauthorized Namespace Sisk.Core.Http Assembly Sisk.Core.dll Unauthorized Gets an HttpStatusInformation with an HTTP 401 Unauthorized status. public static HttpStatusInformation Unauthorized { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.UnavailableForLegalReasons.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.UnavailableForLegalReasons.html",
    "title": "Property UnavailableForLegalReasons | Sisk Framework",
    "keywords": "Property UnavailableForLegalReasons Namespace Sisk.Core.Http Assembly Sisk.Core.dll UnavailableForLegalReasons Gets an HttpStatusInformation with an HTTP 451 Unavailable For Legal Reasons status. public static HttpStatusInformation UnavailableForLegalReasons { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.UnprocessableEntity.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.UnprocessableEntity.html",
    "title": "Property UnprocessableEntity | Sisk Framework",
    "keywords": "Property UnprocessableEntity Namespace Sisk.Core.Http Assembly Sisk.Core.dll UnprocessableEntity Gets an HttpStatusInformation with an HTTP 422 Unprocessable Entity status. public static HttpStatusInformation UnprocessableEntity { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.UnsupportedMediaType.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.UnsupportedMediaType.html",
    "title": "Property UnsupportedMediaType | Sisk Framework",
    "keywords": "Property UnsupportedMediaType Namespace Sisk.Core.Http Assembly Sisk.Core.dll UnsupportedMediaType Gets an HttpStatusInformation with an HTTP 415 Unsupported Media Type status. public static HttpStatusInformation UnsupportedMediaType { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.UpgradeRequired.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.UpgradeRequired.html",
    "title": "Property UpgradeRequired | Sisk Framework",
    "keywords": "Property UpgradeRequired Namespace Sisk.Core.Http Assembly Sisk.Core.dll UpgradeRequired Gets an HttpStatusInformation with an HTTP 426 Upgrade Required status. public static HttpStatusInformation UpgradeRequired { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.UriTooLong.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.UriTooLong.html",
    "title": "Property UriTooLong | Sisk Framework",
    "keywords": "Property UriTooLong Namespace Sisk.Core.Http Assembly Sisk.Core.dll UriTooLong Gets an HttpStatusInformation with an HTTP 414 URI Too Long status. public static HttpStatusInformation UriTooLong { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.UseProxy.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.UseProxy.html",
    "title": "Property UseProxy | Sisk Framework",
    "keywords": "Property UseProxy Namespace Sisk.Core.Http Assembly Sisk.Core.dll UseProxy Gets an HttpStatusInformation with an HTTP 305 Use Proxy status. public static HttpStatusInformation UseProxy { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.VariantAlsoNegotiates.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.VariantAlsoNegotiates.html",
    "title": "Property VariantAlsoNegotiates | Sisk Framework",
    "keywords": "Property VariantAlsoNegotiates Namespace Sisk.Core.Http Assembly Sisk.Core.dll VariantAlsoNegotiates Gets an HttpStatusInformation with an HTTP 506 Variant Also Negotiates status. public static HttpStatusInformation VariantAlsoNegotiates { get; } Property Value HttpStatusInformation"
  },
  "api/Sisk.Core.Http.HttpStatusInformation.html": {
    "href": "api/Sisk.Core.Http.HttpStatusInformation.html",
    "title": "Struct HttpStatusInformation | Sisk Framework",
    "keywords": "Struct HttpStatusInformation Namespace Sisk.Core.Http Assembly Sisk.Core.dll Represents a structure that holds an HTTP response status information, with it's status code and description. public readonly struct HttpStatusInformation : IEquatable<HttpStatusInformation>, IEquatable<HttpStatusCode>, IEquatable<int> Implements IEquatable<HttpStatusInformation> IEquatable<HttpStatusCode> IEquatable<int> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors HttpStatusInformation() Creates an new HttpStatusInformation with default parameters (200 OK) status. HttpStatusInformation(int) Creates an new HttpStatusInformation instance with given parameters. HttpStatusInformation(int, string) Creates an new HttpStatusInformation instance with given parameters. HttpStatusInformation(HttpStatusCode) Creates an new HttpStatusInformation instance with given parameters. Properties Accepted Gets an HttpStatusInformation with an HTTP 202 Accepted status. AlreadyReported Gets an HttpStatusInformation with an HTTP 208 Already Reported status. BadGateway Gets an HttpStatusInformation with an HTTP 502 Bad Gateway status. BadRequest Gets an HttpStatusInformation with an HTTP 400 Bad Request status. Conflict Gets an HttpStatusInformation with an HTTP 409 Conflict status. Continue Gets an HttpStatusInformation with an HTTP 100 Continue status. Created Gets an HttpStatusInformation with an HTTP 201 Created status. Description Gets the short description of the HTTP message. EarlyHints Gets an HttpStatusInformation with an HTTP 103 Early Hints status. ExpectationFailed Gets an HttpStatusInformation with an HTTP 417 Expectation Failed status. FailedDependency Gets an HttpStatusInformation with an HTTP 424 Failed Dependency status. Forbidden Gets an HttpStatusInformation with an HTTP 403 Forbidden status. Found Gets an HttpStatusInformation with an HTTP 302 Found status. GatewayTimeout Gets an HttpStatusInformation with an HTTP 504 Gateway Timeout status. Gone Gets an HttpStatusInformation with an HTTP 410 Gone status. HttpVersionNotSupported Gets an HttpStatusInformation with an HTTP 505 HTTP Version Not Supported status. ImATeapot Gets an HttpStatusInformation with an HTTP 418 I'm a teapot status. ImUsed Gets an HttpStatusInformation with an HTTP 226 IM Used status. InsufficientStorage Gets an HttpStatusInformation with an HTTP 507 Insufficient Storage status. InternalServerError Gets an HttpStatusInformation with an HTTP 500 Internal Server Error status. LengthRequired Gets an HttpStatusInformation with an HTTP 411 Length Required status. Locked Gets an HttpStatusInformation with an HTTP 423 Locked status. LoopDetected Gets an HttpStatusInformation with an HTTP 508 Loop Detected status. MethodNotAllowed Gets an HttpStatusInformation with an HTTP 405 Method Not Allowed status. MisdirectedRequest Gets an HttpStatusInformation with an HTTP 421 Misdirected Request status. MovedPermanently Gets an HttpStatusInformation with an HTTP 301 Moved Permanently status. MultiStatus Gets an HttpStatusInformation with an HTTP 207 Multi-Status status. MultipleChoices Gets an HttpStatusInformation with an HTTP 300 Multiple Choices status. NoContent Gets an HttpStatusInformation with an HTTP 204 No Content status. NonAuthoritativeInformation Gets an HttpStatusInformation with an HTTP 203 Non-Authoritative Information status. NotAcceptable Gets an HttpStatusInformation with an HTTP 406 Not Acceptable status. NotExtended Gets an HttpStatusInformation with an HTTP 510 Not Extended status. NotFound Gets an HttpStatusInformation with an HTTP 404 Not Found status. NotImplemented Gets an HttpStatusInformation with an HTTP 501 Not Implemented status. NotModified Gets an HttpStatusInformation with an HTTP 304 Not Modified status. Ok Gets an HttpStatusInformation with an HTTP 200 OK status. PartialContent Gets an HttpStatusInformation with an HTTP 206 Partial Content status. PayloadTooLarge Gets an HttpStatusInformation with an HTTP 413 Payload Too Large status. PaymentRequired Gets an HttpStatusInformation with an HTTP 402 Payment Required status. PermanentRedirect Gets an HttpStatusInformation with an HTTP 308 Permanent Redirect status. PreconditionFailed Gets an HttpStatusInformation with an HTTP 412 Precondition Failed status. PreconditionRequired Gets an HttpStatusInformation with an HTTP 428 Precondition Required status. Processing Gets an HttpStatusInformation with an HTTP 102 Processing status. ProxyAuthenticationRequired Gets an HttpStatusInformation with an HTTP 407 Proxy Authentication Required status. RangeNotSatisfiable Gets an HttpStatusInformation with an HTTP 416 Range Not Satisfiable status. RequestHeaderFieldsTooLarge Gets an HttpStatusInformation with an HTTP 431 Request Header Fields Too Large status. RequestTimeout Gets an HttpStatusInformation with an HTTP 408 Request Timeout status. ResetContent Gets an HttpStatusInformation with an HTTP 205 Reset Content status. SeeOther Gets an HttpStatusInformation with an HTTP 303 See Other status. ServiceUnavailable Gets an HttpStatusInformation with an HTTP 503 Service Unavailable status. StatusCode Gets the numeric HTTP status code of the HTTP message. SwitchProxy Gets an HttpStatusInformation with an HTTP 306 Switch Proxy status. SwitchingProtocols Gets an HttpStatusInformation with an HTTP 101 Switching Protocols status. TemporaryRedirect Gets an HttpStatusInformation with an HTTP 307 Temporary Redirect status. TooManyRequests Gets an HttpStatusInformation with an HTTP 429 Too Many Requests status. Unauthorized Gets an HttpStatusInformation with an HTTP 401 Unauthorized status. UnavailableForLegalReasons Gets an HttpStatusInformation with an HTTP 451 Unavailable For Legal Reasons status. UnprocessableEntity Gets an HttpStatusInformation with an HTTP 422 Unprocessable Entity status. UnsupportedMediaType Gets an HttpStatusInformation with an HTTP 415 Unsupported Media Type status. UpgradeRequired Gets an HttpStatusInformation with an HTTP 426 Upgrade Required status. UriTooLong Gets an HttpStatusInformation with an HTTP 414 URI Too Long status. UseProxy Gets an HttpStatusInformation with an HTTP 305 Use Proxy status. VariantAlsoNegotiates Gets an HttpStatusInformation with an HTTP 506 Variant Also Negotiates status. Methods GetHttpStatusCode() Gets an HttpStatusCode corresponding to this instance, or null if the HTTP status does not match any value. GetStatusCodeDescription(int) Gets the description of the HTTP status based on its description. GetStatusCodeDescription(HttpStatusCode) Gets the description of the HTTP status based on its description. ToString() Gets an string representation of this HTTP Status Code."
  },
  "api/Sisk.Core.Http.ListeningHost.-ctor.html": {
    "href": "api/Sisk.Core.Http.ListeningHost.-ctor.html",
    "title": "Constructor ListeningHost | Sisk Framework",
    "keywords": "Constructor ListeningHost Namespace Sisk.Core.Http Assembly Sisk.Core.dll ListeningHost() Creates an new empty ListeningHost instance. public ListeningHost() ListeningHost(params ListeningPort[]) Creates an new ListeningHost instance with given array of ListeningPort. public ListeningHost(params ListeningPort[] ports) Parameters ports ListeningPort[] The array of ListeningPort to listen in the ListeningHost. ListeningHost(string, Router) Creates an new ListeningHost instance with given URL. public ListeningHost(string uri, Router r) Parameters uri string The well formatted URL with scheme, hostname and port. r Router The router which will handle this listener requests."
  },
  "api/Sisk.Core.Http.ListeningHost.CanListen.html": {
    "href": "api/Sisk.Core.Http.ListeningHost.CanListen.html",
    "title": "Property CanListen | Sisk Framework",
    "keywords": "Property CanListen Namespace Sisk.Core.Http Assembly Sisk.Core.dll CanListen Gets whether this ListeningHost can be listened by it's host HttpServer. public bool CanListen { get; } Property Value bool"
  },
  "api/Sisk.Core.Http.ListeningHost.CrossOriginResourceSharingPolicy.html": {
    "href": "api/Sisk.Core.Http.ListeningHost.CrossOriginResourceSharingPolicy.html",
    "title": "Property CrossOriginResourceSharingPolicy | Sisk Framework",
    "keywords": "Property CrossOriginResourceSharingPolicy Namespace Sisk.Core.Http Assembly Sisk.Core.dll CrossOriginResourceSharingPolicy Gets or sets the CORS sharing policy object. public CrossOriginResourceSharingHeaders CrossOriginResourceSharingPolicy { get; set; } Property Value CrossOriginResourceSharingHeaders"
  },
  "api/Sisk.Core.Http.ListeningHost.Equals.html": {
    "href": "api/Sisk.Core.Http.ListeningHost.Equals.html",
    "title": "Method Equals | Sisk Framework",
    "keywords": "Method Equals Namespace Sisk.Core.Http Assembly Sisk.Core.dll Equals(object?) Determines if another object is equals to this class instance. public override bool Equals(object? obj) Parameters obj object The another object which will be used to compare. Returns bool"
  },
  "api/Sisk.Core.Http.ListeningHost.GetHashCode.html": {
    "href": "api/Sisk.Core.Http.ListeningHost.GetHashCode.html",
    "title": "Method GetHashCode | Sisk Framework",
    "keywords": "Method GetHashCode Namespace Sisk.Core.Http Assembly Sisk.Core.dll GetHashCode() Gets the hash code for this listening host. public override int GetHashCode() Returns int"
  },
  "api/Sisk.Core.Http.ListeningHost.Label.html": {
    "href": "api/Sisk.Core.Http.ListeningHost.Label.html",
    "title": "Property Label | Sisk Framework",
    "keywords": "Property Label Namespace Sisk.Core.Http Assembly Sisk.Core.dll Label Gets or sets a label for this Listening Host. public string? Label { get; set; } Property Value string"
  },
  "api/Sisk.Core.Http.ListeningHost.Ports.html": {
    "href": "api/Sisk.Core.Http.ListeningHost.Ports.html",
    "title": "Property Ports | Sisk Framework",
    "keywords": "Property Ports Namespace Sisk.Core.Http Assembly Sisk.Core.dll Ports Gets or sets the list of ListeningPort that this host will listen on. public IList<ListeningPort> Ports { get; set; } Property Value IList<ListeningPort>"
  },
  "api/Sisk.Core.Http.ListeningHost.Router.html": {
    "href": "api/Sisk.Core.Http.ListeningHost.Router.html",
    "title": "Property Router | Sisk Framework",
    "keywords": "Property Router Namespace Sisk.Core.Http Assembly Sisk.Core.dll Router Gets or sets the Router for this ListeningHost instance. public Router? Router { get; set; } Property Value Router"
  },
  "api/Sisk.Core.Http.ListeningHost.html": {
    "href": "api/Sisk.Core.Http.ListeningHost.html",
    "title": "Class ListeningHost | Sisk Framework",
    "keywords": "Class ListeningHost Namespace Sisk.Core.Http Assembly Sisk.Core.dll Provides a structure to contain the fields needed by an http server host. public sealed class ListeningHost Inheritance object ListeningHost Inherited Members object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors ListeningHost() Creates an new empty ListeningHost instance. ListeningHost(params ListeningPort[]) Creates an new ListeningHost instance with given array of ListeningPort. ListeningHost(string, Router) Creates an new ListeningHost instance with given URL. Properties CanListen Gets whether this ListeningHost can be listened by it's host HttpServer. CrossOriginResourceSharingPolicy Gets or sets the CORS sharing policy object. Label Gets or sets a label for this Listening Host. Ports Gets or sets the list of ListeningPort that this host will listen on. Router Gets or sets the Router for this ListeningHost instance. Methods Equals(object?) Determines if another object is equals to this class instance. GetHashCode() Gets the hash code for this listening host."
  },
  "api/Sisk.Core.Http.ListeningHostRepository.-ctor.html": {
    "href": "api/Sisk.Core.Http.ListeningHostRepository.-ctor.html",
    "title": "Constructor ListeningHostRepository | Sisk Framework",
    "keywords": "Constructor ListeningHostRepository Namespace Sisk.Core.Http Assembly Sisk.Core.dll ListeningHostRepository() Creates a new instance of an empty ListeningHostRepository. public ListeningHostRepository() ListeningHostRepository(IEnumerable<ListeningHost>) Creates a new instance of an ListeningHostRepository copying the items from another collection of ListeningHost. public ListeningHostRepository(IEnumerable<ListeningHost> hosts) Parameters hosts IEnumerable<ListeningHost> The collection which stores the ListeningHost which will be copied to this repository."
  },
  "api/Sisk.Core.Http.ListeningHostRepository.Add.html": {
    "href": "api/Sisk.Core.Http.ListeningHostRepository.Add.html",
    "title": "Method Add | Sisk Framework",
    "keywords": "Method Add Namespace Sisk.Core.Http Assembly Sisk.Core.dll Add(ListeningHost) Adds a listeninghost to this repository. If this listeninghost already exists in this class, an exception will be thrown. public void Add(ListeningHost item) Parameters item ListeningHost The ListeningHost to add to this collection."
  },
  "api/Sisk.Core.Http.ListeningHostRepository.Clear.html": {
    "href": "api/Sisk.Core.Http.ListeningHostRepository.Clear.html",
    "title": "Method Clear | Sisk Framework",
    "keywords": "Method Clear Namespace Sisk.Core.Http Assembly Sisk.Core.dll Clear() Removes all listeninghosts from this repository. public void Clear()"
  },
  "api/Sisk.Core.Http.ListeningHostRepository.Contains.html": {
    "href": "api/Sisk.Core.Http.ListeningHostRepository.Contains.html",
    "title": "Method Contains | Sisk Framework",
    "keywords": "Method Contains Namespace Sisk.Core.Http Assembly Sisk.Core.dll Contains(ListeningHost) Determines if an ListeningHost is present in this repository. public bool Contains(ListeningHost item) Parameters item ListeningHost The ListeningHost to check if is present in this repository. Returns bool"
  },
  "api/Sisk.Core.Http.ListeningHostRepository.CopyTo.html": {
    "href": "api/Sisk.Core.Http.ListeningHostRepository.CopyTo.html",
    "title": "Method CopyTo | Sisk Framework",
    "keywords": "Method CopyTo Namespace Sisk.Core.Http Assembly Sisk.Core.dll CopyTo(ListeningHost[], int) Copies all elements from this repository to another compatible repository. public void CopyTo(ListeningHost[] array, int arrayIndex) Parameters array ListeningHost[] The one-dimensional System.Array that is the destination of the elements copied. arrayIndex int The zero-based index in array at which copying begins."
  },
  "api/Sisk.Core.Http.ListeningHostRepository.Count.html": {
    "href": "api/Sisk.Core.Http.ListeningHostRepository.Count.html",
    "title": "Property Count | Sisk Framework",
    "keywords": "Property Count Namespace Sisk.Core.Http Assembly Sisk.Core.dll Count Gets the number of elements contained in this ListeningHostRepository. public int Count { get; } Property Value int"
  },
  "api/Sisk.Core.Http.ListeningHostRepository.GetEnumerator.html": {
    "href": "api/Sisk.Core.Http.ListeningHostRepository.GetEnumerator.html",
    "title": "Method GetEnumerator | Sisk Framework",
    "keywords": "Method GetEnumerator Namespace Sisk.Core.Http Assembly Sisk.Core.dll GetEnumerator() Returns an enumerator that iterates through this ListeningHostRepository. public IEnumerator<ListeningHost> GetEnumerator() Returns IEnumerator<ListeningHost>"
  },
  "api/Sisk.Core.Http.ListeningHostRepository.IndexOf.html": {
    "href": "api/Sisk.Core.Http.ListeningHostRepository.IndexOf.html",
    "title": "Method IndexOf | Sisk Framework",
    "keywords": "Method IndexOf Namespace Sisk.Core.Http Assembly Sisk.Core.dll IndexOf(ListeningHost) public int IndexOf(ListeningHost item) Parameters item ListeningHost Returns int"
  },
  "api/Sisk.Core.Http.ListeningHostRepository.Insert.html": {
    "href": "api/Sisk.Core.Http.ListeningHostRepository.Insert.html",
    "title": "Method Insert | Sisk Framework",
    "keywords": "Method Insert Namespace Sisk.Core.Http Assembly Sisk.Core.dll Insert(int, ListeningHost) public void Insert(int index, ListeningHost item) Parameters index int item ListeningHost"
  },
  "api/Sisk.Core.Http.ListeningHostRepository.IsReadOnly.html": {
    "href": "api/Sisk.Core.Http.ListeningHostRepository.IsReadOnly.html",
    "title": "Property IsReadOnly | Sisk Framework",
    "keywords": "Property IsReadOnly Namespace Sisk.Core.Http Assembly Sisk.Core.dll IsReadOnly Gets an boolean indicating if this ListeningHostRepository is read only. This property always returns true. public bool IsReadOnly { get; } Property Value bool"
  },
  "api/Sisk.Core.Http.ListeningHostRepository.Item.html": {
    "href": "api/Sisk.Core.Http.ListeningHostRepository.Item.html",
    "title": "Property this | Sisk Framework",
    "keywords": "Property this Namespace Sisk.Core.Http Assembly Sisk.Core.dll this[int] public ListeningHost this[int index] { get; set; } Parameters index int Property Value ListeningHost"
  },
  "api/Sisk.Core.Http.ListeningHostRepository.Remove.html": {
    "href": "api/Sisk.Core.Http.ListeningHostRepository.Remove.html",
    "title": "Method Remove | Sisk Framework",
    "keywords": "Method Remove Namespace Sisk.Core.Http Assembly Sisk.Core.dll Remove(ListeningHost) Try to remove a ListeningHost from this repository. If the item is removed, this methods returns true. public bool Remove(ListeningHost item) Parameters item ListeningHost The ListeningHost to be removed. Returns bool"
  },
  "api/Sisk.Core.Http.ListeningHostRepository.RemoveAt.html": {
    "href": "api/Sisk.Core.Http.ListeningHostRepository.RemoveAt.html",
    "title": "Method RemoveAt | Sisk Framework",
    "keywords": "Method RemoveAt Namespace Sisk.Core.Http Assembly Sisk.Core.dll RemoveAt(int) public void RemoveAt(int index) Parameters index int"
  },
  "api/Sisk.Core.Http.ListeningHostRepository.html": {
    "href": "api/Sisk.Core.Http.ListeningHostRepository.html",
    "title": "Class ListeningHostRepository | Sisk Framework",
    "keywords": "Class ListeningHostRepository Namespace Sisk.Core.Http Assembly Sisk.Core.dll Represents an fluent repository of ListeningHost that can add, modify, or remove listening hosts while an HttpServer is running. public sealed class ListeningHostRepository : IList<ListeningHost>, ICollection<ListeningHost>, IEnumerable<ListeningHost>, IEnumerable Inheritance object ListeningHostRepository Implements IList<ListeningHost> ICollection<ListeningHost> IEnumerable<ListeningHost> IEnumerable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ListeningHostRepository() Creates a new instance of an empty ListeningHostRepository. ListeningHostRepository(IEnumerable<ListeningHost>) Creates a new instance of an ListeningHostRepository copying the items from another collection of ListeningHost. Properties Count Gets the number of elements contained in this ListeningHostRepository. IsReadOnly Gets an boolean indicating if this ListeningHostRepository is read only. This property always returns true. this[int] Methods Add(ListeningHost) Adds a listeninghost to this repository. If this listeninghost already exists in this class, an exception will be thrown. Clear() Removes all listeninghosts from this repository. Contains(ListeningHost) Determines if an ListeningHost is present in this repository. CopyTo(ListeningHost[], int) Copies all elements from this repository to another compatible repository. GetEnumerator() Returns an enumerator that iterates through this ListeningHostRepository. IndexOf(ListeningHost) Insert(int, ListeningHost) Remove(ListeningHost) Try to remove a ListeningHost from this repository. If the item is removed, this methods returns true. RemoveAt(int)"
  },
  "api/Sisk.Core.Http.ListeningPort.-ctor.html": {
    "href": "api/Sisk.Core.Http.ListeningPort.-ctor.html",
    "title": "Constructor ListeningPort | Sisk Framework",
    "keywords": "Constructor ListeningPort Namespace Sisk.Core.Http Assembly Sisk.Core.dll ListeningPort() Creates an new ListeningPort instance with default parameters. public ListeningPort() ListeningPort(ushort) Creates an new ListeningPort instance with the specified port at the loopback host. public ListeningPort(ushort port) Parameters port ushort The port the server will listen on. If this port is the default HTTPS port (443), the class will have the property Secure to true. ListeningPort(ushort, bool) Creates an new ListeningPort instance with the specified port and secure context at the loopback host. public ListeningPort(ushort port, bool secure) Parameters port ushort The port the server will listen on. secure bool Indicates whether the server should listen to this port securely (SSL). ListeningPort(bool, string, ushort) Creates an new ListeningPort instance with the specified port, secure context and hostname. public ListeningPort(bool secure, string hostname, ushort port) Parameters secure bool Indicates whether the server should listen to this port securely (SSL). hostname string The hostname DNS pattern the server will listen to. port ushort The port the server will listen on. ListeningPort(bool, string, ushort, string) Creates an new ListeningPort instance with the specified port, secure context, hostname and path. public ListeningPort(bool secure, string hostname, ushort port, string path) Parameters secure bool Indicates whether the server should listen to this port securely (SSL). hostname string The hostname DNS pattern the server will listen to. port ushort The port the server will listen on. path string The prefix path. ListeningPort(string) Creates an new ListeningPort instance with the specified URI. public ListeningPort(string uri) Parameters uri string The URI component that will be parsed to the listening port format."
  },
  "api/Sisk.Core.Http.ListeningPort.Equals.html": {
    "href": "api/Sisk.Core.Http.ListeningPort.Equals.html",
    "title": "Method Equals | Sisk Framework",
    "keywords": "Method Equals Namespace Sisk.Core.Http Assembly Sisk.Core.dll Equals(object?) Determines if another object is equals to this class instance. public override bool Equals(object? obj) Parameters obj object The another object which will be used to compare. Returns bool Equals(ListeningPort) Determines if this ListeningPort is equals to another ListeningPort. public bool Equals(ListeningPort other) Parameters other ListeningPort The another object which will be used to compare. Returns bool"
  },
  "api/Sisk.Core.Http.ListeningPort.GetHashCode.html": {
    "href": "api/Sisk.Core.Http.ListeningPort.GetHashCode.html",
    "title": "Method GetHashCode | Sisk Framework",
    "keywords": "Method GetHashCode Namespace Sisk.Core.Http Assembly Sisk.Core.dll GetHashCode() Gets the hash code for this listening port. public override int GetHashCode() Returns int"
  },
  "api/Sisk.Core.Http.ListeningPort.GetRandomPort.html": {
    "href": "api/Sisk.Core.Http.ListeningPort.GetRandomPort.html",
    "title": "Method GetRandomPort | Sisk Framework",
    "keywords": "Method GetRandomPort Namespace Sisk.Core.Http Assembly Sisk.Core.dll GetRandomPort() Gets an ListeningPort object with an random insecure port at the default loopback address. public static ListeningPort GetRandomPort() Returns ListeningPort"
  },
  "api/Sisk.Core.Http.ListeningPort.Hostname.html": {
    "href": "api/Sisk.Core.Http.ListeningPort.Hostname.html",
    "title": "Property Hostname | Sisk Framework",
    "keywords": "Property Hostname Namespace Sisk.Core.Http Assembly Sisk.Core.dll Hostname Gets the DNS hostname pattern where this listening port will refer. public string Hostname { get; } Property Value string"
  },
  "api/Sisk.Core.Http.ListeningPort.IsPathRoot.html": {
    "href": "api/Sisk.Core.Http.ListeningPort.IsPathRoot.html",
    "title": "Property IsPathRoot | Sisk Framework",
    "keywords": "Property IsPathRoot Namespace Sisk.Core.Http Assembly Sisk.Core.dll IsPathRoot Gets an boolean indicating if this listening port has an non-rooted path. public bool IsPathRoot { get; } Property Value bool"
  },
  "api/Sisk.Core.Http.ListeningPort.Parse.html": {
    "href": "api/Sisk.Core.Http.ListeningPort.Parse.html",
    "title": "Method Parse | Sisk Framework",
    "keywords": "Method Parse Namespace Sisk.Core.Http Assembly Sisk.Core.dll Parse(string, IFormatProvider?) Parses a string into a ListeningPort. static ListeningPort Parse(string s, IFormatProvider? provider) Parameters s string The string to parse. provider IFormatProvider An object that provides culture-specific formatting information about s. Returns ListeningPort"
  },
  "api/Sisk.Core.Http.ListeningPort.Path.html": {
    "href": "api/Sisk.Core.Http.ListeningPort.Path.html",
    "title": "Property Path | Sisk Framework",
    "keywords": "Property Path Namespace Sisk.Core.Http Assembly Sisk.Core.dll Path Gets where this listening port prefix is listening to. public string Path { get; } Property Value string"
  },
  "api/Sisk.Core.Http.ListeningPort.Port.html": {
    "href": "api/Sisk.Core.Http.ListeningPort.Port.html",
    "title": "Property Port | Sisk Framework",
    "keywords": "Property Port Namespace Sisk.Core.Http Assembly Sisk.Core.dll Port Gets the port where this listening port will refer. public ushort Port { get; } Property Value ushort"
  },
  "api/Sisk.Core.Http.ListeningPort.Secure.html": {
    "href": "api/Sisk.Core.Http.ListeningPort.Secure.html",
    "title": "Property Secure | Sisk Framework",
    "keywords": "Property Secure Namespace Sisk.Core.Http Assembly Sisk.Core.dll Secure Gets whether the server should listen to this port securely (SSL). public bool Secure { get; } Property Value bool"
  },
  "api/Sisk.Core.Http.ListeningPort.ToString.html": {
    "href": "api/Sisk.Core.Http.ListeningPort.ToString.html",
    "title": "Method ToString | Sisk Framework",
    "keywords": "Method ToString Namespace Sisk.Core.Http Assembly Sisk.Core.dll ToString() Gets an string representation of this ListeningPort. public override string ToString() Returns string ToString(bool) Gets an string representation of this ListeningPort. public string ToString(bool includePath = true) Parameters includePath bool Optional. Defines whether the path should be included in the result string. Returns string"
  },
  "api/Sisk.Core.Http.ListeningPort.TryParse.html": {
    "href": "api/Sisk.Core.Http.ListeningPort.TryParse.html",
    "title": "Method TryParse | Sisk Framework",
    "keywords": "Method TryParse Namespace Sisk.Core.Http Assembly Sisk.Core.dll TryParse(string?, IFormatProvider?, out ListeningPort) Tries to parse a string into a ListeningPort. static bool TryParse(string? s, IFormatProvider? provider, out ListeningPort result) Parameters s string The string to parse. provider IFormatProvider An object that provides culture-specific formatting information about s. result ListeningPort When this method returns, contains the result of successfully parsing s or an undefined value on failure. Returns bool"
  },
  "api/Sisk.Core.Http.ListeningPort.html": {
    "href": "api/Sisk.Core.Http.ListeningPort.html",
    "title": "Struct ListeningPort | Sisk Framework",
    "keywords": "Struct ListeningPort Namespace Sisk.Core.Http Assembly Sisk.Core.dll Provides a structure to contain a listener port for an ListeningHost instance. public readonly struct ListeningPort : IEquatable<ListeningPort>, IParsable<ListeningPort> Implements IEquatable<ListeningPort> IParsable<ListeningPort> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Examples A listener port represents an access point on the HTTP server. It consists of an indicator that it should use a secure connection (HTTPS), its hostname and port. It must start with https:// or http://, and must terminate with an /. It is represented by the syntax: [http|https]://[hostname]:[port]/ Examples: http://localhost:80/ https://subdomain.domain.net:443/ http://182.32.112.223:5251/ Constructors ListeningPort() Creates an new ListeningPort instance with default parameters. ListeningPort(bool, string, ushort) Creates an new ListeningPort instance with the specified port, secure context and hostname. ListeningPort(bool, string, ushort, string) Creates an new ListeningPort instance with the specified port, secure context, hostname and path. ListeningPort(string) Creates an new ListeningPort instance with the specified URI. ListeningPort(ushort) Creates an new ListeningPort instance with the specified port at the loopback host. ListeningPort(ushort, bool) Creates an new ListeningPort instance with the specified port and secure context at the loopback host. Properties Hostname Gets the DNS hostname pattern where this listening port will refer. IsPathRoot Gets an boolean indicating if this listening port has an non-rooted path. Path Gets where this listening port prefix is listening to. Port Gets the port where this listening port will refer. Secure Gets whether the server should listen to this port securely (SSL). Methods Equals(ListeningPort) Determines if this ListeningPort is equals to another ListeningPort. Equals(object?) Determines if another object is equals to this class instance. GetHashCode() Gets the hash code for this listening port. GetRandomPort() Gets an ListeningPort object with an random insecure port at the default loopback address. ToString() Gets an string representation of this ListeningPort. ToString(bool) Gets an string representation of this ListeningPort. Explicit Interface Implementations Parse(string, IFormatProvider?) Parses a string into a ListeningPort. TryParse(string?, IFormatProvider?, out ListeningPort) Tries to parse a string into a ListeningPort."
  },
  "api/Sisk.Core.Http.LogStream.-ctor.html": {
    "href": "api/Sisk.Core.Http.LogStream.-ctor.html",
    "title": "Constructor LogStream | Sisk Framework",
    "keywords": "Constructor LogStream Namespace Sisk.Core.Http Assembly Sisk.Core.dll LogStream() Creates an new LogStream instance with no predefined outputs. public LogStream() LogStream(TextWriter) Creates an new LogStream instance with the given TextWriter object. public LogStream(TextWriter tw) Parameters tw TextWriter The TextWriter instance which this instance will write log to. LogStream(string) Creates an new LogStream instance with the given relative or absolute file path. public LogStream(string filename) Parameters filename string The file path where this instance will write log to. LogStream(string?, TextWriter?) Creates an new LogStream instance which writes text to an file and an TextWriter. public LogStream(string? filename, TextWriter? tw) Parameters filename string The file path where this instance will write log to. tw TextWriter The text writer which this instance will write log to."
  },
  "api/Sisk.Core.Http.LogStream.Close.html": {
    "href": "api/Sisk.Core.Http.LogStream.Close.html",
    "title": "Method Close | Sisk Framework",
    "keywords": "Method Close Namespace Sisk.Core.Http Assembly Sisk.Core.dll Close() Writes all pending logs from the queue and closes all resources used by this object. public virtual void Close()"
  },
  "api/Sisk.Core.Http.LogStream.ConfigureRotatingPolicy.html": {
    "href": "api/Sisk.Core.Http.LogStream.ConfigureRotatingPolicy.html",
    "title": "Method ConfigureRotatingPolicy | Sisk Framework",
    "keywords": "Method ConfigureRotatingPolicy Namespace Sisk.Core.Http Assembly Sisk.Core.dll ConfigureRotatingPolicy(long, TimeSpan) Defines the time interval and size threshold for starting the task, and then starts the task. This method is an shortcut for calling Configure(long, TimeSpan) of this defined RotatingPolicy method. public LogStream ConfigureRotatingPolicy(long maximumSize, TimeSpan dueTime) Parameters maximumSize long The non-negative size threshold of the log file size in byte count. dueTime TimeSpan The time interval between checks. Returns LogStream Remarks The first run is performed immediately after calling this method."
  },
  "api/Sisk.Core.Http.LogStream.ConsoleOutput.html": {
    "href": "api/Sisk.Core.Http.LogStream.ConsoleOutput.html",
    "title": "Property ConsoleOutput | Sisk Framework",
    "keywords": "Property ConsoleOutput Namespace Sisk.Core.Http Assembly Sisk.Core.dll ConsoleOutput Gets a LogStream that writes its output to the Out stream. public static LogStream ConsoleOutput { get; } Property Value LogStream"
  },
  "api/Sisk.Core.Http.LogStream.Dispose.html": {
    "href": "api/Sisk.Core.Http.LogStream.Dispose.html",
    "title": "Method Dispose | Sisk Framework",
    "keywords": "Method Dispose Namespace Sisk.Core.Http Assembly Sisk.Core.dll Dispose(bool) Writes all pending logs from the queue and closes all resources used by this object. protected virtual void Dispose(bool disposing) Parameters disposing bool Dispose() Writes all pending logs from the queue and closes all resources used by this object. public void Dispose()"
  },
  "api/Sisk.Core.Http.LogStream.Disposed.html": {
    "href": "api/Sisk.Core.Http.LogStream.Disposed.html",
    "title": "Property Disposed | Sisk Framework",
    "keywords": "Property Disposed Namespace Sisk.Core.Http Assembly Sisk.Core.dll Disposed Gets an boolean indicating if this LogStream was disposed. public bool Disposed { get; } Property Value bool"
  },
  "api/Sisk.Core.Http.LogStream.Encoding.html": {
    "href": "api/Sisk.Core.Http.LogStream.Encoding.html",
    "title": "Property Encoding | Sisk Framework",
    "keywords": "Property Encoding Namespace Sisk.Core.Http Assembly Sisk.Core.dll Encoding Gets or sets the encoding used for writting data to the output file. This property is only appliable if this instance is using an file-based output. public Encoding Encoding { get; set; } Property Value Encoding"
  },
  "api/Sisk.Core.Http.LogStream.FilePath.html": {
    "href": "api/Sisk.Core.Http.LogStream.FilePath.html",
    "title": "Property FilePath | Sisk Framework",
    "keywords": "Property FilePath Namespace Sisk.Core.Http Assembly Sisk.Core.dll FilePath Gets or sets the absolute path to the file where the log is being written to. public string? FilePath { get; set; } Property Value string Remarks When setting this method, if the file directory doens't exists, it is created."
  },
  "api/Sisk.Core.Http.LogStream.Finalize.html": {
    "href": "api/Sisk.Core.Http.LogStream.Finalize.html",
    "title": "Method ~LogStream | Sisk Framework",
    "keywords": "Method ~LogStream Namespace Sisk.Core.Http Assembly Sisk.Core.dll ~LogStream() protected ~LogStream()"
  },
  "api/Sisk.Core.Http.LogStream.Flush.html": {
    "href": "api/Sisk.Core.Http.LogStream.Flush.html",
    "title": "Method Flush | Sisk Framework",
    "keywords": "Method Flush Namespace Sisk.Core.Http Assembly Sisk.Core.dll Flush() Clears the current log queue and blocks the current thread until all content is written to the underlying streams. public void Flush()"
  },
  "api/Sisk.Core.Http.LogStream.IsBuffering.html": {
    "href": "api/Sisk.Core.Http.LogStream.IsBuffering.html",
    "title": "Property IsBuffering | Sisk Framework",
    "keywords": "Property IsBuffering Namespace Sisk.Core.Http Assembly Sisk.Core.dll IsBuffering Gets an boolean indicating if this LogStream is buffering output messages to their internal message buffer. public bool IsBuffering { get; } Property Value bool"
  },
  "api/Sisk.Core.Http.LogStream.NormalizeEntries.html": {
    "href": "api/Sisk.Core.Http.LogStream.NormalizeEntries.html",
    "title": "Property NormalizeEntries | Sisk Framework",
    "keywords": "Property NormalizeEntries Namespace Sisk.Core.Http Assembly Sisk.Core.dll NormalizeEntries Gets or sets a boolean that indicates that every input must be trimmed and have their line endings normalized before being written to the output stream. public bool NormalizeEntries { get; set; } Property Value bool"
  },
  "api/Sisk.Core.Http.LogStream.Peek.html": {
    "href": "api/Sisk.Core.Http.LogStream.Peek.html",
    "title": "Method Peek | Sisk Framework",
    "keywords": "Method Peek Namespace Sisk.Core.Http Assembly Sisk.Core.dll Peek() Reads the output buffer. To use this method, it's required to set this LogStream buffering with StartBuffering(int). public string Peek() Returns string Exceptions InvalidOperationException Thrown when this LogStream is not buffering."
  },
  "api/Sisk.Core.Http.LogStream.RotatingPolicy.html": {
    "href": "api/Sisk.Core.Http.LogStream.RotatingPolicy.html",
    "title": "Property RotatingPolicy | Sisk Framework",
    "keywords": "Property RotatingPolicy Namespace Sisk.Core.Http Assembly Sisk.Core.dll RotatingPolicy Gets the defined RotatingLogPolicy for this LogStream. public RotatingLogPolicy RotatingPolicy { get; } Property Value RotatingLogPolicy"
  },
  "api/Sisk.Core.Http.LogStream.StartBuffering.html": {
    "href": "api/Sisk.Core.Http.LogStream.StartBuffering.html",
    "title": "Method StartBuffering | Sisk Framework",
    "keywords": "Method StartBuffering Namespace Sisk.Core.Http Assembly Sisk.Core.dll StartBuffering(int) Start buffering all output to an alternate stream in memory for readability with Peek() later. public void StartBuffering(int lines) Parameters lines int The amount of lines to store in the buffer."
  },
  "api/Sisk.Core.Http.LogStream.StopBuffering.html": {
    "href": "api/Sisk.Core.Http.LogStream.StopBuffering.html",
    "title": "Method StopBuffering | Sisk Framework",
    "keywords": "Method StopBuffering Namespace Sisk.Core.Http Assembly Sisk.Core.dll StopBuffering() Stops buffering output to the alternative stream. public void StopBuffering()"
  },
  "api/Sisk.Core.Http.LogStream.TextWriter.html": {
    "href": "api/Sisk.Core.Http.LogStream.TextWriter.html",
    "title": "Property TextWriter | Sisk Framework",
    "keywords": "Property TextWriter Namespace Sisk.Core.Http Assembly Sisk.Core.dll TextWriter Gets the TextWriter object where the log is being written to. public TextWriter? TextWriter { get; set; } Property Value TextWriter"
  },
  "api/Sisk.Core.Http.LogStream.WriteException.html": {
    "href": "api/Sisk.Core.Http.LogStream.WriteException.html",
    "title": "Method WriteException | Sisk Framework",
    "keywords": "Method WriteException Namespace Sisk.Core.Http Assembly Sisk.Core.dll WriteException(Exception) Writes an exception description in the log. public virtual void WriteException(Exception exp) Parameters exp Exception The exception which will be written. WriteException(Exception, string?) Writes an exception description in the log. public virtual void WriteException(Exception exp, string? extraContext = null) Parameters exp Exception The exception which will be written. extraContext string Extra context message to append to the exception message."
  },
  "api/Sisk.Core.Http.LogStream.WriteLine.html": {
    "href": "api/Sisk.Core.Http.LogStream.WriteLine.html",
    "title": "Method WriteLine | Sisk Framework",
    "keywords": "Method WriteLine Namespace Sisk.Core.Http Assembly Sisk.Core.dll WriteLine() Writes an line-break at the end of the output. public void WriteLine() WriteLine(object?) Writes the text and concats an line-break at the end into the output. public void WriteLine(object? message) Parameters message object The text that will be written in the output. WriteLine(string) Writes the text and concats an line-break at the end into the output. public void WriteLine(string message) Parameters message string The text that will be written in the output. WriteLine(string, params object?[]) Writes the text format and arguments and concats an line-break at the end into the output. public void WriteLine(string format, params object?[] args) Parameters format string The string format that represents the arguments positions. args object[] An array of objects that represents the string format slots values."
  },
  "api/Sisk.Core.Http.LogStream.WriteLineInternal.html": {
    "href": "api/Sisk.Core.Http.LogStream.WriteLineInternal.html",
    "title": "Method WriteLineInternal | Sisk Framework",
    "keywords": "Method WriteLineInternal Namespace Sisk.Core.Http Assembly Sisk.Core.dll WriteLineInternal(string) Represents the method that intercepts the line that will be written to an output log before being queued for writing. protected virtual void WriteLineInternal(string line) Parameters line string The line which will be written to the log stream."
  },
  "api/Sisk.Core.Http.LogStream.html": {
    "href": "api/Sisk.Core.Http.LogStream.html",
    "title": "Class LogStream | Sisk Framework",
    "keywords": "Class LogStream Namespace Sisk.Core.Http Assembly Sisk.Core.dll Provides a managed, asynchronous log writer which supports writing safe data to log files or text streams. public class LogStream : IDisposable Inheritance object LogStream Implements IDisposable Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors LogStream() Creates an new LogStream instance with no predefined outputs. LogStream(TextWriter) Creates an new LogStream instance with the given TextWriter object. LogStream(string) Creates an new LogStream instance with the given relative or absolute file path. LogStream(string?, TextWriter?) Creates an new LogStream instance which writes text to an file and an TextWriter. Properties ConsoleOutput Gets a LogStream that writes its output to the Out stream. Disposed Gets an boolean indicating if this LogStream was disposed. Encoding Gets or sets the encoding used for writting data to the output file. This property is only appliable if this instance is using an file-based output. FilePath Gets or sets the absolute path to the file where the log is being written to. IsBuffering Gets an boolean indicating if this LogStream is buffering output messages to their internal message buffer. NormalizeEntries Gets or sets a boolean that indicates that every input must be trimmed and have their line endings normalized before being written to the output stream. RotatingPolicy Gets the defined RotatingLogPolicy for this LogStream. TextWriter Gets the TextWriter object where the log is being written to. Methods Close() Writes all pending logs from the queue and closes all resources used by this object. ConfigureRotatingPolicy(long, TimeSpan) Defines the time interval and size threshold for starting the task, and then starts the task. This method is an shortcut for calling Configure(long, TimeSpan) of this defined RotatingPolicy method. Dispose() Writes all pending logs from the queue and closes all resources used by this object. Dispose(bool) Writes all pending logs from the queue and closes all resources used by this object. ~LogStream() Flush() Clears the current log queue and blocks the current thread until all content is written to the underlying streams. Peek() Reads the output buffer. To use this method, it's required to set this LogStream buffering with StartBuffering(int). StartBuffering(int) Start buffering all output to an alternate stream in memory for readability with Peek() later. StopBuffering() Stops buffering output to the alternative stream. WriteException(Exception) Writes an exception description in the log. WriteException(Exception, string?) Writes an exception description in the log. WriteLine() Writes an line-break at the end of the output. WriteLine(object?) Writes the text and concats an line-break at the end into the output. WriteLine(string) Writes the text and concats an line-break at the end into the output. WriteLine(string, params object?[]) Writes the text format and arguments and concats an line-break at the end into the output. WriteLineInternal(string) Represents the method that intercepts the line that will be written to an output log before being queued for writing."
  },
  "api/Sisk.Core.Http.RequestListenAction.html": {
    "href": "api/Sisk.Core.Http.RequestListenAction.html",
    "title": "Enum RequestListenAction | Sisk Framework",
    "keywords": "Enum RequestListenAction Namespace Sisk.Core.Http Assembly Sisk.Core.dll Represents the HTTP server action when receiving an request. public enum RequestListenAction Fields Accept = 1 The server must accept and route the request. Drop = 2 The server must reject the request and close the connection with the client."
  },
  "api/Sisk.Core.Http.RotatingLogPolicy.-ctor.html": {
    "href": "api/Sisk.Core.Http.RotatingLogPolicy.-ctor.html",
    "title": "Constructor RotatingLogPolicy | Sisk Framework",
    "keywords": "Constructor RotatingLogPolicy Namespace Sisk.Core.Http Assembly Sisk.Core.dll RotatingLogPolicy(LogStream) Creates an new RotatingLogPolicy instance with the given LogStream object to watch. public RotatingLogPolicy(LogStream ls) Parameters ls LogStream"
  },
  "api/Sisk.Core.Http.RotatingLogPolicy.Configure.html": {
    "href": "api/Sisk.Core.Http.RotatingLogPolicy.Configure.html",
    "title": "Method Configure | Sisk Framework",
    "keywords": "Method Configure Namespace Sisk.Core.Http Assembly Sisk.Core.dll Configure(long, TimeSpan) Defines the time interval and size threshold for starting the task, and then starts the task. public void Configure(long maximumSize, TimeSpan due) Parameters maximumSize long The non-negative size threshold of the log file size in byte count. due TimeSpan The time interval between checks. Remarks The first run is performed immediately after calling this method."
  },
  "api/Sisk.Core.Http.RotatingLogPolicy.Dispose.html": {
    "href": "api/Sisk.Core.Http.RotatingLogPolicy.Dispose.html",
    "title": "Method Dispose | Sisk Framework",
    "keywords": "Method Dispose Namespace Sisk.Core.Http Assembly Sisk.Core.dll Dispose() public void Dispose()"
  },
  "api/Sisk.Core.Http.RotatingLogPolicy.Due.html": {
    "href": "api/Sisk.Core.Http.RotatingLogPolicy.Due.html",
    "title": "Property Due | Sisk Framework",
    "keywords": "Property Due Namespace Sisk.Core.Http Assembly Sisk.Core.dll Due Gets the time interval between checks. public TimeSpan Due { get; } Property Value TimeSpan"
  },
  "api/Sisk.Core.Http.RotatingLogPolicy.MaximumSize.html": {
    "href": "api/Sisk.Core.Http.RotatingLogPolicy.MaximumSize.html",
    "title": "Property MaximumSize | Sisk Framework",
    "keywords": "Property MaximumSize Namespace Sisk.Core.Http Assembly Sisk.Core.dll MaximumSize Gets the file size threshold in bytes for when the file will be compressed and then cleared. public long MaximumSize { get; } Property Value long"
  },
  "api/Sisk.Core.Http.RotatingLogPolicy.html": {
    "href": "api/Sisk.Core.Http.RotatingLogPolicy.html",
    "title": "Class RotatingLogPolicy | Sisk Framework",
    "keywords": "Class RotatingLogPolicy Namespace Sisk.Core.Http Assembly Sisk.Core.dll Provides a managed utility for rotating log files by their file size. public sealed class RotatingLogPolicy : IDisposable Inheritance object RotatingLogPolicy Implements IDisposable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors RotatingLogPolicy(LogStream) Creates an new RotatingLogPolicy instance with the given LogStream object to watch. Properties Due Gets the time interval between checks. MaximumSize Gets the file size threshold in bytes for when the file will be compressed and then cleared. Methods Configure(long, TimeSpan) Defines the time interval and size threshold for starting the task, and then starts the task. Dispose()"
  },
  "api/Sisk.Core.Http.Streams.EventSourceRegistrationHandler.-ctor.html": {
    "href": "api/Sisk.Core.Http.Streams.EventSourceRegistrationHandler.-ctor.html",
    "title": "Constructor EventSourceRegistrationHandler | Sisk Framework",
    "keywords": "Constructor EventSourceRegistrationHandler Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll EventSourceRegistrationHandler(object, nint) public EventSourceRegistrationHandler(object @object, nint method) Parameters object object method nint"
  },
  "api/Sisk.Core.Http.Streams.EventSourceRegistrationHandler.BeginInvoke.html": {
    "href": "api/Sisk.Core.Http.Streams.EventSourceRegistrationHandler.BeginInvoke.html",
    "title": "Method BeginInvoke | Sisk Framework",
    "keywords": "Method BeginInvoke Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll BeginInvoke(object, HttpRequestEventSource, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(object sender, HttpRequestEventSource eventSource, AsyncCallback callback, object @object) Parameters sender object eventSource HttpRequestEventSource callback AsyncCallback object object Returns IAsyncResult"
  },
  "api/Sisk.Core.Http.Streams.EventSourceRegistrationHandler.EndInvoke.html": {
    "href": "api/Sisk.Core.Http.Streams.EventSourceRegistrationHandler.EndInvoke.html",
    "title": "Method EndInvoke | Sisk Framework",
    "keywords": "Method EndInvoke Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult"
  },
  "api/Sisk.Core.Http.Streams.EventSourceRegistrationHandler.Invoke.html": {
    "href": "api/Sisk.Core.Http.Streams.EventSourceRegistrationHandler.Invoke.html",
    "title": "Method Invoke | Sisk Framework",
    "keywords": "Method Invoke Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Invoke(object, HttpRequestEventSource) public virtual void Invoke(object sender, HttpRequestEventSource eventSource) Parameters sender object eventSource HttpRequestEventSource"
  },
  "api/Sisk.Core.Http.Streams.EventSourceRegistrationHandler.html": {
    "href": "api/Sisk.Core.Http.Streams.EventSourceRegistrationHandler.html",
    "title": "Delegate EventSourceRegistrationHandler | Sisk Framework",
    "keywords": "Delegate EventSourceRegistrationHandler Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Represents an function that is called when an HttpEventSourceCollection registers an new event source connection. public delegate void EventSourceRegistrationHandler(object sender, HttpRequestEventSource eventSource) Parameters sender object Represents the caller HttpEventSourceCollection object. eventSource HttpRequestEventSource Represents the registered HttpRequestEventSource event source connection. Constructors EventSourceRegistrationHandler(object, nint) Methods BeginInvoke(object, HttpRequestEventSource, AsyncCallback, object) EndInvoke(IAsyncResult) Invoke(object, HttpRequestEventSource)"
  },
  "api/Sisk.Core.Http.Streams.EventSourceUnregistrationHandler.-ctor.html": {
    "href": "api/Sisk.Core.Http.Streams.EventSourceUnregistrationHandler.-ctor.html",
    "title": "Constructor EventSourceUnregistrationHandler | Sisk Framework",
    "keywords": "Constructor EventSourceUnregistrationHandler Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll EventSourceUnregistrationHandler(object, nint) public EventSourceUnregistrationHandler(object @object, nint method) Parameters object object method nint"
  },
  "api/Sisk.Core.Http.Streams.EventSourceUnregistrationHandler.BeginInvoke.html": {
    "href": "api/Sisk.Core.Http.Streams.EventSourceUnregistrationHandler.BeginInvoke.html",
    "title": "Method BeginInvoke | Sisk Framework",
    "keywords": "Method BeginInvoke Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll BeginInvoke(object, HttpRequestEventSource, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(object sender, HttpRequestEventSource eventSource, AsyncCallback callback, object @object) Parameters sender object eventSource HttpRequestEventSource callback AsyncCallback object object Returns IAsyncResult"
  },
  "api/Sisk.Core.Http.Streams.EventSourceUnregistrationHandler.EndInvoke.html": {
    "href": "api/Sisk.Core.Http.Streams.EventSourceUnregistrationHandler.EndInvoke.html",
    "title": "Method EndInvoke | Sisk Framework",
    "keywords": "Method EndInvoke Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult"
  },
  "api/Sisk.Core.Http.Streams.EventSourceUnregistrationHandler.Invoke.html": {
    "href": "api/Sisk.Core.Http.Streams.EventSourceUnregistrationHandler.Invoke.html",
    "title": "Method Invoke | Sisk Framework",
    "keywords": "Method Invoke Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Invoke(object, HttpRequestEventSource) public virtual void Invoke(object sender, HttpRequestEventSource eventSource) Parameters sender object eventSource HttpRequestEventSource"
  },
  "api/Sisk.Core.Http.Streams.EventSourceUnregistrationHandler.html": {
    "href": "api/Sisk.Core.Http.Streams.EventSourceUnregistrationHandler.html",
    "title": "Delegate EventSourceUnregistrationHandler | Sisk Framework",
    "keywords": "Delegate EventSourceUnregistrationHandler Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Represents an function that is called when an HttpEventSourceCollection is removed and had their connection closed. public delegate void EventSourceUnregistrationHandler(object sender, HttpRequestEventSource eventSource) Parameters sender object Represents the caller HttpEventSourceCollection object. eventSource HttpRequestEventSource Represents the closed HttpRequestEventSource event source connection. Constructors EventSourceUnregistrationHandler(object, nint) Methods BeginInvoke(object, HttpRequestEventSource, AsyncCallback, object) EndInvoke(IAsyncResult) Invoke(object, HttpRequestEventSource)"
  },
  "api/Sisk.Core.Http.Streams.HttpEventSourceCollection.ActiveConnections.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpEventSourceCollection.ActiveConnections.html",
    "title": "Property ActiveConnections | Sisk Framework",
    "keywords": "Property ActiveConnections Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll ActiveConnections Gets an number indicating the amount of active event source connections. public int ActiveConnections { get; } Property Value int"
  },
  "api/Sisk.Core.Http.Streams.HttpEventSourceCollection.All.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpEventSourceCollection.All.html",
    "title": "Method All | Sisk Framework",
    "keywords": "Method All Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll All() Gets all actives HttpRequestEventSource instances. public HttpRequestEventSource[] All() Returns HttpRequestEventSource[]"
  },
  "api/Sisk.Core.Http.Streams.HttpEventSourceCollection.DropAll.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpEventSourceCollection.DropAll.html",
    "title": "Method DropAll | Sisk Framework",
    "keywords": "Method DropAll Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll DropAll() Closes and disposes all registered and active HttpRequestEventSource in this collections. public void DropAll()"
  },
  "api/Sisk.Core.Http.Streams.HttpEventSourceCollection.Find.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpEventSourceCollection.Find.html",
    "title": "Method Find | Sisk Framework",
    "keywords": "Method Find Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Find(Func<string, bool>) Gets all actives HttpRequestEventSource instances that matches their identifier predicate. public HttpRequestEventSource[] Find(Func<string, bool> predicate) Parameters predicate Func<string, bool> The expression on the an non-empty event source identifier. Returns HttpRequestEventSource[]"
  },
  "api/Sisk.Core.Http.Streams.HttpEventSourceCollection.GetByIdentifier.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpEventSourceCollection.GetByIdentifier.html",
    "title": "Method GetByIdentifier | Sisk Framework",
    "keywords": "Method GetByIdentifier Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll GetByIdentifier(string) Gets the event source connection for the specified identifier. public HttpRequestEventSource? GetByIdentifier(string identifier) Parameters identifier string The event source identifier. Returns HttpRequestEventSource"
  },
  "api/Sisk.Core.Http.Streams.HttpEventSourceCollection.OnEventSourceRegistered.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpEventSourceCollection.OnEventSourceRegistered.html",
    "title": "Event OnEventSourceRegistered | Sisk Framework",
    "keywords": "Event OnEventSourceRegistered Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Represents an event that is fired when an HttpRequestEventSource is registered in this collection. public event EventSourceRegistrationHandler? OnEventSourceRegistered Returns EventSourceRegistrationHandler Represents an event that is fired when an is registered in this collection."
  },
  "api/Sisk.Core.Http.Streams.HttpEventSourceCollection.OnEventSourceUnregistration.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpEventSourceCollection.OnEventSourceUnregistration.html",
    "title": "Event OnEventSourceUnregistration | Sisk Framework",
    "keywords": "Event OnEventSourceUnregistration Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Represents an event that is fired when an HttpRequestEventSource is closed and removed from this collection. public event EventSourceUnregistrationHandler? OnEventSourceUnregistration Returns EventSourceUnregistrationHandler Represents an event that is fired when an is closed and removed from this collection."
  },
  "api/Sisk.Core.Http.Streams.HttpEventSourceCollection.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpEventSourceCollection.html",
    "title": "Class HttpEventSourceCollection | Sisk Framework",
    "keywords": "Class HttpEventSourceCollection Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Provides a managed object to manage HttpRequestEventSource connections. public sealed class HttpEventSourceCollection Inheritance object HttpEventSourceCollection Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties ActiveConnections Gets an number indicating the amount of active event source connections. Methods All() Gets all actives HttpRequestEventSource instances. DropAll() Closes and disposes all registered and active HttpRequestEventSource in this collections. Find(Func<string, bool>) Gets all actives HttpRequestEventSource instances that matches their identifier predicate. GetByIdentifier(string) Gets the event source connection for the specified identifier. Events OnEventSourceRegistered Represents an event that is fired when an HttpRequestEventSource is registered in this collection. OnEventSourceUnregistration Represents an event that is fired when an HttpRequestEventSource is closed and removed from this collection."
  },
  "api/Sisk.Core.Http.Streams.HttpRequestEventSource.AppendHeader.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpRequestEventSource.AppendHeader.html",
    "title": "Method AppendHeader | Sisk Framework",
    "keywords": "Method AppendHeader Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll AppendHeader(string, string) Sends an header to the streaming context. public void AppendHeader(string name, string value) Parameters name string The header name. value string The header value."
  },
  "api/Sisk.Core.Http.Streams.HttpRequestEventSource.Cancel.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpRequestEventSource.Cancel.html",
    "title": "Method Cancel | Sisk Framework",
    "keywords": "Method Cancel Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Cancel() Cancels the sending queue from sending pending messages and clears the queue. public void Cancel()"
  },
  "api/Sisk.Core.Http.Streams.HttpRequestEventSource.Close.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpRequestEventSource.Close.html",
    "title": "Method Close | Sisk Framework",
    "keywords": "Method Close Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Close() Closes the event listener and it's connection. public HttpResponse Close() Returns HttpResponse"
  },
  "api/Sisk.Core.Http.Streams.HttpRequestEventSource.Dispose.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpRequestEventSource.Dispose.html",
    "title": "Method Dispose | Sisk Framework",
    "keywords": "Method Dispose Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Dispose() Flushes and releases the used resources of this class instance. public void Dispose()"
  },
  "api/Sisk.Core.Http.Streams.HttpRequestEventSource.HttpRequest.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpRequestEventSource.HttpRequest.html",
    "title": "Property HttpRequest | Sisk Framework",
    "keywords": "Property HttpRequest Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll HttpRequest Gets the HttpRequest object which created this Event Source instance. public HttpRequest HttpRequest { get; } Property Value HttpRequest"
  },
  "api/Sisk.Core.Http.Streams.HttpRequestEventSource.Identifier.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpRequestEventSource.Identifier.html",
    "title": "Property Identifier | Sisk Framework",
    "keywords": "Property Identifier Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Identifier Gets an unique identifier label to this EventStream connection, useful for finding this connection's reference later. public string? Identifier { get; } Property Value string"
  },
  "api/Sisk.Core.Http.Streams.HttpRequestEventSource.IsActive.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpRequestEventSource.IsActive.html",
    "title": "Property IsActive | Sisk Framework",
    "keywords": "Property IsActive Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll IsActive Gets an boolean indicating if this connection is open and this instance can send messages. public bool IsActive { get; } Property Value bool"
  },
  "api/Sisk.Core.Http.Streams.HttpRequestEventSource.KeepAlive.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpRequestEventSource.KeepAlive.html",
    "title": "Method KeepAlive | Sisk Framework",
    "keywords": "Method KeepAlive Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll KeepAlive() Asynchronously waits for the connection to close before continuing execution. This method is released when either the client or the server reaches an sending failure. public void KeepAlive()"
  },
  "api/Sisk.Core.Http.Streams.HttpRequestEventSource.PingPolicy.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpRequestEventSource.PingPolicy.html",
    "title": "Property PingPolicy | Sisk Framework",
    "keywords": "Property PingPolicy Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll PingPolicy Gets the HttpStreamPingPolicy for this HTTP event source connection. public HttpStreamPingPolicy PingPolicy { get; } Property Value HttpStreamPingPolicy"
  },
  "api/Sisk.Core.Http.Streams.HttpRequestEventSource.Send.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpRequestEventSource.Send.html",
    "title": "Method Send | Sisk Framework",
    "keywords": "Method Send Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Send(string) Writes a event message with their data to the event listener and returns an boolean indicating if the message was delivered to the client. public bool Send(string data) Parameters data string The message text. Returns bool Send(object?) Writes a event message with their data to the event listener and returns an boolean indicating if the message was delivered to the client. public bool Send(object? data) Parameters data object The message object. Returns bool"
  },
  "api/Sisk.Core.Http.Streams.HttpRequestEventSource.SentContentLength.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpRequestEventSource.SentContentLength.html",
    "title": "Property SentContentLength | Sisk Framework",
    "keywords": "Property SentContentLength Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll SentContentLength Gets an integer indicating the total bytes sent by this instance to the client. public int SentContentLength { get; } Property Value int"
  },
  "api/Sisk.Core.Http.Streams.HttpRequestEventSource.WaitForFail.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpRequestEventSource.WaitForFail.html",
    "title": "Method WaitForFail | Sisk Framework",
    "keywords": "Method WaitForFail Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll WaitForFail(TimeSpan) Asynchronously waits for the connection to close before continuing execution with an maximum keep alive timeout. This method is released when either the client or the server reaches an sending failure. public void WaitForFail(TimeSpan maximumIdleTolerance) Parameters maximumIdleTolerance TimeSpan The maximum timeout interval for an idle connection to automatically release this method."
  },
  "api/Sisk.Core.Http.Streams.HttpRequestEventSource.WithPing.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpRequestEventSource.WithPing.html",
    "title": "Method WithPing | Sisk Framework",
    "keywords": "Method WithPing Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll WithPing(Action<HttpStreamPingPolicy>) Configures the ping policy for this instance of HTTP Event Source. public void WithPing(Action<HttpStreamPingPolicy> act) Parameters act Action<HttpStreamPingPolicy> The method that runs on the ping policy for this HTTP Event Source."
  },
  "api/Sisk.Core.Http.Streams.HttpRequestEventSource.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpRequestEventSource.html",
    "title": "Class HttpRequestEventSource | Sisk Framework",
    "keywords": "Class HttpRequestEventSource Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll An HttpRequestEventSource instance opens a persistent connection to the request, which sends events in text/event-stream format. public sealed class HttpRequestEventSource : IDisposable Inheritance object HttpRequestEventSource Implements IDisposable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties HttpRequest Gets the HttpRequest object which created this Event Source instance. Identifier Gets an unique identifier label to this EventStream connection, useful for finding this connection's reference later. IsActive Gets an boolean indicating if this connection is open and this instance can send messages. PingPolicy Gets the HttpStreamPingPolicy for this HTTP event source connection. SentContentLength Gets an integer indicating the total bytes sent by this instance to the client. Methods AppendHeader(string, string) Sends an header to the streaming context. Cancel() Cancels the sending queue from sending pending messages and clears the queue. Close() Closes the event listener and it's connection. Dispose() Flushes and releases the used resources of this class instance. KeepAlive() Asynchronously waits for the connection to close before continuing execution. This method is released when either the client or the server reaches an sending failure. Send(object?) Writes a event message with their data to the event listener and returns an boolean indicating if the message was delivered to the client. Send(string) Writes a event message with their data to the event listener and returns an boolean indicating if the message was delivered to the client. WaitForFail(TimeSpan) Asynchronously waits for the connection to close before continuing execution with an maximum keep alive timeout. This method is released when either the client or the server reaches an sending failure. WithPing(Action<HttpStreamPingPolicy>) Configures the ping policy for this instance of HTTP Event Source."
  },
  "api/Sisk.Core.Http.Streams.HttpResponseStream.Close.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpResponseStream.Close.html",
    "title": "Method Close | Sisk Framework",
    "keywords": "Method Close Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Close() Closes this HTTP response stream connection between the server and the client and returns an empty HttpResponse to finish the HTTP server context. public HttpResponse Close() Returns HttpResponse"
  },
  "api/Sisk.Core.Http.Streams.HttpResponseStream.ResponseStream.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpResponseStream.ResponseStream.html",
    "title": "Property ResponseStream | Sisk Framework",
    "keywords": "Property ResponseStream Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll ResponseStream Gets the Stream that represents the HTTP response output stream. public Stream ResponseStream { get; } Property Value Stream"
  },
  "api/Sisk.Core.Http.Streams.HttpResponseStream.SendChunked.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpResponseStream.SendChunked.html",
    "title": "Property SendChunked | Sisk Framework",
    "keywords": "Property SendChunked Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll SendChunked Gets or sets whether this HTTP response stream should use chunked transfer encoding. public bool SendChunked { get; set; } Property Value bool"
  },
  "api/Sisk.Core.Http.Streams.HttpResponseStream.SetContentLength.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpResponseStream.SetContentLength.html",
    "title": "Method SetContentLength | Sisk Framework",
    "keywords": "Method SetContentLength Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll SetContentLength(long) Sets the Content-Length header of this response stream. If this response stream is using chunked transfer encoding, this method will do nothing. public void SetContentLength(long contentLength) Parameters contentLength long The length in bytes of the content stream."
  },
  "api/Sisk.Core.Http.Streams.HttpResponseStream.SetCookie.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpResponseStream.SetCookie.html",
    "title": "Method SetCookie | Sisk Framework",
    "keywords": "Method SetCookie Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll SetCookie(Cookie) Sets a cookie and sends it in the response to be set by the client. public void SetCookie(Cookie cookie) Parameters cookie Cookie The cookie object. SetCookie(string, string) Sets a cookie and sends it in the response to be set by the client. public void SetCookie(string name, string value) Parameters name string The cookie name. value string The cookie value. SetCookie(string, string, DateTime?, TimeSpan?, string?, string?, bool?, bool?, string?) Sets a cookie and sends it in the response to be set by the client. public void SetCookie(string name, string value, DateTime? expires = null, TimeSpan? maxAge = null, string? domain = null, string? path = null, bool? secure = null, bool? httpOnly = null, string? sameSite = null) Parameters name string The cookie name. value string The cookie value. expires DateTime? The cookie expirity date. maxAge TimeSpan? The cookie max duration after being set. domain string The domain where the cookie will be valid. path string The path where the cookie will be valid. secure bool? Determines if the cookie will only be stored in an secure context. httpOnly bool? Determines if the cookie will be only available in the HTTP context. sameSite string The cookie SameSite parameter."
  },
  "api/Sisk.Core.Http.Streams.HttpResponseStream.SetHeader.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpResponseStream.SetHeader.html",
    "title": "Method SetHeader | Sisk Framework",
    "keywords": "Method SetHeader Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll SetHeader(string, object?) Sets the specific HTTP header into this response stream. public void SetHeader(string headerName, object? value) Parameters headerName string The HTTP header name. value object The HTTP header value. Remarks Headers are sent immediately, along with the HTTP response code, after starting to send content or closing this stream."
  },
  "api/Sisk.Core.Http.Streams.HttpResponseStream.SetStatus.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpResponseStream.SetStatus.html",
    "title": "Method SetStatus | Sisk Framework",
    "keywords": "Method SetStatus Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll SetStatus(int) Sets the HTTP status code for this response stream. public void SetStatus(int httpStatusCode) Parameters httpStatusCode int The HTTP status code. SetStatus(HttpStatusCode) Sets the HTTP status code for this response stream. public void SetStatus(HttpStatusCode statusCode) Parameters statusCode HttpStatusCode The HTTP status code. SetStatus(HttpStatusInformation) Sets the HTTP status code and description for this response stream. public void SetStatus(HttpStatusInformation statusCode) Parameters statusCode HttpStatusInformation The custom HTTP status code information."
  },
  "api/Sisk.Core.Http.Streams.HttpResponseStream.Write.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpResponseStream.Write.html",
    "title": "Method Write | Sisk Framework",
    "keywords": "Method Write Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Write(ReadOnlySpan<byte>) Writes an sequence of bytes to the HTTP response stream. public void Write(ReadOnlySpan<byte> buffer) Parameters buffer ReadOnlySpan<byte> The read only memory that includes the buffer which will be written to the HTTP response. Write(byte[]) Writes an sequence of bytes to the HTTP response stream. public void Write(byte[] buffer) Parameters buffer byte[] The byte array that includes the buffer which will be written to the HTTP response."
  },
  "api/Sisk.Core.Http.Streams.HttpResponseStream.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpResponseStream.html",
    "title": "Class HttpResponseStream | Sisk Framework",
    "keywords": "Class HttpResponseStream Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Represents a way to manage HTTP requests with their output streams, without relying on synchronous content. public sealed class HttpResponseStream Inheritance object HttpResponseStream Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties ResponseStream Gets the Stream that represents the HTTP response output stream. SendChunked Gets or sets whether this HTTP response stream should use chunked transfer encoding. Methods Close() Closes this HTTP response stream connection between the server and the client and returns an empty HttpResponse to finish the HTTP server context. SetContentLength(long) Sets the Content-Length header of this response stream. If this response stream is using chunked transfer encoding, this method will do nothing. SetCookie(Cookie) Sets a cookie and sends it in the response to be set by the client. SetCookie(string, string) Sets a cookie and sends it in the response to be set by the client. SetCookie(string, string, DateTime?, TimeSpan?, string?, string?, bool?, bool?, string?) Sets a cookie and sends it in the response to be set by the client. SetHeader(string, object?) Sets the specific HTTP header into this response stream. SetStatus(HttpStatusInformation) Sets the HTTP status code and description for this response stream. SetStatus(int) Sets the HTTP status code for this response stream. SetStatus(HttpStatusCode) Sets the HTTP status code for this response stream. Write(byte[]) Writes an sequence of bytes to the HTTP response stream. Write(ReadOnlySpan<byte>) Writes an sequence of bytes to the HTTP response stream."
  },
  "api/Sisk.Core.Http.Streams.HttpStreamPingPolicy.DataMessage.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpStreamPingPolicy.DataMessage.html",
    "title": "Property DataMessage | Sisk Framework",
    "keywords": "Property DataMessage Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll DataMessage Gets or sets the payload message that is sent to the server as a ping message. public string DataMessage { get; set; } Property Value string"
  },
  "api/Sisk.Core.Http.Streams.HttpStreamPingPolicy.Interval.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpStreamPingPolicy.Interval.html",
    "title": "Property Interval | Sisk Framework",
    "keywords": "Property Interval Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Interval Gets or sets the sending interval for each ping message. public TimeSpan Interval { get; set; } Property Value TimeSpan"
  },
  "api/Sisk.Core.Http.Streams.HttpStreamPingPolicy.Start.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpStreamPingPolicy.Start.html",
    "title": "Method Start | Sisk Framework",
    "keywords": "Method Start Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Start() Starts sending periodic pings to the client. public void Start() Start(string, TimeSpan) Configures and starts sending periodic pings to the client. public void Start(string dataMessage, TimeSpan interval) Parameters dataMessage string The payload message that is sent to the server as a ping message. interval TimeSpan The sending interval for each ping message."
  },
  "api/Sisk.Core.Http.Streams.HttpStreamPingPolicy.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpStreamPingPolicy.html",
    "title": "Class HttpStreamPingPolicy | Sisk Framework",
    "keywords": "Class HttpStreamPingPolicy Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Provides an automatic ping sender for HTTP Event Source connections. public sealed class HttpStreamPingPolicy Inheritance object HttpStreamPingPolicy Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties DataMessage Gets or sets the payload message that is sent to the server as a ping message. Interval Gets or sets the sending interval for each ping message. Methods Start() Starts sending periodic pings to the client. Start(string, TimeSpan) Configures and starts sending periodic pings to the client."
  },
  "api/Sisk.Core.Http.Streams.HttpWebSocket.Close.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpWebSocket.Close.html",
    "title": "Method Close | Sisk Framework",
    "keywords": "Method Close Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Close() Closes the connection between the client and the server and returns an HTTP response indicating that the connection has been terminated. This method will not throw an exception if the connection is already closed. public HttpResponse Close() Returns HttpResponse"
  },
  "api/Sisk.Core.Http.Streams.HttpWebSocket.HttpRequest.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpWebSocket.HttpRequest.html",
    "title": "Property HttpRequest | Sisk Framework",
    "keywords": "Property HttpRequest Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll HttpRequest Gets the HttpRequest object which created this Web Socket instance. public HttpRequest HttpRequest { get; } Property Value HttpRequest"
  },
  "api/Sisk.Core.Http.Streams.HttpWebSocket.Identifier.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpWebSocket.Identifier.html",
    "title": "Property Identifier | Sisk Framework",
    "keywords": "Property Identifier Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Identifier Gets an unique identifier label to this Web Socket connection, useful for finding this connection's reference later. public string? Identifier { get; } Property Value string"
  },
  "api/Sisk.Core.Http.Streams.HttpWebSocket.IsClosed.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpWebSocket.IsClosed.html",
    "title": "Property IsClosed | Sisk Framework",
    "keywords": "Property IsClosed Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll IsClosed Gets an boolean indicating if this Web Socket connection is closed. public bool IsClosed { get; } Property Value bool"
  },
  "api/Sisk.Core.Http.Streams.HttpWebSocket.MaxAttempts.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpWebSocket.MaxAttempts.html",
    "title": "Property MaxAttempts | Sisk Framework",
    "keywords": "Property MaxAttempts Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll MaxAttempts Gets or sets the maximum number of attempts to send a failed message before the server closes the connection. Set it to -1 to don't close the connection on failed attempts. public int MaxAttempts { get; set; } Property Value int"
  },
  "api/Sisk.Core.Http.Streams.HttpWebSocket.OnReceive.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpWebSocket.OnReceive.html",
    "title": "Event OnReceive | Sisk Framework",
    "keywords": "Event OnReceive Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Represents the event which is called when this web socket receives an message from remote origin. public event WebSocketMessageReceivedEventHandler? OnReceive Returns WebSocketMessageReceivedEventHandler Represents the event which is called when this web socket receives an message from remote origin."
  },
  "api/Sisk.Core.Http.Streams.HttpWebSocket.PingPolicy.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpWebSocket.PingPolicy.html",
    "title": "Property PingPolicy | Sisk Framework",
    "keywords": "Property PingPolicy Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll PingPolicy Gets the HttpStreamPingPolicy for this HTTP web socket connection. public HttpStreamPingPolicy PingPolicy { get; } Property Value HttpStreamPingPolicy"
  },
  "api/Sisk.Core.Http.Streams.HttpWebSocket.Send.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpWebSocket.Send.html",
    "title": "Method Send | Sisk Framework",
    "keywords": "Method Send Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Send(object) Sends an text message to the remote point. public bool Send(object message) Parameters message object The target message which will be as an encoded UTF-8 string. Returns bool Send(string) Sends an text message to the remote point. public bool Send(string message) Parameters message string The target message which will be as an encoded using the request preferred encoding. Returns bool Send(byte[]) Sends an binary message to the remote point. public bool Send(byte[] buffer) Parameters buffer byte[] The target byte array. Returns bool Send(byte[], int, int) Sends an binary message to the remote point. public bool Send(byte[] buffer, int start, int length) Parameters buffer byte[] The target byte array. start int The index at which to begin the memory. length int The number of items in the memory. Returns bool Send(ReadOnlyMemory<byte>) Sends an binary message to the remote point. public bool Send(ReadOnlyMemory<byte> buffer) Parameters buffer ReadOnlyMemory<byte> The target byte memory. Returns bool"
  },
  "api/Sisk.Core.Http.Streams.HttpWebSocket.SendAsync.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpWebSocket.SendAsync.html",
    "title": "Method SendAsync | Sisk Framework",
    "keywords": "Method SendAsync Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll SendAsync(object) Asynchronously sends an message to the remote point. public Task<bool> SendAsync(object message) Parameters message object The target message which will be as an encoded UTF-8 string. Returns Task<bool> SendAsync(string) Asynchronously sends an text message to the remote point. public Task<bool> SendAsync(string message) Parameters message string The target message which will be as an encoded UTF-8 string. Returns Task<bool> SendAsync(byte[]) Asynchronously sends an binary message to the remote point. public Task<bool> SendAsync(byte[] buffer) Parameters buffer byte[] The target message which will be as an encoded UTF-8 string. Returns Task<bool>"
  },
  "api/Sisk.Core.Http.Streams.HttpWebSocket.State.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpWebSocket.State.html",
    "title": "Property State | Sisk Framework",
    "keywords": "Property State Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll State Gets or sets an object linked with this WebSocket session. public object? State { get; set; } Property Value object"
  },
  "api/Sisk.Core.Http.Streams.HttpWebSocket.WaitForClose.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpWebSocket.WaitForClose.html",
    "title": "Method WaitForClose | Sisk Framework",
    "keywords": "Method WaitForClose Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll WaitForClose(TimeSpan) Blocks the current call stack until the connection is terminated by the client or the server, limited to the maximum timeout. public void WaitForClose(TimeSpan timeout) Parameters timeout TimeSpan Defines the timeout timer before the connection expires without any message. WaitForClose() Blocks the current call stack until the connection is terminated by either the client or the server. public void WaitForClose()"
  },
  "api/Sisk.Core.Http.Streams.HttpWebSocket.WaitNext.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpWebSocket.WaitNext.html",
    "title": "Method WaitNext | Sisk Framework",
    "keywords": "Method WaitNext Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll WaitNext() Blocks the current thread and waits the next incoming message from this web socket instance. public WebSocketMessage? WaitNext() Returns WebSocketMessage Remarks Null is returned if a connection error is thrown. WaitNext(TimeSpan) Blocks the current thread and waits the next incoming message from this web socket instance within the maximum defined timeout. public WebSocketMessage? WaitNext(TimeSpan timeout) Parameters timeout TimeSpan The maximum time to wait until the next message. Returns WebSocketMessage Remarks Null is returned if a connection error is thrown."
  },
  "api/Sisk.Core.Http.Streams.HttpWebSocket.WaitTimeout.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpWebSocket.WaitTimeout.html",
    "title": "Property WaitTimeout | Sisk Framework",
    "keywords": "Property WaitTimeout Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll WaitTimeout Gets or sets the maximum wait time for synchronous listener methods like WaitNext(). public TimeSpan WaitTimeout { get; set; } Property Value TimeSpan"
  },
  "api/Sisk.Core.Http.Streams.HttpWebSocket.WithPing.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpWebSocket.WithPing.html",
    "title": "Method WithPing | Sisk Framework",
    "keywords": "Method WithPing Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll WithPing(Action<HttpStreamPingPolicy>) Configures the ping policy for this instance of HTTP Web Socket. public HttpWebSocket WithPing(Action<HttpStreamPingPolicy> act) Parameters act Action<HttpStreamPingPolicy> The method that runs on the ping policy for this HTTP Web Socket. Returns HttpWebSocket WithPing(string, TimeSpan) Configures the ping policy for this instance of HTTP Web Socket. public HttpWebSocket WithPing(string probeMessage, TimeSpan interval) Parameters probeMessage string The payload/probe message that is sent to the client. interval TimeSpan The sending interval for each probe message. Returns HttpWebSocket"
  },
  "api/Sisk.Core.Http.Streams.HttpWebSocket.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpWebSocket.html",
    "title": "Class HttpWebSocket | Sisk Framework",
    "keywords": "Class HttpWebSocket Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Provides an persistent bi-directional socket between the client and the HTTP server. public sealed class HttpWebSocket Inheritance object HttpWebSocket Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties HttpRequest Gets the HttpRequest object which created this Web Socket instance. Identifier Gets an unique identifier label to this Web Socket connection, useful for finding this connection's reference later. IsClosed Gets an boolean indicating if this Web Socket connection is closed. MaxAttempts Gets or sets the maximum number of attempts to send a failed message before the server closes the connection. Set it to -1 to don't close the connection on failed attempts. PingPolicy Gets the HttpStreamPingPolicy for this HTTP web socket connection. State Gets or sets an object linked with this WebSocket session. WaitTimeout Gets or sets the maximum wait time for synchronous listener methods like WaitNext(). Methods Close() Closes the connection between the client and the server and returns an HTTP response indicating that the connection has been terminated. This method will not throw an exception if the connection is already closed. Send(byte[]) Sends an binary message to the remote point. Send(byte[], int, int) Sends an binary message to the remote point. Send(object) Sends an text message to the remote point. Send(ReadOnlyMemory<byte>) Sends an binary message to the remote point. Send(string) Sends an text message to the remote point. SendAsync(byte[]) Asynchronously sends an binary message to the remote point. SendAsync(object) Asynchronously sends an message to the remote point. SendAsync(string) Asynchronously sends an text message to the remote point. WaitForClose() Blocks the current call stack until the connection is terminated by either the client or the server. WaitForClose(TimeSpan) Blocks the current call stack until the connection is terminated by the client or the server, limited to the maximum timeout. WaitNext() Blocks the current thread and waits the next incoming message from this web socket instance. WaitNext(TimeSpan) Blocks the current thread and waits the next incoming message from this web socket instance within the maximum defined timeout. WithPing(Action<HttpStreamPingPolicy>) Configures the ping policy for this instance of HTTP Web Socket. WithPing(string, TimeSpan) Configures the ping policy for this instance of HTTP Web Socket. Events OnReceive Represents the event which is called when this web socket receives an message from remote origin."
  },
  "api/Sisk.Core.Http.Streams.HttpWebSocketConnectionCollection.ActiveConnections.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpWebSocketConnectionCollection.ActiveConnections.html",
    "title": "Property ActiveConnections | Sisk Framework",
    "keywords": "Property ActiveConnections Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll ActiveConnections Gets an number indicating the amount of active web socket connections. public int ActiveConnections { get; } Property Value int"
  },
  "api/Sisk.Core.Http.Streams.HttpWebSocketConnectionCollection.All.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpWebSocketConnectionCollection.All.html",
    "title": "Method All | Sisk Framework",
    "keywords": "Method All Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll All() Gets all actives HttpWebSocket instances. public HttpWebSocket[] All() Returns HttpWebSocket[]"
  },
  "api/Sisk.Core.Http.Streams.HttpWebSocketConnectionCollection.DropAll.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpWebSocketConnectionCollection.DropAll.html",
    "title": "Method DropAll | Sisk Framework",
    "keywords": "Method DropAll Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll DropAll() Closes all registered and active HttpWebSocket in this collections. public void DropAll()"
  },
  "api/Sisk.Core.Http.Streams.HttpWebSocketConnectionCollection.Find.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpWebSocketConnectionCollection.Find.html",
    "title": "Method Find | Sisk Framework",
    "keywords": "Method Find Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Find(Func<string, bool>) Gets all actives HttpWebSocket instances that matches their identifier predicate. public HttpWebSocket[] Find(Func<string, bool> predicate) Parameters predicate Func<string, bool> The expression on the an non-empty Web Socket identifier. Returns HttpWebSocket[]"
  },
  "api/Sisk.Core.Http.Streams.HttpWebSocketConnectionCollection.GetByIdentifier.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpWebSocketConnectionCollection.GetByIdentifier.html",
    "title": "Method GetByIdentifier | Sisk Framework",
    "keywords": "Method GetByIdentifier Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll GetByIdentifier(string) Gets the Web Sockect connection for the specified identifier. public HttpWebSocket? GetByIdentifier(string identifier) Parameters identifier string The Web Socket identifier. Returns HttpWebSocket"
  },
  "api/Sisk.Core.Http.Streams.HttpWebSocketConnectionCollection.OnWebSocketRegister.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpWebSocketConnectionCollection.OnWebSocketRegister.html",
    "title": "Event OnWebSocketRegister | Sisk Framework",
    "keywords": "Event OnWebSocketRegister Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Represents an event that is fired when an HttpWebSocket is registered in this collection. public event WebSocketRegistrationHandler? OnWebSocketRegister Returns WebSocketRegistrationHandler Represents an event that is fired when an is registered in this collection."
  },
  "api/Sisk.Core.Http.Streams.HttpWebSocketConnectionCollection.OnWebSocketUnregister.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpWebSocketConnectionCollection.OnWebSocketUnregister.html",
    "title": "Event OnWebSocketUnregister | Sisk Framework",
    "keywords": "Event OnWebSocketUnregister Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Represents an event that is fired when an HttpWebSocket is closed and removed from this collection. public event WebSocketRegistrationHandler? OnWebSocketUnregister Returns WebSocketRegistrationHandler Represents an event that is fired when an is closed and removed from this collection."
  },
  "api/Sisk.Core.Http.Streams.HttpWebSocketConnectionCollection.html": {
    "href": "api/Sisk.Core.Http.Streams.HttpWebSocketConnectionCollection.html",
    "title": "Class HttpWebSocketConnectionCollection | Sisk Framework",
    "keywords": "Class HttpWebSocketConnectionCollection Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Provides a managed object to manage HttpWebSocket connections. public sealed class HttpWebSocketConnectionCollection Inheritance object HttpWebSocketConnectionCollection Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties ActiveConnections Gets an number indicating the amount of active web socket connections. Methods All() Gets all actives HttpWebSocket instances. DropAll() Closes all registered and active HttpWebSocket in this collections. Find(Func<string, bool>) Gets all actives HttpWebSocket instances that matches their identifier predicate. GetByIdentifier(string) Gets the Web Sockect connection for the specified identifier. Events OnWebSocketRegister Represents an event that is fired when an HttpWebSocket is registered in this collection. OnWebSocketUnregister Represents an event that is fired when an HttpWebSocket is closed and removed from this collection."
  },
  "api/Sisk.Core.Http.Streams.WebSocketMessage.GetString.html": {
    "href": "api/Sisk.Core.Http.Streams.WebSocketMessage.GetString.html",
    "title": "Method GetString | Sisk Framework",
    "keywords": "Method GetString Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll GetString(Encoding) Reads the message bytes as string using the specified encoding. public string GetString(Encoding encoding) Parameters encoding Encoding The encoding which will be used to decode the message. Returns string GetString() Reads the message bytes as string using the HTTP request encoding. public string GetString() Returns string"
  },
  "api/Sisk.Core.Http.Streams.WebSocketMessage.IsClose.html": {
    "href": "api/Sisk.Core.Http.Streams.WebSocketMessage.IsClose.html",
    "title": "Property IsClose | Sisk Framework",
    "keywords": "Property IsClose Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll IsClose Gets an boolean indicating that this message is an remote closing message. public bool IsClose { get; } Property Value bool"
  },
  "api/Sisk.Core.Http.Streams.WebSocketMessage.IsEnd.html": {
    "href": "api/Sisk.Core.Http.Streams.WebSocketMessage.IsEnd.html",
    "title": "Property IsEnd | Sisk Framework",
    "keywords": "Property IsEnd Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll IsEnd Gets an boolean indicating that this message is the last chunk of the message. public bool IsEnd { get; } Property Value bool"
  },
  "api/Sisk.Core.Http.Streams.WebSocketMessage.Length.html": {
    "href": "api/Sisk.Core.Http.Streams.WebSocketMessage.Length.html",
    "title": "Property Length | Sisk Framework",
    "keywords": "Property Length Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Length Gets the message length in byte count. public int Length { get; } Property Value int"
  },
  "api/Sisk.Core.Http.Streams.WebSocketMessage.MessageBytes.html": {
    "href": "api/Sisk.Core.Http.Streams.WebSocketMessage.MessageBytes.html",
    "title": "Property MessageBytes | Sisk Framework",
    "keywords": "Property MessageBytes Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll MessageBytes Gets an byte array with the message contents. public byte[] MessageBytes { get; } Property Value byte[]"
  },
  "api/Sisk.Core.Http.Streams.WebSocketMessage.Sender.html": {
    "href": "api/Sisk.Core.Http.Streams.WebSocketMessage.Sender.html",
    "title": "Property Sender | Sisk Framework",
    "keywords": "Property Sender Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Sender Gets the sender HttpWebSocket object instance which received this message. public HttpWebSocket Sender { get; } Property Value HttpWebSocket"
  },
  "api/Sisk.Core.Http.Streams.WebSocketMessage.html": {
    "href": "api/Sisk.Core.Http.Streams.WebSocketMessage.html",
    "title": "Class WebSocketMessage | Sisk Framework",
    "keywords": "Class WebSocketMessage Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Represents an websocket request message received by an websocket server. public sealed class WebSocketMessage Inheritance object WebSocketMessage Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties IsClose Gets an boolean indicating that this message is an remote closing message. IsEnd Gets an boolean indicating that this message is the last chunk of the message. Length Gets the message length in byte count. MessageBytes Gets an byte array with the message contents. Sender Gets the sender HttpWebSocket object instance which received this message. Methods GetString() Reads the message bytes as string using the HTTP request encoding. GetString(Encoding) Reads the message bytes as string using the specified encoding."
  },
  "api/Sisk.Core.Http.Streams.WebSocketMessageReceivedEventHandler.-ctor.html": {
    "href": "api/Sisk.Core.Http.Streams.WebSocketMessageReceivedEventHandler.-ctor.html",
    "title": "Constructor WebSocketMessageReceivedEventHandler | Sisk Framework",
    "keywords": "Constructor WebSocketMessageReceivedEventHandler Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll WebSocketMessageReceivedEventHandler(object, nint) public WebSocketMessageReceivedEventHandler(object @object, nint method) Parameters object object method nint"
  },
  "api/Sisk.Core.Http.Streams.WebSocketMessageReceivedEventHandler.BeginInvoke.html": {
    "href": "api/Sisk.Core.Http.Streams.WebSocketMessageReceivedEventHandler.BeginInvoke.html",
    "title": "Method BeginInvoke | Sisk Framework",
    "keywords": "Method BeginInvoke Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll BeginInvoke(object?, WebSocketMessage, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(object? sender, WebSocketMessage message, AsyncCallback callback, object @object) Parameters sender object message WebSocketMessage callback AsyncCallback object object Returns IAsyncResult"
  },
  "api/Sisk.Core.Http.Streams.WebSocketMessageReceivedEventHandler.EndInvoke.html": {
    "href": "api/Sisk.Core.Http.Streams.WebSocketMessageReceivedEventHandler.EndInvoke.html",
    "title": "Method EndInvoke | Sisk Framework",
    "keywords": "Method EndInvoke Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult"
  },
  "api/Sisk.Core.Http.Streams.WebSocketMessageReceivedEventHandler.Invoke.html": {
    "href": "api/Sisk.Core.Http.Streams.WebSocketMessageReceivedEventHandler.Invoke.html",
    "title": "Method Invoke | Sisk Framework",
    "keywords": "Method Invoke Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Invoke(object?, WebSocketMessage) public virtual void Invoke(object? sender, WebSocketMessage message) Parameters sender object message WebSocketMessage"
  },
  "api/Sisk.Core.Http.Streams.WebSocketMessageReceivedEventHandler.html": {
    "href": "api/Sisk.Core.Http.Streams.WebSocketMessageReceivedEventHandler.html",
    "title": "Delegate WebSocketMessageReceivedEventHandler | Sisk Framework",
    "keywords": "Delegate WebSocketMessageReceivedEventHandler Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Represents the void that is called when the Web Socket receives an message. public delegate void WebSocketMessageReceivedEventHandler(object? sender, WebSocketMessage message) Parameters sender object The HttpWebSocket object which fired the event. message WebSocketMessage The Web Socket message information. Constructors WebSocketMessageReceivedEventHandler(object, nint) Methods BeginInvoke(object?, WebSocketMessage, AsyncCallback, object) EndInvoke(IAsyncResult) Invoke(object?, WebSocketMessage)"
  },
  "api/Sisk.Core.Http.Streams.WebSocketRegistrationHandler.-ctor.html": {
    "href": "api/Sisk.Core.Http.Streams.WebSocketRegistrationHandler.-ctor.html",
    "title": "Constructor WebSocketRegistrationHandler | Sisk Framework",
    "keywords": "Constructor WebSocketRegistrationHandler Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll WebSocketRegistrationHandler(object, nint) public WebSocketRegistrationHandler(object @object, nint method) Parameters object object method nint"
  },
  "api/Sisk.Core.Http.Streams.WebSocketRegistrationHandler.BeginInvoke.html": {
    "href": "api/Sisk.Core.Http.Streams.WebSocketRegistrationHandler.BeginInvoke.html",
    "title": "Method BeginInvoke | Sisk Framework",
    "keywords": "Method BeginInvoke Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll BeginInvoke(object, HttpWebSocket, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(object sender, HttpWebSocket ws, AsyncCallback callback, object @object) Parameters sender object ws HttpWebSocket callback AsyncCallback object object Returns IAsyncResult"
  },
  "api/Sisk.Core.Http.Streams.WebSocketRegistrationHandler.EndInvoke.html": {
    "href": "api/Sisk.Core.Http.Streams.WebSocketRegistrationHandler.EndInvoke.html",
    "title": "Method EndInvoke | Sisk Framework",
    "keywords": "Method EndInvoke Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult"
  },
  "api/Sisk.Core.Http.Streams.WebSocketRegistrationHandler.Invoke.html": {
    "href": "api/Sisk.Core.Http.Streams.WebSocketRegistrationHandler.Invoke.html",
    "title": "Method Invoke | Sisk Framework",
    "keywords": "Method Invoke Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Invoke(object, HttpWebSocket) public virtual void Invoke(object sender, HttpWebSocket ws) Parameters sender object ws HttpWebSocket"
  },
  "api/Sisk.Core.Http.Streams.WebSocketRegistrationHandler.html": {
    "href": "api/Sisk.Core.Http.Streams.WebSocketRegistrationHandler.html",
    "title": "Delegate WebSocketRegistrationHandler | Sisk Framework",
    "keywords": "Delegate WebSocketRegistrationHandler Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Represents an function that is called when an HttpWebSocketConnectionCollection registers an new web socket connection. public delegate void WebSocketRegistrationHandler(object sender, HttpWebSocket ws) Parameters sender object Represents the caller HttpWebSocketConnectionCollection object. ws HttpWebSocket Represents the registered HttpWebSocket web socket connection. Constructors WebSocketRegistrationHandler(object, nint) Methods BeginInvoke(object, HttpWebSocket, AsyncCallback, object) EndInvoke(IAsyncResult) Invoke(object, HttpWebSocket)"
  },
  "api/Sisk.Core.Http.Streams.WebSocketUnregistrationHandler.-ctor.html": {
    "href": "api/Sisk.Core.Http.Streams.WebSocketUnregistrationHandler.-ctor.html",
    "title": "Constructor WebSocketUnregistrationHandler | Sisk Framework",
    "keywords": "Constructor WebSocketUnregistrationHandler Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll WebSocketUnregistrationHandler(object, nint) public WebSocketUnregistrationHandler(object @object, nint method) Parameters object object method nint"
  },
  "api/Sisk.Core.Http.Streams.WebSocketUnregistrationHandler.BeginInvoke.html": {
    "href": "api/Sisk.Core.Http.Streams.WebSocketUnregistrationHandler.BeginInvoke.html",
    "title": "Method BeginInvoke | Sisk Framework",
    "keywords": "Method BeginInvoke Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll BeginInvoke(object, HttpWebSocket, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(object sender, HttpWebSocket ws, AsyncCallback callback, object @object) Parameters sender object ws HttpWebSocket callback AsyncCallback object object Returns IAsyncResult"
  },
  "api/Sisk.Core.Http.Streams.WebSocketUnregistrationHandler.EndInvoke.html": {
    "href": "api/Sisk.Core.Http.Streams.WebSocketUnregistrationHandler.EndInvoke.html",
    "title": "Method EndInvoke | Sisk Framework",
    "keywords": "Method EndInvoke Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult"
  },
  "api/Sisk.Core.Http.Streams.WebSocketUnregistrationHandler.Invoke.html": {
    "href": "api/Sisk.Core.Http.Streams.WebSocketUnregistrationHandler.Invoke.html",
    "title": "Method Invoke | Sisk Framework",
    "keywords": "Method Invoke Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Invoke(object, HttpWebSocket) public virtual void Invoke(object sender, HttpWebSocket ws) Parameters sender object ws HttpWebSocket"
  },
  "api/Sisk.Core.Http.Streams.WebSocketUnregistrationHandler.html": {
    "href": "api/Sisk.Core.Http.Streams.WebSocketUnregistrationHandler.html",
    "title": "Delegate WebSocketUnregistrationHandler | Sisk Framework",
    "keywords": "Delegate WebSocketUnregistrationHandler Namespace Sisk.Core.Http.Streams Assembly Sisk.Core.dll Represents an function that is called when an HttpWebSocketConnectionCollection is removed and had it's connection closed. public delegate void WebSocketUnregistrationHandler(object sender, HttpWebSocket ws) Parameters sender object Represents the caller HttpWebSocketConnectionCollection object. ws HttpWebSocket Represents the closed HttpWebSocket web socket connection. Constructors WebSocketUnregistrationHandler(object, nint) Methods BeginInvoke(object, HttpWebSocket, AsyncCallback, object) EndInvoke(IAsyncResult) Invoke(object, HttpWebSocket)"
  },
  "api/Sisk.Core.Http.Streams.html": {
    "href": "api/Sisk.Core.Http.Streams.html",
    "title": "Namespace Sisk.Core.Http.Streams | Sisk Framework",
    "keywords": "Namespace Sisk.Core.Http.Streams Classes HttpEventSourceCollection Provides a managed object to manage HttpRequestEventSource connections. HttpRequestEventSource An HttpRequestEventSource instance opens a persistent connection to the request, which sends events in text/event-stream format. HttpResponseStream Represents a way to manage HTTP requests with their output streams, without relying on synchronous content. HttpStreamPingPolicy Provides an automatic ping sender for HTTP Event Source connections. HttpWebSocket Provides an persistent bi-directional socket between the client and the HTTP server. HttpWebSocketConnectionCollection Provides a managed object to manage HttpWebSocket connections. WebSocketMessage Represents an websocket request message received by an websocket server. Delegates EventSourceRegistrationHandler Represents an function that is called when an HttpEventSourceCollection registers an new event source connection. EventSourceUnregistrationHandler Represents an function that is called when an HttpEventSourceCollection is removed and had their connection closed. WebSocketMessageReceivedEventHandler Represents the void that is called when the Web Socket receives an message. WebSocketRegistrationHandler Represents an function that is called when an HttpWebSocketConnectionCollection registers an new web socket connection. WebSocketUnregistrationHandler Represents an function that is called when an HttpWebSocketConnectionCollection is removed and had it's connection closed."
  },
  "api/Sisk.Core.Http.html": {
    "href": "api/Sisk.Core.Http.html",
    "title": "Namespace Sisk.Core.Http | Sisk Framework",
    "keywords": "Namespace Sisk.Core.Http Namespaces Sisk.Core.Http.Handlers Sisk.Core.Http.Hosting Sisk.Core.Http.Streams Classes BrotliContent Represents an HTTP content that is compressed using the Brotli algorithm. CompressedContent Represents a base class for HTTP contents served over an compressing stream. DefaultMessagePage Provides methods for creating informative static pages used by Sisk. DeflateContent Represents an HTTP content that is compressed using the Deflate algorithm. ForwardingResolver Provides HTTP forwarding resolving methods that can be used to resolving the client remote address, host and protocol of a proxy, load balancer or CDN, through the HTTP request. GZipContent Represents an HTTP content that is compressed using the GZip algorithm. HtmlContent Provides HTTP content based on HTML contents. HttpContext Represents an context that is shared in a entire HTTP session. HttpKnownHeaderNames Provides most of the most commonly known HTTP headers for constants. HttpRequest Represents an HTTP request received by a Sisk server. HttpRequestException Represents an exception that is thrown while a request is being interpreted by the HTTP server. HttpResponse Represents an HTTP Response. HttpResponseExtensions Provides useful extensions for HttpResponse objects. HttpServer Provides an lightweight HTTP server powered by Sisk. HttpServerConfiguration Provides execution parameters for an HttpServer. HttpServerExecutionResult Represents the results of an request execution on the HTTP server. HttpServerFlags Provides advanced fields for Sisk server behavior. ListeningHost Provides a structure to contain the fields needed by an http server host. ListeningHostRepository Represents an fluent repository of ListeningHost that can add, modify, or remove listening hosts while an HttpServer is running. LogStream Provides a managed, asynchronous log writer which supports writing safe data to log files or text streams. RotatingLogPolicy Provides a managed utility for rotating log files by their file size. Structs HttpStatusInformation Represents a structure that holds an HTTP response status information, with it's status code and description. ListeningPort Provides a structure to contain a listener port for an ListeningHost instance. Enums HttpServerExecutionStatus Represents the status of an execution of a request on an HttpServer. RequestListenAction Represents the HTTP server action when receiving an request."
  },
  "api/Sisk.Core.Routing.AsyncRequestHandler.-ctor.html": {
    "href": "api/Sisk.Core.Routing.AsyncRequestHandler.-ctor.html",
    "title": "Constructor AsyncRequestHandler | Sisk Framework",
    "keywords": "Constructor AsyncRequestHandler Namespace Sisk.Core.Routing Assembly Sisk.Core.dll AsyncRequestHandler() protected AsyncRequestHandler()"
  },
  "api/Sisk.Core.Routing.AsyncRequestHandler.Create.html": {
    "href": "api/Sisk.Core.Routing.AsyncRequestHandler.Create.html",
    "title": "Method Create | Sisk Framework",
    "keywords": "Method Create Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Create(Func<HttpRequest, HttpContext, Task<HttpResponse?>>, RequestHandlerExecutionMode) Gets an inline AsyncRequestHandler that resolves to the specified function. public static AsyncRequestHandler Create(Func<HttpRequest, HttpContext, Task<HttpResponse?>> execute, RequestHandlerExecutionMode executionMode = RequestHandlerExecutionMode.BeforeResponse) Parameters execute Func<HttpRequest, HttpContext, Task<HttpResponse>> The function that the AsyncRequestHandler will run. executionMode RequestHandlerExecutionMode Optional. Determines where the request handler will be executed. Returns AsyncRequestHandler"
  },
  "api/Sisk.Core.Routing.AsyncRequestHandler.ExecuteAsync.html": {
    "href": "api/Sisk.Core.Routing.AsyncRequestHandler.ExecuteAsync.html",
    "title": "Method ExecuteAsync | Sisk Framework",
    "keywords": "Method ExecuteAsync Namespace Sisk.Core.Routing Assembly Sisk.Core.dll ExecuteAsync(HttpRequest, HttpContext) This method is called by the Router before executing a request when the Route instantiates an object that implements this interface. If it returns a HttpResponse object, the route action is not called and all execution of the route is stopped. If it returns \"null\", the execution is continued. public abstract Task<HttpResponse?> ExecuteAsync(HttpRequest request, HttpContext context) Parameters request HttpRequest The entry HTTP request. context HttpContext The HTTP request context. It may contain information from other IRequestHandler. Returns Task<HttpResponse>"
  },
  "api/Sisk.Core.Routing.AsyncRequestHandler.ExecutionMode.html": {
    "href": "api/Sisk.Core.Routing.AsyncRequestHandler.ExecutionMode.html",
    "title": "Property ExecutionMode | Sisk Framework",
    "keywords": "Property ExecutionMode Namespace Sisk.Core.Routing Assembly Sisk.Core.dll ExecutionMode Gets or sets when this RequestHandler should run. public virtual RequestHandlerExecutionMode ExecutionMode { get; init; } Property Value RequestHandlerExecutionMode"
  },
  "api/Sisk.Core.Routing.AsyncRequestHandler.Next.html": {
    "href": "api/Sisk.Core.Routing.AsyncRequestHandler.Next.html",
    "title": "Method Next | Sisk Framework",
    "keywords": "Method Next Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Next() Returns an null HttpResponse reference, which points to the next request handler or route action. public HttpResponse? Next() Returns HttpResponse"
  },
  "api/Sisk.Core.Routing.AsyncRequestHandler.html": {
    "href": "api/Sisk.Core.Routing.AsyncRequestHandler.html",
    "title": "Class AsyncRequestHandler | Sisk Framework",
    "keywords": "Class AsyncRequestHandler Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Represents a class that implements IRequestHandler and its execution method is asynchronous. public abstract class AsyncRequestHandler : IRequestHandler Inheritance object AsyncRequestHandler Implements IRequestHandler Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors AsyncRequestHandler() Properties ExecutionMode Gets or sets when this RequestHandler should run. Methods Create(Func<HttpRequest, HttpContext, Task<HttpResponse?>>, RequestHandlerExecutionMode) Gets an inline AsyncRequestHandler that resolves to the specified function. ExecuteAsync(HttpRequest, HttpContext) This method is called by the Router before executing a request when the Route instantiates an object that implements this interface. If it returns a HttpResponse object, the route action is not called and all execution of the route is stopped. If it returns \"null\", the execution is continued. Next() Returns an null HttpResponse reference, which points to the next request handler or route action."
  },
  "api/Sisk.Core.Routing.ExceptionErrorCallback.-ctor.html": {
    "href": "api/Sisk.Core.Routing.ExceptionErrorCallback.-ctor.html",
    "title": "Constructor ExceptionErrorCallback | Sisk Framework",
    "keywords": "Constructor ExceptionErrorCallback Namespace Sisk.Core.Routing Assembly Sisk.Core.dll ExceptionErrorCallback(object, nint) public ExceptionErrorCallback(object @object, nint method) Parameters object object method nint"
  },
  "api/Sisk.Core.Routing.ExceptionErrorCallback.BeginInvoke.html": {
    "href": "api/Sisk.Core.Routing.ExceptionErrorCallback.BeginInvoke.html",
    "title": "Method BeginInvoke | Sisk Framework",
    "keywords": "Method BeginInvoke Namespace Sisk.Core.Routing Assembly Sisk.Core.dll BeginInvoke(Exception, HttpContext, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(Exception ex, HttpContext context, AsyncCallback callback, object @object) Parameters ex Exception context HttpContext callback AsyncCallback object object Returns IAsyncResult"
  },
  "api/Sisk.Core.Routing.ExceptionErrorCallback.EndInvoke.html": {
    "href": "api/Sisk.Core.Routing.ExceptionErrorCallback.EndInvoke.html",
    "title": "Method EndInvoke | Sisk Framework",
    "keywords": "Method EndInvoke Namespace Sisk.Core.Routing Assembly Sisk.Core.dll EndInvoke(IAsyncResult) public virtual HttpResponse EndInvoke(IAsyncResult result) Parameters result IAsyncResult Returns HttpResponse"
  },
  "api/Sisk.Core.Routing.ExceptionErrorCallback.Invoke.html": {
    "href": "api/Sisk.Core.Routing.ExceptionErrorCallback.Invoke.html",
    "title": "Method Invoke | Sisk Framework",
    "keywords": "Method Invoke Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Invoke(Exception, HttpContext) public virtual HttpResponse Invoke(Exception ex, HttpContext context) Parameters ex Exception context HttpContext Returns HttpResponse"
  },
  "api/Sisk.Core.Routing.ExceptionErrorCallback.html": {
    "href": "api/Sisk.Core.Routing.ExceptionErrorCallback.html",
    "title": "Delegate ExceptionErrorCallback | Sisk Framework",
    "keywords": "Delegate ExceptionErrorCallback Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Represents the function that is called after the route action threw an exception. public delegate HttpResponse ExceptionErrorCallback(Exception ex, HttpContext context) Parameters ex Exception Represents the function that is called after the route action threw an exception. context HttpContext Represents the function that is called after the route action threw an exception. Returns HttpResponse Represents the function that is called after the route action threw an exception. Constructors ExceptionErrorCallback(object, nint) Methods BeginInvoke(Exception, HttpContext, AsyncCallback, object) EndInvoke(IAsyncResult) Invoke(Exception, HttpContext)"
  },
  "api/Sisk.Core.Routing.IRequestHandler.Execute.html": {
    "href": "api/Sisk.Core.Routing.IRequestHandler.Execute.html",
    "title": "Method Execute | Sisk Framework",
    "keywords": "Method Execute Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Execute(HttpRequest, HttpContext) This method is called by the Router before executing a request when the Route instantiates an object that implements this interface. If it returns a HttpResponse object, the route action is not called and all execution of the route is stopped. If it returns \"null\", the execution is continued. HttpResponse? Execute(HttpRequest request, HttpContext context) Parameters request HttpRequest The entry HTTP request. context HttpContext The HTTP request context. It may contain information from other IRequestHandler. Returns HttpResponse"
  },
  "api/Sisk.Core.Routing.IRequestHandler.ExecutionMode.html": {
    "href": "api/Sisk.Core.Routing.IRequestHandler.ExecutionMode.html",
    "title": "Property ExecutionMode | Sisk Framework",
    "keywords": "Property ExecutionMode Namespace Sisk.Core.Routing Assembly Sisk.Core.dll ExecutionMode Gets or sets when this RequestHandler should run. RequestHandlerExecutionMode ExecutionMode { get; init; } Property Value RequestHandlerExecutionMode"
  },
  "api/Sisk.Core.Routing.IRequestHandler.html": {
    "href": "api/Sisk.Core.Routing.IRequestHandler.html",
    "title": "Interface IRequestHandler | Sisk Framework",
    "keywords": "Interface IRequestHandler Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Represents an interface that is executed before a request. public interface IRequestHandler Properties ExecutionMode Gets or sets when this RequestHandler should run. Methods Execute(HttpRequest, HttpContext) This method is called by the Router before executing a request when the Route instantiates an object that implements this interface. If it returns a HttpResponse object, the route action is not called and all execution of the route is stopped. If it returns \"null\", the execution is continued."
  },
  "api/Sisk.Core.Routing.LogOutput.html": {
    "href": "api/Sisk.Core.Routing.LogOutput.html",
    "title": "Enum LogOutput | Sisk Framework",
    "keywords": "Enum LogOutput Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Determines the way the server can write log messages. This enumerator is for giving permissions for certain contexts to be able or not to write to the server logs, such as AccessLogsStream and ErrorsLogsStream. [Flags] public enum LogOutput Fields AccessLog = 2 Determines that the context or the route can write log messages only to the access logs through AccessLogsStream. Both = AccessLog | ErrorLog Determines that the context or the route can write log messages to both error and access logs. ErrorLog = 4 Determines that the context or the route can write error messages only to the error logs through ErrorsLogsStream. None = 0 Determines that the context or the route cannot write any log messages."
  },
  "api/Sisk.Core.Routing.ParameterlessRouteAction.-ctor.html": {
    "href": "api/Sisk.Core.Routing.ParameterlessRouteAction.-ctor.html",
    "title": "Constructor ParameterlessRouteAction | Sisk Framework",
    "keywords": "Constructor ParameterlessRouteAction Namespace Sisk.Core.Routing Assembly Sisk.Core.dll ParameterlessRouteAction(object, nint) public ParameterlessRouteAction(object @object, nint method) Parameters object object method nint"
  },
  "api/Sisk.Core.Routing.ParameterlessRouteAction.BeginInvoke.html": {
    "href": "api/Sisk.Core.Routing.ParameterlessRouteAction.BeginInvoke.html",
    "title": "Method BeginInvoke | Sisk Framework",
    "keywords": "Method BeginInvoke Namespace Sisk.Core.Routing Assembly Sisk.Core.dll BeginInvoke(AsyncCallback, object) public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object @object) Parameters callback AsyncCallback object object Returns IAsyncResult"
  },
  "api/Sisk.Core.Routing.ParameterlessRouteAction.EndInvoke.html": {
    "href": "api/Sisk.Core.Routing.ParameterlessRouteAction.EndInvoke.html",
    "title": "Method EndInvoke | Sisk Framework",
    "keywords": "Method EndInvoke Namespace Sisk.Core.Routing Assembly Sisk.Core.dll EndInvoke(IAsyncResult) public virtual object EndInvoke(IAsyncResult result) Parameters result IAsyncResult Returns object"
  },
  "api/Sisk.Core.Routing.ParameterlessRouteAction.Invoke.html": {
    "href": "api/Sisk.Core.Routing.ParameterlessRouteAction.Invoke.html",
    "title": "Method Invoke | Sisk Framework",
    "keywords": "Method Invoke Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Invoke() public virtual object Invoke() Returns object"
  },
  "api/Sisk.Core.Routing.ParameterlessRouteAction.html": {
    "href": "api/Sisk.Core.Routing.ParameterlessRouteAction.html",
    "title": "Delegate ParameterlessRouteAction | Sisk Framework",
    "keywords": "Delegate ParameterlessRouteAction Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Represents the function that is called after the route is matched with the request. public delegate object ParameterlessRouteAction() Returns object Represents the function that is called after the route is matched with the request. Constructors ParameterlessRouteAction(object, nint) Methods BeginInvoke(AsyncCallback, object) EndInvoke(IAsyncResult) Invoke()"
  },
  "api/Sisk.Core.Routing.RegexRoute.html": {
    "href": "api/Sisk.Core.Routing.RegexRoute.html",
    "title": "Class RegexRoute | Sisk Framework",
    "keywords": "Class RegexRoute Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Represents an Route which it's implementation already enables UseRegex. public class RegexRoute : Route, IEquatable<Route> Inheritance object Route RegexRoute Implements IEquatable<Route> Inherited Members Route.AnyPath Route.ToString() Route.GetHashCode() Route.Equals(object) Route.Equals(Route) Route.Get(string, RouteAction) Route.Post(string, RouteAction) Route.Put(string, RouteAction) Route.Patch(string, RouteAction) Route.Head(string, RouteAction) Route.Any(string, RouteAction) Route.Delete(string, RouteAction) Route.Options(string, RouteAction) Route.Bag Route.IsAsync Route.LogMode Route.UseRegex Route.UseCors Route.Method Route.Path Route.Name Route.Action Route.RequestHandlers Route.BypassGlobalRequestHandlers object.GetType() object.MemberwiseClone() object.Equals(object, object) object.ReferenceEquals(object, object)"
  },
  "api/Sisk.Core.Routing.RegexRouteAttribute.-ctor.html": {
    "href": "api/Sisk.Core.Routing.RegexRouteAttribute.-ctor.html",
    "title": "Constructor RegexRouteAttribute | Sisk Framework",
    "keywords": "Constructor RegexRouteAttribute Namespace Sisk.Core.Routing Assembly Sisk.Core.dll RegexRouteAttribute(RouteMethod, string) Creates an new RouteGetAttribute attribute instance with given path. public RegexRouteAttribute(RouteMethod method, string pattern) Parameters method RouteMethod The route entry point method. pattern string The Regex pattern which will match the route."
  },
  "api/Sisk.Core.Routing.RegexRouteAttribute.html": {
    "href": "api/Sisk.Core.Routing.RegexRouteAttribute.html",
    "title": "Class RegexRouteAttribute | Sisk Framework",
    "keywords": "Class RegexRouteAttribute Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Represents a mapping to an route, which it's path is defined by an regular expression. This attribute is an shorthand from RouteAttribute. [AttributeUsage(AttributeTargets.Method, AllowMultiple = true, Inherited = true)] public sealed class RegexRouteAttribute : RouteAttribute Inheritance object Attribute RouteAttribute RegexRouteAttribute Inherited Members RouteAttribute.Method RouteAttribute.Path RouteAttribute.Name RouteAttribute.UseCors RouteAttribute.LogMode RouteAttribute.UseRegex Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors RegexRouteAttribute(RouteMethod, string) Creates an new RouteGetAttribute attribute instance with given path."
  },
  "api/Sisk.Core.Routing.RequestHandler.-ctor.html": {
    "href": "api/Sisk.Core.Routing.RequestHandler.-ctor.html",
    "title": "Constructor RequestHandler | Sisk Framework",
    "keywords": "Constructor RequestHandler Namespace Sisk.Core.Routing Assembly Sisk.Core.dll RequestHandler() protected RequestHandler()"
  },
  "api/Sisk.Core.Routing.RequestHandler.Create.html": {
    "href": "api/Sisk.Core.Routing.RequestHandler.Create.html",
    "title": "Method Create | Sisk Framework",
    "keywords": "Method Create Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Create(Func<HttpRequest, HttpContext, HttpResponse?>, RequestHandlerExecutionMode) Gets an inline RequestHandler that resolves to the specified function. public static RequestHandler Create(Func<HttpRequest, HttpContext, HttpResponse?> execute, RequestHandlerExecutionMode executionMode = RequestHandlerExecutionMode.BeforeResponse) Parameters execute Func<HttpRequest, HttpContext, HttpResponse> The function that the RequestHandler will run. executionMode RequestHandlerExecutionMode Optional. Determines where the request handler will be executed. Returns RequestHandler"
  },
  "api/Sisk.Core.Routing.RequestHandler.Next.html": {
    "href": "api/Sisk.Core.Routing.RequestHandler.Next.html",
    "title": "Method Next | Sisk Framework",
    "keywords": "Method Next Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Next() Returns an null HttpResponse reference, which points to the next request handler or route action. public HttpResponse? Next() Returns HttpResponse"
  },
  "api/Sisk.Core.Routing.RequestHandler.html": {
    "href": "api/Sisk.Core.Routing.RequestHandler.html",
    "title": "Class RequestHandler | Sisk Framework",
    "keywords": "Class RequestHandler Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Represents an abstract class which implements IRequestHandler. public abstract class RequestHandler : IRequestHandler Inheritance object RequestHandler Implements IRequestHandler Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors RequestHandler() Methods Create(Func<HttpRequest, HttpContext, HttpResponse?>, RequestHandlerExecutionMode) Gets an inline RequestHandler that resolves to the specified function. Next() Returns an null HttpResponse reference, which points to the next request handler or route action."
  },
  "api/Sisk.Core.Routing.RequestHandlerAttribute-1.-ctor.html": {
    "href": "api/Sisk.Core.Routing.RequestHandlerAttribute-1.-ctor.html",
    "title": "Constructor RequestHandlerAttribute | Sisk Framework",
    "keywords": "Constructor RequestHandlerAttribute Namespace Sisk.Core.Routing Assembly Sisk.Core.dll RequestHandlerAttribute() Creates an new instance of this RequestHandlerAttribute<T> class. public RequestHandlerAttribute() RequestHandlerAttribute(params object?[]) Creates an new instance of this RequestHandlerAttribute<T> class with the specified constructor arguments for T. public RequestHandlerAttribute(params object?[] constructorArguments) Parameters constructorArguments object[] An optional array of objects which is passed to the request handler constructor."
  },
  "api/Sisk.Core.Routing.RequestHandlerAttribute-1.html": {
    "href": "api/Sisk.Core.Routing.RequestHandlerAttribute-1.html",
    "title": "Class RequestHandlerAttribute<T> | Sisk Framework",
    "keywords": "Class RequestHandlerAttribute<T> Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Specifies that the method or class, when used on this attribute, will instantiate the type and call the IRequestHandler with given parameters. public class RequestHandlerAttribute<T> : RequestHandlerAttribute where T : IRequestHandler Type Parameters T Inheritance object Attribute RequestHandlerAttribute RequestHandlerAttribute<T> Inherited Members RequestHandlerAttribute.RequestHandlerType RequestHandlerAttribute.ConstructorArguments Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors RequestHandlerAttribute() Creates an new instance of this RequestHandlerAttribute<T> class. RequestHandlerAttribute(params object?[]) Creates an new instance of this RequestHandlerAttribute<T> class with the specified constructor arguments for T."
  },
  "api/Sisk.Core.Routing.RequestHandlerAttribute.-ctor.html": {
    "href": "api/Sisk.Core.Routing.RequestHandlerAttribute.-ctor.html",
    "title": "Constructor RequestHandlerAttribute | Sisk Framework",
    "keywords": "Constructor RequestHandlerAttribute Namespace Sisk.Core.Routing Assembly Sisk.Core.dll RequestHandlerAttribute(Type) Creates a new instance of this attribute with the informed parameters. public RequestHandlerAttribute(Type handledBy) Parameters handledBy Type The type that implements IRequestHandler which will be instantiated."
  },
  "api/Sisk.Core.Routing.RequestHandlerAttribute.ConstructorArguments.html": {
    "href": "api/Sisk.Core.Routing.RequestHandlerAttribute.ConstructorArguments.html",
    "title": "Property ConstructorArguments | Sisk Framework",
    "keywords": "Property ConstructorArguments Namespace Sisk.Core.Routing Assembly Sisk.Core.dll ConstructorArguments Specifies parameters for the given type's constructor. public object?[] ConstructorArguments { get; set; } Property Value object[]"
  },
  "api/Sisk.Core.Routing.RequestHandlerAttribute.RequestHandlerType.html": {
    "href": "api/Sisk.Core.Routing.RequestHandlerAttribute.RequestHandlerType.html",
    "title": "Property RequestHandlerType | Sisk Framework",
    "keywords": "Property RequestHandlerType Namespace Sisk.Core.Routing Assembly Sisk.Core.dll RequestHandlerType Gets or sets the type that implements IRequestHandler which will be instantiated. public Type RequestHandlerType { get; set; } Property Value Type"
  },
  "api/Sisk.Core.Routing.RequestHandlerAttribute.html": {
    "href": "api/Sisk.Core.Routing.RequestHandlerAttribute.html",
    "title": "Class RequestHandlerAttribute | Sisk Framework",
    "keywords": "Class RequestHandlerAttribute Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Specifies that the method or class, when used on this attribute, will instantiate the type and call the IRequestHandler with given parameters. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = true)] public class RequestHandlerAttribute : Attribute Inheritance object Attribute RequestHandlerAttribute Derived RequestHandlerAttribute<T> Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors RequestHandlerAttribute(Type) Creates a new instance of this attribute with the informed parameters. Properties ConstructorArguments Specifies parameters for the given type's constructor. RequestHandlerType Gets or sets the type that implements IRequestHandler which will be instantiated."
  },
  "api/Sisk.Core.Routing.RequestHandlerExecutionMode.html": {
    "href": "api/Sisk.Core.Routing.RequestHandlerExecutionMode.html",
    "title": "Enum RequestHandlerExecutionMode | Sisk Framework",
    "keywords": "Enum RequestHandlerExecutionMode Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Defines when the IRequestHandler object should be executed. public enum RequestHandlerExecutionMode Fields AfterResponse = 1 Indicates that the handler must be executed after the route action execution. BeforeResponse = 0 Indicates that the handler must be executed before the router calls the route action and after request contents is loaded."
  },
  "api/Sisk.Core.Routing.Route.-ctor.html": {
    "href": "api/Sisk.Core.Routing.Route.-ctor.html",
    "title": "Constructor Route | Sisk Framework",
    "keywords": "Constructor Route Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Route(RouteMethod, string, Delegate?) Creates an new Route instance with given parameters. public Route(RouteMethod method, string path, Delegate? action) Parameters method RouteMethod The matching HTTP method. If it is \"Any\", the route will just use the path expression to be matched, not the HTTP method. path string The path expression that will be interpreted by the router and validated by the requests. action Delegate The function that is called after the route is matched with the request. Route(RouteMethod, string, string?, Delegate?, IRequestHandler[]?) Creates an new Route instance with given parameters. public Route(RouteMethod method, string path, string? name, Delegate? action, IRequestHandler[]? beforeCallback) Parameters method RouteMethod The matching HTTP method. If it is \"Any\", the route will just use the path expression to be matched, not the HTTP method. path string The path expression that will be interpreted by the router and validated by the requests. name string The route name. It allows it to be found by other routes and makes it easier to create links. action Delegate The function that is called after the route is matched with the request. beforeCallback IRequestHandler[] The RequestHandlers to run before the route's Action. Route() Creates an new Route instance with no parameters. public Route()"
  },
  "api/Sisk.Core.Routing.Route.Action.html": {
    "href": "api/Sisk.Core.Routing.Route.Action.html",
    "title": "Property Action | Sisk Framework",
    "keywords": "Property Action Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Action Gets or sets the function that is called after the route is matched with the request. public Delegate? Action { get; set; } Property Value Delegate"
  },
  "api/Sisk.Core.Routing.Route.Any.html": {
    "href": "api/Sisk.Core.Routing.Route.Any.html",
    "title": "Method Any | Sisk Framework",
    "keywords": "Method Any Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Any(string, RouteAction) Creates a route that responds to any HTTP request method. public static Route Any(string path, RouteAction action) Parameters path string The URL path for the route. action RouteAction The action to be executed when the route is matched. Returns Route A Route object configured for any request method."
  },
  "api/Sisk.Core.Routing.Route.AnyPath.html": {
    "href": "api/Sisk.Core.Routing.Route.AnyPath.html",
    "title": "Field AnyPath | Sisk Framework",
    "keywords": "Field AnyPath Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Represents an route path which captures any URL path. public const string AnyPath = \"/<<ANY>>\" Returns string Represents an route path which captures any URL path."
  },
  "api/Sisk.Core.Routing.Route.Bag.html": {
    "href": "api/Sisk.Core.Routing.Route.Bag.html",
    "title": "Property Bag | Sisk Framework",
    "keywords": "Property Bag Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Bag Gets or sets an TypedValueDictionary for this route, which can hold contextual variables for this Route object. public TypedValueDictionary Bag { get; set; } Property Value TypedValueDictionary"
  },
  "api/Sisk.Core.Routing.Route.BypassGlobalRequestHandlers.html": {
    "href": "api/Sisk.Core.Routing.Route.BypassGlobalRequestHandlers.html",
    "title": "Property BypassGlobalRequestHandlers | Sisk Framework",
    "keywords": "Property BypassGlobalRequestHandlers Namespace Sisk.Core.Routing Assembly Sisk.Core.dll BypassGlobalRequestHandlers Gets or sets the global request handlers instances that will not run on this route. public IRequestHandler[] BypassGlobalRequestHandlers { get; set; } Property Value IRequestHandler[]"
  },
  "api/Sisk.Core.Routing.Route.Delete.html": {
    "href": "api/Sisk.Core.Routing.Route.Delete.html",
    "title": "Method Delete | Sisk Framework",
    "keywords": "Method Delete Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Delete(string, RouteAction) Creates a route that responds to HTTP DELETE requests. public static Route Delete(string path, RouteAction action) Parameters path string The URL path for the route. action RouteAction The action to be executed when the route is matched. Returns Route A Route object configured for DELETE requests."
  },
  "api/Sisk.Core.Routing.Route.Equals.html": {
    "href": "api/Sisk.Core.Routing.Route.Equals.html",
    "title": "Method Equals | Sisk Framework",
    "keywords": "Method Equals Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Equals(object?) public override bool Equals(object? obj) Parameters obj object Returns bool Equals(Route?) public bool Equals(Route? other) Parameters other Route Returns bool"
  },
  "api/Sisk.Core.Routing.Route.Get.html": {
    "href": "api/Sisk.Core.Routing.Route.Get.html",
    "title": "Method Get | Sisk Framework",
    "keywords": "Method Get Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Get(string, RouteAction) Creates a route that responds to HTTP GET requests. public static Route Get(string path, RouteAction action) Parameters path string The URL path for the route. action RouteAction The action to be executed when the route is matched. Returns Route A Route object configured for GET requests."
  },
  "api/Sisk.Core.Routing.Route.GetHashCode.html": {
    "href": "api/Sisk.Core.Routing.Route.GetHashCode.html",
    "title": "Method GetHashCode | Sisk Framework",
    "keywords": "Method GetHashCode Namespace Sisk.Core.Routing Assembly Sisk.Core.dll GetHashCode() public override int GetHashCode() Returns int"
  },
  "api/Sisk.Core.Routing.Route.Head.html": {
    "href": "api/Sisk.Core.Routing.Route.Head.html",
    "title": "Method Head | Sisk Framework",
    "keywords": "Method Head Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Head(string, RouteAction) Creates a route that responds to HTTP HEAD requests. public static Route Head(string path, RouteAction action) Parameters path string The URL path for the route. action RouteAction The action to be executed when the route is matched. Returns Route A Route object configured for HEAD requests."
  },
  "api/Sisk.Core.Routing.Route.IsAsync.html": {
    "href": "api/Sisk.Core.Routing.Route.IsAsync.html",
    "title": "Property IsAsync | Sisk Framework",
    "keywords": "Property IsAsync Namespace Sisk.Core.Routing Assembly Sisk.Core.dll IsAsync Gets an boolean indicating if this Route action return is an asynchronous Task. public bool IsAsync { get; } Property Value bool"
  },
  "api/Sisk.Core.Routing.Route.LogMode.html": {
    "href": "api/Sisk.Core.Routing.Route.LogMode.html",
    "title": "Property LogMode | Sisk Framework",
    "keywords": "Property LogMode Namespace Sisk.Core.Routing Assembly Sisk.Core.dll LogMode Gets or sets how this route can write messages to log files on the server. public LogOutput LogMode { get; set; } Property Value LogOutput"
  },
  "api/Sisk.Core.Routing.Route.Method.html": {
    "href": "api/Sisk.Core.Routing.Route.Method.html",
    "title": "Property Method | Sisk Framework",
    "keywords": "Property Method Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Method Gets or sets the matching HTTP method. public RouteMethod Method { get; set; } Property Value RouteMethod"
  },
  "api/Sisk.Core.Routing.Route.Name.html": {
    "href": "api/Sisk.Core.Routing.Route.Name.html",
    "title": "Property Name | Sisk Framework",
    "keywords": "Property Name Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Name Gets or sets the route name. public string? Name { get; set; } Property Value string"
  },
  "api/Sisk.Core.Routing.Route.Options.html": {
    "href": "api/Sisk.Core.Routing.Route.Options.html",
    "title": "Method Options | Sisk Framework",
    "keywords": "Method Options Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Options(string, RouteAction) Creates a route that responds to HTTP OPTIONS requests. public static Route Options(string path, RouteAction action) Parameters path string The URL path for the route. action RouteAction The action to be executed when the route is matched. Returns Route A Route object configured for OPTIONS requests."
  },
  "api/Sisk.Core.Routing.Route.Patch.html": {
    "href": "api/Sisk.Core.Routing.Route.Patch.html",
    "title": "Method Patch | Sisk Framework",
    "keywords": "Method Patch Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Patch(string, RouteAction) Creates a route that responds to HTTP PATCH requests. public static Route Patch(string path, RouteAction action) Parameters path string The URL path for the route. action RouteAction The action to be executed when the route is matched. Returns Route A Route object configured for PATCH requests."
  },
  "api/Sisk.Core.Routing.Route.Path.html": {
    "href": "api/Sisk.Core.Routing.Route.Path.html",
    "title": "Property Path | Sisk Framework",
    "keywords": "Property Path Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Path Gets or sets the path expression that will be interpreted by the router and validated by the requests. public string Path { get; set; } Property Value string"
  },
  "api/Sisk.Core.Routing.Route.Post.html": {
    "href": "api/Sisk.Core.Routing.Route.Post.html",
    "title": "Method Post | Sisk Framework",
    "keywords": "Method Post Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Post(string, RouteAction) Creates a route that responds to HTTP POST requests. public static Route Post(string path, RouteAction action) Parameters path string The URL path for the route. action RouteAction The action to be executed when the route is matched. Returns Route A Route object configured for POST requests."
  },
  "api/Sisk.Core.Routing.Route.Put.html": {
    "href": "api/Sisk.Core.Routing.Route.Put.html",
    "title": "Method Put | Sisk Framework",
    "keywords": "Method Put Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Put(string, RouteAction) Creates a route that responds to HTTP PUT requests. public static Route Put(string path, RouteAction action) Parameters path string The URL path for the route. action RouteAction The action to be executed when the route is matched. Returns Route A Route object configured for PUT requests."
  },
  "api/Sisk.Core.Routing.Route.RequestHandlers.html": {
    "href": "api/Sisk.Core.Routing.Route.RequestHandlers.html",
    "title": "Property RequestHandlers | Sisk Framework",
    "keywords": "Property RequestHandlers Namespace Sisk.Core.Routing Assembly Sisk.Core.dll RequestHandlers Gets or sets the request handlers instances to run before the route's Action. public IRequestHandler[] RequestHandlers { get; set; } Property Value IRequestHandler[]"
  },
  "api/Sisk.Core.Routing.Route.ToString.html": {
    "href": "api/Sisk.Core.Routing.Route.ToString.html",
    "title": "Method ToString | Sisk Framework",
    "keywords": "Method ToString Namespace Sisk.Core.Routing Assembly Sisk.Core.dll ToString() Gets an string notation for this Route object. public override string ToString() Returns string"
  },
  "api/Sisk.Core.Routing.Route.UseCors.html": {
    "href": "api/Sisk.Core.Routing.Route.UseCors.html",
    "title": "Property UseCors | Sisk Framework",
    "keywords": "Property UseCors Namespace Sisk.Core.Routing Assembly Sisk.Core.dll UseCors Gets or sets whether this route should send Cross-Origin Resource Sharing headers in the response. public bool UseCors { get; set; } Property Value bool"
  },
  "api/Sisk.Core.Routing.Route.UseRegex.html": {
    "href": "api/Sisk.Core.Routing.Route.UseRegex.html",
    "title": "Property UseRegex | Sisk Framework",
    "keywords": "Property UseRegex Namespace Sisk.Core.Routing Assembly Sisk.Core.dll UseRegex Get or sets if this route should use regex to be interpreted instead of predefined templates. public bool UseRegex { get; set; } Property Value bool"
  },
  "api/Sisk.Core.Routing.Route.html": {
    "href": "api/Sisk.Core.Routing.Route.html",
    "title": "Class Route | Sisk Framework",
    "keywords": "Class Route Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Represents an HTTP route to be matched by an Router. public class Route : IEquatable<Route> Inheritance object Route Implements IEquatable<Route> Derived RegexRoute Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors Route() Creates an new Route instance with no parameters. Route(RouteMethod, string, Delegate?) Creates an new Route instance with given parameters. Route(RouteMethod, string, string?, Delegate?, IRequestHandler[]?) Creates an new Route instance with given parameters. Fields AnyPath Represents an route path which captures any URL path. Properties Action Gets or sets the function that is called after the route is matched with the request. Bag Gets or sets an TypedValueDictionary for this route, which can hold contextual variables for this Route object. BypassGlobalRequestHandlers Gets or sets the global request handlers instances that will not run on this route. IsAsync Gets an boolean indicating if this Route action return is an asynchronous Task. LogMode Gets or sets how this route can write messages to log files on the server. Method Gets or sets the matching HTTP method. Name Gets or sets the route name. Path Gets or sets the path expression that will be interpreted by the router and validated by the requests. RequestHandlers Gets or sets the request handlers instances to run before the route's Action. UseCors Gets or sets whether this route should send Cross-Origin Resource Sharing headers in the response. UseRegex Get or sets if this route should use regex to be interpreted instead of predefined templates. Methods Any(string, RouteAction) Creates a route that responds to any HTTP request method. Delete(string, RouteAction) Creates a route that responds to HTTP DELETE requests. Equals(Route?) Equals(object?) Get(string, RouteAction) Creates a route that responds to HTTP GET requests. GetHashCode() Head(string, RouteAction) Creates a route that responds to HTTP HEAD requests. Options(string, RouteAction) Creates a route that responds to HTTP OPTIONS requests. Patch(string, RouteAction) Creates a route that responds to HTTP PATCH requests. Post(string, RouteAction) Creates a route that responds to HTTP POST requests. Put(string, RouteAction) Creates a route that responds to HTTP PUT requests. ToString() Gets an string notation for this Route object. Operators operator ==(Route?, Route?) operator !=(Route?, Route?)"
  },
  "api/Sisk.Core.Routing.Route.op_Equality.html": {
    "href": "api/Sisk.Core.Routing.Route.op_Equality.html",
    "title": "Operator operator == | Sisk Framework",
    "keywords": "Operator operator == Namespace Sisk.Core.Routing Assembly Sisk.Core.dll operator ==(Route?, Route?) public static bool operator ==(Route? left, Route? right) Parameters left Route right Route Returns bool"
  },
  "api/Sisk.Core.Routing.Route.op_Inequality.html": {
    "href": "api/Sisk.Core.Routing.Route.op_Inequality.html",
    "title": "Operator operator != | Sisk Framework",
    "keywords": "Operator operator != Namespace Sisk.Core.Routing Assembly Sisk.Core.dll operator !=(Route?, Route?) public static bool operator !=(Route? left, Route? right) Parameters left Route right Route Returns bool"
  },
  "api/Sisk.Core.Routing.RouteAction.-ctor.html": {
    "href": "api/Sisk.Core.Routing.RouteAction.-ctor.html",
    "title": "Constructor RouteAction | Sisk Framework",
    "keywords": "Constructor RouteAction Namespace Sisk.Core.Routing Assembly Sisk.Core.dll RouteAction(object, nint) public RouteAction(object @object, nint method) Parameters object object method nint"
  },
  "api/Sisk.Core.Routing.RouteAction.BeginInvoke.html": {
    "href": "api/Sisk.Core.Routing.RouteAction.BeginInvoke.html",
    "title": "Method BeginInvoke | Sisk Framework",
    "keywords": "Method BeginInvoke Namespace Sisk.Core.Routing Assembly Sisk.Core.dll BeginInvoke(HttpRequest, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(HttpRequest request, AsyncCallback callback, object @object) Parameters request HttpRequest callback AsyncCallback object object Returns IAsyncResult"
  },
  "api/Sisk.Core.Routing.RouteAction.EndInvoke.html": {
    "href": "api/Sisk.Core.Routing.RouteAction.EndInvoke.html",
    "title": "Method EndInvoke | Sisk Framework",
    "keywords": "Method EndInvoke Namespace Sisk.Core.Routing Assembly Sisk.Core.dll EndInvoke(IAsyncResult) public virtual object EndInvoke(IAsyncResult result) Parameters result IAsyncResult Returns object"
  },
  "api/Sisk.Core.Routing.RouteAction.Invoke.html": {
    "href": "api/Sisk.Core.Routing.RouteAction.Invoke.html",
    "title": "Method Invoke | Sisk Framework",
    "keywords": "Method Invoke Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Invoke(HttpRequest) public virtual object Invoke(HttpRequest request) Parameters request HttpRequest Returns object"
  },
  "api/Sisk.Core.Routing.RouteAction.html": {
    "href": "api/Sisk.Core.Routing.RouteAction.html",
    "title": "Delegate RouteAction | Sisk Framework",
    "keywords": "Delegate RouteAction Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Represents the function that is called after the route is matched with the request. public delegate object RouteAction(HttpRequest request) Parameters request HttpRequest The received request on the router. Returns object Represents the function that is called after the route is matched with the request. Constructors RouteAction(object, nint) Methods BeginInvoke(HttpRequest, AsyncCallback, object) EndInvoke(IAsyncResult) Invoke(HttpRequest)"
  },
  "api/Sisk.Core.Routing.RouteAttribute.-ctor.html": {
    "href": "api/Sisk.Core.Routing.RouteAttribute.-ctor.html",
    "title": "Constructor RouteAttribute | Sisk Framework",
    "keywords": "Constructor RouteAttribute Namespace Sisk.Core.Routing Assembly Sisk.Core.dll RouteAttribute(RouteMethod, string) Creates an new RouteAttribute instance with given route method and path pattern. public RouteAttribute(RouteMethod method, string path) Parameters method RouteMethod The route entry point method. path string The route path."
  },
  "api/Sisk.Core.Routing.RouteAttribute.LogMode.html": {
    "href": "api/Sisk.Core.Routing.RouteAttribute.LogMode.html",
    "title": "Property LogMode | Sisk Framework",
    "keywords": "Property LogMode Namespace Sisk.Core.Routing Assembly Sisk.Core.dll LogMode Gets or sets how this route can write messages to log files on the server. public LogOutput LogMode { get; set; } Property Value LogOutput"
  },
  "api/Sisk.Core.Routing.RouteAttribute.Method.html": {
    "href": "api/Sisk.Core.Routing.RouteAttribute.Method.html",
    "title": "Property Method | Sisk Framework",
    "keywords": "Property Method Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Method Gets or sets the matching HTTP method. If it is \"Any\", the route will just use the path expression to be matched, not the HTTP method. public RouteMethod Method { get; set; } Property Value RouteMethod"
  },
  "api/Sisk.Core.Routing.RouteAttribute.Name.html": {
    "href": "api/Sisk.Core.Routing.RouteAttribute.Name.html",
    "title": "Property Name | Sisk Framework",
    "keywords": "Property Name Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Name Gets or sets the route name. It allows it to be found by other routes and makes it easier to create links. public string? Name { get; set; } Property Value string"
  },
  "api/Sisk.Core.Routing.RouteAttribute.Path.html": {
    "href": "api/Sisk.Core.Routing.RouteAttribute.Path.html",
    "title": "Property Path | Sisk Framework",
    "keywords": "Property Path Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Path Gets or sets the path expression that will be interpreted by the router and validated by the requests. public string Path { get; set; } Property Value string"
  },
  "api/Sisk.Core.Routing.RouteAttribute.UseCors.html": {
    "href": "api/Sisk.Core.Routing.RouteAttribute.UseCors.html",
    "title": "Property UseCors | Sisk Framework",
    "keywords": "Property UseCors Namespace Sisk.Core.Routing Assembly Sisk.Core.dll UseCors Gets or sets whether this route should send Cross-Origin Resource Sharing headers in the response. public bool UseCors { get; set; } Property Value bool"
  },
  "api/Sisk.Core.Routing.RouteAttribute.UseRegex.html": {
    "href": "api/Sisk.Core.Routing.RouteAttribute.UseRegex.html",
    "title": "Property UseRegex | Sisk Framework",
    "keywords": "Property UseRegex Namespace Sisk.Core.Routing Assembly Sisk.Core.dll UseRegex Get or sets if this route should use regex to be interpreted instead of predefined templates. public bool UseRegex { get; set; } Property Value bool"
  },
  "api/Sisk.Core.Routing.RouteAttribute.html": {
    "href": "api/Sisk.Core.Routing.RouteAttribute.html",
    "title": "Class RouteAttribute | Sisk Framework",
    "keywords": "Class RouteAttribute Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Represents an class that, when applied to a method, will be recognized by a router as a route. [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)] public class RouteAttribute : Attribute Inheritance object Attribute RouteAttribute Derived RegexRouteAttribute RouteDeleteAttribute RouteGetAttribute RoutePatchAttribute RoutePostAttribute RoutePutAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors RouteAttribute(RouteMethod, string) Creates an new RouteAttribute instance with given route method and path pattern. Properties LogMode Gets or sets how this route can write messages to log files on the server. Method Gets or sets the matching HTTP method. If it is \"Any\", the route will just use the path expression to be matched, not the HTTP method. Name Gets or sets the route name. It allows it to be found by other routes and makes it easier to create links. Path Gets or sets the path expression that will be interpreted by the router and validated by the requests. UseCors Gets or sets whether this route should send Cross-Origin Resource Sharing headers in the response. UseRegex Get or sets if this route should use regex to be interpreted instead of predefined templates."
  },
  "api/Sisk.Core.Routing.RouteDeleteAttribute.-ctor.html": {
    "href": "api/Sisk.Core.Routing.RouteDeleteAttribute.-ctor.html",
    "title": "Constructor RouteDeleteAttribute | Sisk Framework",
    "keywords": "Constructor RouteDeleteAttribute Namespace Sisk.Core.Routing Assembly Sisk.Core.dll RouteDeleteAttribute(string) Creates an new RouteDeleteAttribute attribute instance with given path. public RouteDeleteAttribute(string path) Parameters path string The DELETE route path. RouteDeleteAttribute() Creates an new RouteDeleteAttribute attribute instance with an root path (/). public RouteDeleteAttribute()"
  },
  "api/Sisk.Core.Routing.RouteDeleteAttribute.html": {
    "href": "api/Sisk.Core.Routing.RouteDeleteAttribute.html",
    "title": "Class RouteDeleteAttribute | Sisk Framework",
    "keywords": "Class RouteDeleteAttribute Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Represents a mapping to an HTTP DELETE route. This attribute is an shorthand from RouteAttribute. [AttributeUsage(AttributeTargets.Method, AllowMultiple = true, Inherited = true)] public sealed class RouteDeleteAttribute : RouteAttribute Inheritance object Attribute RouteAttribute RouteDeleteAttribute Inherited Members RouteAttribute.Method RouteAttribute.Path RouteAttribute.Name RouteAttribute.UseCors RouteAttribute.LogMode RouteAttribute.UseRegex Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors RouteDeleteAttribute() Creates an new RouteDeleteAttribute attribute instance with an root path (/). RouteDeleteAttribute(string) Creates an new RouteDeleteAttribute attribute instance with given path."
  },
  "api/Sisk.Core.Routing.RouteGetAttribute.-ctor.html": {
    "href": "api/Sisk.Core.Routing.RouteGetAttribute.-ctor.html",
    "title": "Constructor RouteGetAttribute | Sisk Framework",
    "keywords": "Constructor RouteGetAttribute Namespace Sisk.Core.Routing Assembly Sisk.Core.dll RouteGetAttribute(string) Creates an new RouteGetAttribute attribute instance with given path. public RouteGetAttribute(string path) Parameters path string The GET route path. RouteGetAttribute() Creates an new RouteGetAttribute attribute instance with an root path (/). public RouteGetAttribute()"
  },
  "api/Sisk.Core.Routing.RouteGetAttribute.html": {
    "href": "api/Sisk.Core.Routing.RouteGetAttribute.html",
    "title": "Class RouteGetAttribute | Sisk Framework",
    "keywords": "Class RouteGetAttribute Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Represents a mapping to an HTTP GET route. This attribute is an shorthand from RouteAttribute. [AttributeUsage(AttributeTargets.Method, AllowMultiple = true, Inherited = true)] public sealed class RouteGetAttribute : RouteAttribute Inheritance object Attribute RouteAttribute RouteGetAttribute Inherited Members RouteAttribute.Method RouteAttribute.Path RouteAttribute.Name RouteAttribute.UseCors RouteAttribute.LogMode RouteAttribute.UseRegex Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors RouteGetAttribute() Creates an new RouteGetAttribute attribute instance with an root path (/). RouteGetAttribute(string) Creates an new RouteGetAttribute attribute instance with given path."
  },
  "api/Sisk.Core.Routing.RouteMethod.html": {
    "href": "api/Sisk.Core.Routing.RouteMethod.html",
    "title": "Enum RouteMethod | Sisk Framework",
    "keywords": "Enum RouteMethod Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Represents an HTTP method to be matched in an Route. [Flags] public enum RouteMethod Fields Any = Get | Post | Put | Patch | Delete | Head | Options Represents any HTTP method. Delete = 32 Represents the HTTP DELETE method. Get = 2 Represents the HTTP GET method. Head = 128 Represents the HTTP HEAD method. Options = 256 Represents the HTTP OPTIONS method. Patch = 16 Represents the HTTP PATCH method. Post = 4 Represents the HTTP POST method. Put = 8 Represents the HTTP PUT method."
  },
  "api/Sisk.Core.Routing.RoutePatchAttribute.-ctor.html": {
    "href": "api/Sisk.Core.Routing.RoutePatchAttribute.-ctor.html",
    "title": "Constructor RoutePatchAttribute | Sisk Framework",
    "keywords": "Constructor RoutePatchAttribute Namespace Sisk.Core.Routing Assembly Sisk.Core.dll RoutePatchAttribute(string) Creates an new RoutePatchAttribute attribute instance with given path. public RoutePatchAttribute(string path) Parameters path string The PATCH route path. RoutePatchAttribute() Creates an new RoutePatchAttribute attribute instance with an root path (/). public RoutePatchAttribute()"
  },
  "api/Sisk.Core.Routing.RoutePatchAttribute.html": {
    "href": "api/Sisk.Core.Routing.RoutePatchAttribute.html",
    "title": "Class RoutePatchAttribute | Sisk Framework",
    "keywords": "Class RoutePatchAttribute Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Represents a mapping to an HTTP PATCH route. This attribute is an shorthand from RouteAttribute. [AttributeUsage(AttributeTargets.Method, AllowMultiple = true, Inherited = true)] public sealed class RoutePatchAttribute : RouteAttribute Inheritance object Attribute RouteAttribute RoutePatchAttribute Inherited Members RouteAttribute.Method RouteAttribute.Path RouteAttribute.Name RouteAttribute.UseCors RouteAttribute.LogMode RouteAttribute.UseRegex Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors RoutePatchAttribute() Creates an new RoutePatchAttribute attribute instance with an root path (/). RoutePatchAttribute(string) Creates an new RoutePatchAttribute attribute instance with given path."
  },
  "api/Sisk.Core.Routing.RoutePostAttribute.-ctor.html": {
    "href": "api/Sisk.Core.Routing.RoutePostAttribute.-ctor.html",
    "title": "Constructor RoutePostAttribute | Sisk Framework",
    "keywords": "Constructor RoutePostAttribute Namespace Sisk.Core.Routing Assembly Sisk.Core.dll RoutePostAttribute(string) Creates an new RoutePostAttribute attribute instance with given path. public RoutePostAttribute(string path) Parameters path string The POST route path. RoutePostAttribute() Creates an new RoutePostAttribute attribute instance with an root path (/). public RoutePostAttribute()"
  },
  "api/Sisk.Core.Routing.RoutePostAttribute.html": {
    "href": "api/Sisk.Core.Routing.RoutePostAttribute.html",
    "title": "Class RoutePostAttribute | Sisk Framework",
    "keywords": "Class RoutePostAttribute Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Represents a mapping to an HTTP POST route. This attribute is an shorthand from RouteAttribute. [AttributeUsage(AttributeTargets.Method, AllowMultiple = true, Inherited = true)] public sealed class RoutePostAttribute : RouteAttribute Inheritance object Attribute RouteAttribute RoutePostAttribute Inherited Members RouteAttribute.Method RouteAttribute.Path RouteAttribute.Name RouteAttribute.UseCors RouteAttribute.LogMode RouteAttribute.UseRegex Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors RoutePostAttribute() Creates an new RoutePostAttribute attribute instance with an root path (/). RoutePostAttribute(string) Creates an new RoutePostAttribute attribute instance with given path."
  },
  "api/Sisk.Core.Routing.RoutePrefixAttribute.-ctor.html": {
    "href": "api/Sisk.Core.Routing.RoutePrefixAttribute.-ctor.html",
    "title": "Constructor RoutePrefixAttribute | Sisk Framework",
    "keywords": "Constructor RoutePrefixAttribute Namespace Sisk.Core.Routing Assembly Sisk.Core.dll RoutePrefixAttribute(string) Initializes an new RoutePrefixAttribute with given prefix. public RoutePrefixAttribute(string prefix) Parameters prefix string"
  },
  "api/Sisk.Core.Routing.RoutePrefixAttribute.Prefix.html": {
    "href": "api/Sisk.Core.Routing.RoutePrefixAttribute.Prefix.html",
    "title": "Property Prefix | Sisk Framework",
    "keywords": "Property Prefix Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Prefix Gets or sets the route prefix. public string Prefix { get; set; } Property Value string"
  },
  "api/Sisk.Core.Routing.RoutePrefixAttribute.html": {
    "href": "api/Sisk.Core.Routing.RoutePrefixAttribute.html",
    "title": "Class RoutePrefixAttribute | Sisk Framework",
    "keywords": "Class RoutePrefixAttribute Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Represents an attribute that, when applied to an class containing routes, all child routes will start with the specified prefix. [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)] public sealed class RoutePrefixAttribute : Attribute Inheritance object Attribute RoutePrefixAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors RoutePrefixAttribute(string) Initializes an new RoutePrefixAttribute with given prefix. Properties Prefix Gets or sets the route prefix."
  },
  "api/Sisk.Core.Routing.RoutePutAttribute.-ctor.html": {
    "href": "api/Sisk.Core.Routing.RoutePutAttribute.-ctor.html",
    "title": "Constructor RoutePutAttribute | Sisk Framework",
    "keywords": "Constructor RoutePutAttribute Namespace Sisk.Core.Routing Assembly Sisk.Core.dll RoutePutAttribute(string) Creates an new RoutePutAttribute attribute instance with given path. public RoutePutAttribute(string path) Parameters path string The PUT route path. RoutePutAttribute() Creates an new RoutePutAttribute attribute instance with an root path (/). public RoutePutAttribute()"
  },
  "api/Sisk.Core.Routing.RoutePutAttribute.html": {
    "href": "api/Sisk.Core.Routing.RoutePutAttribute.html",
    "title": "Class RoutePutAttribute | Sisk Framework",
    "keywords": "Class RoutePutAttribute Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Represents a mapping to an HTTP PUT route. This attribute is an shorthand from RouteAttribute. [AttributeUsage(AttributeTargets.Method, AllowMultiple = true, Inherited = true)] public sealed class RoutePutAttribute : RouteAttribute Inheritance object Attribute RouteAttribute RoutePutAttribute Inherited Members RouteAttribute.Method RouteAttribute.Path RouteAttribute.Name RouteAttribute.UseCors RouteAttribute.LogMode RouteAttribute.UseRegex Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors RoutePutAttribute() Creates an new RoutePutAttribute attribute instance with an root path (/). RoutePutAttribute(string) Creates an new RoutePutAttribute attribute instance with given path."
  },
  "api/Sisk.Core.Routing.Router.-ctor.html": {
    "href": "api/Sisk.Core.Routing.Router.-ctor.html",
    "title": "Constructor Router | Sisk Framework",
    "keywords": "Constructor Router Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Router() Creates an new Router instance with default values. public Router() Router(IEnumerable<Route>) Creates an new Router instance with given route collection. public Router(IEnumerable<Route> routes) Parameters routes IEnumerable<Route> The route collection to import in this router."
  },
  "api/Sisk.Core.Routing.Router.AutoScanModules.html": {
    "href": "api/Sisk.Core.Routing.Router.AutoScanModules.html",
    "title": "Method AutoScanModules | Sisk Framework",
    "keywords": "Method AutoScanModules Namespace Sisk.Core.Routing Assembly Sisk.Core.dll AutoScanModules(Type, Assembly) Scans for all types that implements the specified module type and associates an instance of each type to the router. public void AutoScanModules(Type moduleType, Assembly searchAssembly) Parameters moduleType Type An class which implements RouterModule, or the router module itself. searchAssembly Assembly The assembly to search the module type in. AutoScanModules<TModule>(Assembly) Scans for all types that implements TModule and associates an instance of each type to the router. Note that, TModule must be an RouterModule type and an accessible constructor for each type must be present. public void AutoScanModules<TModule>(Assembly assembly) where TModule : RouterModule Parameters assembly Assembly The assembly to search TModule in. Type Parameters TModule An class which implements RouterModule, or the router module itself. AutoScanModules<TModule>() Scans for all types that implements TModule and associates an instance of each type to the router. Note that, TModule must be an RouterModule type and an accessible constructor for each type must be present. public void AutoScanModules<TModule>() where TModule : RouterModule Type Parameters TModule An class which implements RouterModule, or the router module itself."
  },
  "api/Sisk.Core.Routing.Router.CallbackErrorHandler.html": {
    "href": "api/Sisk.Core.Routing.Router.CallbackErrorHandler.html",
    "title": "Property CallbackErrorHandler | Sisk Framework",
    "keywords": "Property CallbackErrorHandler Namespace Sisk.Core.Routing Assembly Sisk.Core.dll CallbackErrorHandler Gets or sets the Router action exception handler. The response handler for this property will send an HTTP response to the client when an exception is caught during execution. This property is only called when ThrowExceptions is disabled. public ExceptionErrorCallback? CallbackErrorHandler { get; set; } Property Value ExceptionErrorCallback"
  },
  "api/Sisk.Core.Routing.Router.CheckForRouteCollisions.html": {
    "href": "api/Sisk.Core.Routing.Router.CheckForRouteCollisions.html",
    "title": "Property CheckForRouteCollisions | Sisk Framework",
    "keywords": "Property CheckForRouteCollisions Namespace Sisk.Core.Routing Assembly Sisk.Core.dll CheckForRouteCollisions Gets or sets whether this Router should check for possible routing collisions before starting the HTTP server. public bool CheckForRouteCollisions { get; set; } Property Value bool"
  },
  "api/Sisk.Core.Routing.Router.GetDefinedRoutes.html": {
    "href": "api/Sisk.Core.Routing.Router.GetDefinedRoutes.html",
    "title": "Method GetDefinedRoutes | Sisk Framework",
    "keywords": "Method GetDefinedRoutes Namespace Sisk.Core.Routing Assembly Sisk.Core.dll GetDefinedRoutes() Gets all routes defined on this router instance. public Route[] GetDefinedRoutes() Returns Route[]"
  },
  "api/Sisk.Core.Routing.Router.GetRouteFromName.html": {
    "href": "api/Sisk.Core.Routing.Router.GetRouteFromName.html",
    "title": "Method GetRouteFromName | Sisk Framework",
    "keywords": "Method GetRouteFromName Namespace Sisk.Core.Routing Assembly Sisk.Core.dll GetRouteFromName(string) Gets an defined Route by their name property. public Route? GetRouteFromName(string name) Parameters name string The route name. Returns Route"
  },
  "api/Sisk.Core.Routing.Router.GetRouteFromPath.html": {
    "href": "api/Sisk.Core.Routing.Router.GetRouteFromPath.html",
    "title": "Method GetRouteFromPath | Sisk Framework",
    "keywords": "Method GetRouteFromPath Namespace Sisk.Core.Routing Assembly Sisk.Core.dll GetRouteFromPath(RouteMethod, string) Gets the first matched Route by their HTTP method and path. public Route? GetRouteFromPath(RouteMethod method, string uri) Parameters method RouteMethod The HTTP method to match. uri string The URL expression. Returns Route GetRouteFromPath(string) Gets the first matched Route by their URL path. public Route? GetRouteFromPath(string uri) Parameters uri string The URL expression. Returns Route"
  },
  "api/Sisk.Core.Routing.Router.GlobalRequestHandlers.html": {
    "href": "api/Sisk.Core.Routing.Router.GlobalRequestHandlers.html",
    "title": "Property GlobalRequestHandlers | Sisk Framework",
    "keywords": "Property GlobalRequestHandlers Namespace Sisk.Core.Routing Assembly Sisk.Core.dll GlobalRequestHandlers Gets or sets the global requests handlers that will be executed in all matched routes. public IRequestHandler[] GlobalRequestHandlers { get; set; } Property Value IRequestHandler[]"
  },
  "api/Sisk.Core.Routing.Router.IsDefined.html": {
    "href": "api/Sisk.Core.Routing.Router.IsDefined.html",
    "title": "Method IsDefined | Sisk Framework",
    "keywords": "Method IsDefined Namespace Sisk.Core.Routing Assembly Sisk.Core.dll IsDefined(RouteMethod, string) Gets an boolean indicating if there are any route that matches the specified method and route path. public bool IsDefined(RouteMethod method, string path) Parameters method RouteMethod The route method. path string The route path. Returns bool"
  },
  "api/Sisk.Core.Routing.Router.IsReadOnly.html": {
    "href": "api/Sisk.Core.Routing.Router.IsReadOnly.html",
    "title": "Property IsReadOnly | Sisk Framework",
    "keywords": "Property IsReadOnly Namespace Sisk.Core.Routing Assembly Sisk.Core.dll IsReadOnly Gets an boolean indicating where this Router is read-only or not. public bool IsReadOnly { get; } Property Value bool"
  },
  "api/Sisk.Core.Routing.Router.MapAny.html": {
    "href": "api/Sisk.Core.Routing.Router.MapAny.html",
    "title": "Method MapAny | Sisk Framework",
    "keywords": "Method MapAny Namespace Sisk.Core.Routing Assembly Sisk.Core.dll MapAny(string, RouteAction) Maps an route which matches any HTTP method, using the specified path and action function. public void MapAny(string path, RouteAction action) Parameters path string The route path. action RouteAction The route function to be called after matched."
  },
  "api/Sisk.Core.Routing.Router.MapDelete.html": {
    "href": "api/Sisk.Core.Routing.Router.MapDelete.html",
    "title": "Method MapDelete | Sisk Framework",
    "keywords": "Method MapDelete Namespace Sisk.Core.Routing Assembly Sisk.Core.dll MapDelete(string, RouteAction) Maps an DELETE route using the specified path and action function. public void MapDelete(string path, RouteAction action) Parameters path string The route path. action RouteAction The route function to be called after matched."
  },
  "api/Sisk.Core.Routing.Router.MapGet.html": {
    "href": "api/Sisk.Core.Routing.Router.MapGet.html",
    "title": "Method MapGet | Sisk Framework",
    "keywords": "Method MapGet Namespace Sisk.Core.Routing Assembly Sisk.Core.dll MapGet(string, RouteAction) Maps an GET route using the specified path and action function. public void MapGet(string path, RouteAction action) Parameters path string The route path. action RouteAction The route function to be called after matched."
  },
  "api/Sisk.Core.Routing.Router.MapPatch.html": {
    "href": "api/Sisk.Core.Routing.Router.MapPatch.html",
    "title": "Method MapPatch | Sisk Framework",
    "keywords": "Method MapPatch Namespace Sisk.Core.Routing Assembly Sisk.Core.dll MapPatch(string, RouteAction) Maps an PATCH route using the specified path and action function. public void MapPatch(string path, RouteAction action) Parameters path string The route path. action RouteAction The route function to be called after matched."
  },
  "api/Sisk.Core.Routing.Router.MapPost.html": {
    "href": "api/Sisk.Core.Routing.Router.MapPost.html",
    "title": "Method MapPost | Sisk Framework",
    "keywords": "Method MapPost Namespace Sisk.Core.Routing Assembly Sisk.Core.dll MapPost(string, RouteAction) Maps an POST route using the specified path and action function. public void MapPost(string path, RouteAction action) Parameters path string The route path. action RouteAction The route function to be called after matched."
  },
  "api/Sisk.Core.Routing.Router.MapPut.html": {
    "href": "api/Sisk.Core.Routing.Router.MapPut.html",
    "title": "Method MapPut | Sisk Framework",
    "keywords": "Method MapPut Namespace Sisk.Core.Routing Assembly Sisk.Core.dll MapPut(string, RouteAction) Maps an PUT route using the specified path and action function. public void MapPut(string path, RouteAction action) Parameters path string The route path. action RouteAction The route function to be called after matched."
  },
  "api/Sisk.Core.Routing.Router.MatchRoutesIgnoreCase.html": {
    "href": "api/Sisk.Core.Routing.Router.MatchRoutesIgnoreCase.html",
    "title": "Property MatchRoutesIgnoreCase | Sisk Framework",
    "keywords": "Property MatchRoutesIgnoreCase Namespace Sisk.Core.Routing Assembly Sisk.Core.dll MatchRoutesIgnoreCase Gets or sets whether this Router will match routes ignoring case. public bool MatchRoutesIgnoreCase { get; set; } Property Value bool"
  },
  "api/Sisk.Core.Routing.Router.MethodNotAllowedErrorHandler.html": {
    "href": "api/Sisk.Core.Routing.Router.MethodNotAllowedErrorHandler.html",
    "title": "Property MethodNotAllowedErrorHandler | Sisk Framework",
    "keywords": "Property MethodNotAllowedErrorHandler Namespace Sisk.Core.Routing Assembly Sisk.Core.dll MethodNotAllowedErrorHandler Gets or sets the Router \"405 Method Not Allowed\" handler. public RoutingErrorCallback? MethodNotAllowedErrorHandler { get; set; } Property Value RoutingErrorCallback"
  },
  "api/Sisk.Core.Routing.Router.NotFoundErrorHandler.html": {
    "href": "api/Sisk.Core.Routing.Router.NotFoundErrorHandler.html",
    "title": "Property NotFoundErrorHandler | Sisk Framework",
    "keywords": "Property NotFoundErrorHandler Namespace Sisk.Core.Routing Assembly Sisk.Core.dll NotFoundErrorHandler Gets or sets the Router \"404 Not Found\" handler. public RoutingErrorCallback? NotFoundErrorHandler { get; set; } Property Value RoutingErrorCallback"
  },
  "api/Sisk.Core.Routing.Router.Prefix.html": {
    "href": "api/Sisk.Core.Routing.Router.Prefix.html",
    "title": "Property Prefix | Sisk Framework",
    "keywords": "Property Prefix Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Prefix Gets or sets the prefix which will be applied to all next defining routes in this router. public string? Prefix { get; set; } Property Value string"
  },
  "api/Sisk.Core.Routing.Router.RegisterValueHandler.html": {
    "href": "api/Sisk.Core.Routing.Router.RegisterValueHandler.html",
    "title": "Method RegisterValueHandler | Sisk Framework",
    "keywords": "Method RegisterValueHandler Namespace Sisk.Core.Routing Assembly Sisk.Core.dll RegisterValueHandler<T>(RouterActionHandlerCallback<T>) Register an type handling association to converting it to an HttpResponse object. public void RegisterValueHandler<T>(RouterActionHandlerCallback<T> actionHandler) where T : notnull Parameters actionHandler RouterActionHandlerCallback<T> The function that receives an object of the T and returns an HttpResponse response from the informed object. Type Parameters T"
  },
  "api/Sisk.Core.Routing.Router.ResolveActionResult.html": {
    "href": "api/Sisk.Core.Routing.Router.ResolveActionResult.html",
    "title": "Method ResolveActionResult | Sisk Framework",
    "keywords": "Method ResolveActionResult Namespace Sisk.Core.Routing Assembly Sisk.Core.dll ResolveActionResult(object?) Resolves the specified object into an valid HttpResponse using the defined value handlers or throws an exception if not possible. public HttpResponse ResolveActionResult(object? result) Parameters result object The object that will be converted to an valid HttpResponse. Returns HttpResponse Remarks This method can throw exceptions. To avoid exceptions while trying to convert the specified object into an HttpResponse, consider using TryResolveActionResult(object?, out HttpResponse?)."
  },
  "api/Sisk.Core.Routing.Router.Rewrite.html": {
    "href": "api/Sisk.Core.Routing.Router.Rewrite.html",
    "title": "Method Rewrite | Sisk Framework",
    "keywords": "Method Rewrite Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Rewrite(string, string) Maps a rewrite route, which redirects all requests that match the given path to another path, keeping the body and headers of the original request. public void Rewrite(string rewritePath, string rewriteInto) Parameters rewritePath string The incoming HTTP request path. rewriteInto string The rewrited URL."
  },
  "api/Sisk.Core.Routing.Router.SetObject.html": {
    "href": "api/Sisk.Core.Routing.Router.SetObject.html",
    "title": "Method SetObject | Sisk Framework",
    "keywords": "Method SetObject Namespace Sisk.Core.Routing Assembly Sisk.Core.dll SetObject(object) Searches for all instance and static methods that are marked with an attribute of type RouteAttribute in the specified object and creates routes for these methods. public void SetObject(object attrClassInstance) Parameters attrClassInstance object The instance of the class where the methods are. The routing methods must be marked with any RouteAttribute. Exceptions Exception An exception is thrown when a method has an erroneous signature. SetObject(Type) Searches for all instance and static methods that are marked with an attribute of type RouteAttribute in the specified object and creates routes for these methods. public void SetObject(Type attrClassType) Parameters attrClassType Type The type of the class where the methods are. The routing methods must be marked with any RouteAttribute. SetObject(Type, object) Searches for all instance and static methods that are marked with an attribute of type RouteAttribute in the specified object and creates routes for these methods. public void SetObject(Type attrClassType, object instance) Parameters attrClassType Type The type of the class where the methods are. The routing methods must be marked with any RouteAttribute. instance object The instance of the object where the route methods are. SetObject<TObject>() Searches for all instance and static methods that are marked with an attribute of type RouteAttribute in the specified object and creates routes for these methods. public void SetObject<TObject>() Type Parameters TObject The type of the class where the methods are. The routing methods must be marked with any RouteAttribute. Exceptions Exception An exception is thrown when a method has an erroneous signature. SetObject<TObject>(TObject) Searches for all instance and static methods that are marked with an attribute of type RouteAttribute in the specified object and creates routes for these methods. public void SetObject<TObject>(TObject instance) where TObject : notnull Parameters instance TObject The instance of TObject to invoke the instance methods on. Type Parameters TObject The type of the class where the methods are. The routing methods must be marked with any RouteAttribute. Exceptions Exception An exception is thrown when a method has an erroneous signature."
  },
  "api/Sisk.Core.Routing.Router.SetRoute.html": {
    "href": "api/Sisk.Core.Routing.Router.SetRoute.html",
    "title": "Method SetRoute | Sisk Framework",
    "keywords": "Method SetRoute Namespace Sisk.Core.Routing Assembly Sisk.Core.dll SetRoute(RouteMethod, string, RouteAction) Defines an route with their method, path and action function. public void SetRoute(RouteMethod method, string path, RouteAction action) Parameters method RouteMethod The route method to be matched. \"Any\" means any method that matches their path. path string The route path. action RouteAction The route function to be called after matched. SetRoute(RouteMethod, string, Delegate) Defines an route with their method, path and action function. public void SetRoute(RouteMethod method, string path, Delegate action) Parameters method RouteMethod The route method to be matched. \"Any\" means any method that matches their path. path string The route path. action Delegate The route function to be called after matched. SetRoute(RouteMethod, string, Delegate, string?) Defines an route with their method, path, action function and name. public void SetRoute(RouteMethod method, string path, Delegate action, string? name) Parameters method RouteMethod The route method to be matched. \"Any\" means any method that matches their path. path string The route path. action Delegate The route function to be called after matched. name string The route name. SetRoute(RouteMethod, string, RouteAction, string?, IRequestHandler[]) Defines an route with their method, path, action function, name and request handlers. public void SetRoute(RouteMethod method, string path, RouteAction action, string? name, IRequestHandler[] middlewares) Parameters method RouteMethod The route method to be matched. \"Any\" means any method that matches their path. path string The route path. action RouteAction The route function to be called after matched. name string The route name. middlewares IRequestHandler[] Handlers that run before calling your route action. SetRoute(Route) Defines an route in this Router instance. public void SetRoute(Route r) Parameters r Route The route to be defined in the Router."
  },
  "api/Sisk.Core.Routing.Router.TryResolveActionResult.html": {
    "href": "api/Sisk.Core.Routing.Router.TryResolveActionResult.html",
    "title": "Method TryResolveActionResult | Sisk Framework",
    "keywords": "Method TryResolveActionResult Namespace Sisk.Core.Routing Assembly Sisk.Core.dll TryResolveActionResult(object?, out HttpResponse?) Tries to resolve the specified object into an valid HttpResponse using the defined value handlers. public bool TryResolveActionResult(object? result, out HttpResponse? response) Parameters result object The object that will be converted to an valid HttpResponse. response HttpResponse When this method returns, the response object. This parameter is not initialized. Returns bool When this method returns, the HttpResponse object."
  },
  "api/Sisk.Core.Routing.Router.html": {
    "href": "api/Sisk.Core.Routing.Router.html",
    "title": "Class Router | Sisk Framework",
    "keywords": "Class Router Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Represents a collection of Route and main executor of actions in the HttpServer. public sealed class Router Inheritance object Router Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Router() Creates an new Router instance with default values. Router(IEnumerable<Route>) Creates an new Router instance with given route collection. Properties CallbackErrorHandler Gets or sets the Router action exception handler. The response handler for this property will send an HTTP response to the client when an exception is caught during execution. This property is only called when ThrowExceptions is disabled. CheckForRouteCollisions Gets or sets whether this Router should check for possible routing collisions before starting the HTTP server. GlobalRequestHandlers Gets or sets the global requests handlers that will be executed in all matched routes. IsReadOnly Gets an boolean indicating where this Router is read-only or not. MatchRoutesIgnoreCase Gets or sets whether this Router will match routes ignoring case. MethodNotAllowedErrorHandler Gets or sets the Router \"405 Method Not Allowed\" handler. NotFoundErrorHandler Gets or sets the Router \"404 Not Found\" handler. Prefix Gets or sets the prefix which will be applied to all next defining routes in this router. Methods AutoScanModules(Type, Assembly) Scans for all types that implements the specified module type and associates an instance of each type to the router. AutoScanModules<TModule>() Scans for all types that implements TModule and associates an instance of each type to the router. Note that, TModule must be an RouterModule type and an accessible constructor for each type must be present. AutoScanModules<TModule>(Assembly) Scans for all types that implements TModule and associates an instance of each type to the router. Note that, TModule must be an RouterModule type and an accessible constructor for each type must be present. GetDefinedRoutes() Gets all routes defined on this router instance. GetRouteFromName(string) Gets an defined Route by their name property. GetRouteFromPath(RouteMethod, string) Gets the first matched Route by their HTTP method and path. GetRouteFromPath(string) Gets the first matched Route by their URL path. IsDefined(RouteMethod, string) Gets an boolean indicating if there are any route that matches the specified method and route path. MapAny(string, RouteAction) Maps an route which matches any HTTP method, using the specified path and action function. MapDelete(string, RouteAction) Maps an DELETE route using the specified path and action function. MapGet(string, RouteAction) Maps an GET route using the specified path and action function. MapPatch(string, RouteAction) Maps an PATCH route using the specified path and action function. MapPost(string, RouteAction) Maps an POST route using the specified path and action function. MapPut(string, RouteAction) Maps an PUT route using the specified path and action function. RegisterValueHandler<T>(RouterActionHandlerCallback<T>) Register an type handling association to converting it to an HttpResponse object. ResolveActionResult(object?) Resolves the specified object into an valid HttpResponse using the defined value handlers or throws an exception if not possible. Rewrite(string, string) Maps a rewrite route, which redirects all requests that match the given path to another path, keeping the body and headers of the original request. SetObject(object) Searches for all instance and static methods that are marked with an attribute of type RouteAttribute in the specified object and creates routes for these methods. SetObject(Type) Searches for all instance and static methods that are marked with an attribute of type RouteAttribute in the specified object and creates routes for these methods. SetObject(Type, object) Searches for all instance and static methods that are marked with an attribute of type RouteAttribute in the specified object and creates routes for these methods. SetObject<TObject>() Searches for all instance and static methods that are marked with an attribute of type RouteAttribute in the specified object and creates routes for these methods. SetObject<TObject>(TObject) Searches for all instance and static methods that are marked with an attribute of type RouteAttribute in the specified object and creates routes for these methods. SetRoute(Route) Defines an route in this Router instance. SetRoute(RouteMethod, string, RouteAction) Defines an route with their method, path and action function. SetRoute(RouteMethod, string, RouteAction, string?, IRequestHandler[]) Defines an route with their method, path, action function, name and request handlers. SetRoute(RouteMethod, string, Delegate) Defines an route with their method, path and action function. SetRoute(RouteMethod, string, Delegate, string?) Defines an route with their method, path, action function and name. TryResolveActionResult(object?, out HttpResponse?) Tries to resolve the specified object into an valid HttpResponse using the defined value handlers. Operators operator +(Router, Route) Defines an route to an router."
  },
  "api/Sisk.Core.Routing.Router.op_Addition.html": {
    "href": "api/Sisk.Core.Routing.Router.op_Addition.html",
    "title": "Operator operator + | Sisk Framework",
    "keywords": "Operator operator + Namespace Sisk.Core.Routing Assembly Sisk.Core.dll operator +(Router, Route) Defines an route to an router. public static Router operator +(Router r, Route route) Parameters r Router The router instance which the route is being set. route Route The route to be defined in the router. Returns Router"
  },
  "api/Sisk.Core.Routing.RouterActionHandlerCallback-1.-ctor.html": {
    "href": "api/Sisk.Core.Routing.RouterActionHandlerCallback-1.-ctor.html",
    "title": "Constructor RouterActionHandlerCallback | Sisk Framework",
    "keywords": "Constructor RouterActionHandlerCallback Namespace Sisk.Core.Routing Assembly Sisk.Core.dll RouterActionHandlerCallback(object, nint) public RouterActionHandlerCallback(object @object, nint method) Parameters object object method nint"
  },
  "api/Sisk.Core.Routing.RouterActionHandlerCallback-1.BeginInvoke.html": {
    "href": "api/Sisk.Core.Routing.RouterActionHandlerCallback-1.BeginInvoke.html",
    "title": "Method BeginInvoke | Sisk Framework",
    "keywords": "Method BeginInvoke Namespace Sisk.Core.Routing Assembly Sisk.Core.dll BeginInvoke(T, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(T input, AsyncCallback callback, object @object) Parameters input T callback AsyncCallback object object Returns IAsyncResult"
  },
  "api/Sisk.Core.Routing.RouterActionHandlerCallback-1.EndInvoke.html": {
    "href": "api/Sisk.Core.Routing.RouterActionHandlerCallback-1.EndInvoke.html",
    "title": "Method EndInvoke | Sisk Framework",
    "keywords": "Method EndInvoke Namespace Sisk.Core.Routing Assembly Sisk.Core.dll EndInvoke(IAsyncResult) public virtual HttpResponse EndInvoke(IAsyncResult result) Parameters result IAsyncResult Returns HttpResponse"
  },
  "api/Sisk.Core.Routing.RouterActionHandlerCallback-1.Invoke.html": {
    "href": "api/Sisk.Core.Routing.RouterActionHandlerCallback-1.Invoke.html",
    "title": "Method Invoke | Sisk Framework",
    "keywords": "Method Invoke Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Invoke(T) public virtual HttpResponse Invoke(T input) Parameters input T Returns HttpResponse"
  },
  "api/Sisk.Core.Routing.RouterActionHandlerCallback-1.html": {
    "href": "api/Sisk.Core.Routing.RouterActionHandlerCallback-1.html",
    "title": "Delegate RouterActionHandlerCallback<T> | Sisk Framework",
    "keywords": "Delegate RouterActionHandlerCallback<T> Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Represents the function that receives an object of the T and returns an HttpResponse response from the informed object. public delegate HttpResponse RouterActionHandlerCallback<T>(T input) where T : notnull Parameters input T The result router object. Returns HttpResponse Represents the function that receives an object of the T and returns an response from the informed object. Type Parameters T The input object type. Cannot be nullable. Constructors RouterActionHandlerCallback(object, nint) Methods BeginInvoke(T, AsyncCallback, object) EndInvoke(IAsyncResult) Invoke(T)"
  },
  "api/Sisk.Core.Routing.RouterModule.-ctor.html": {
    "href": "api/Sisk.Core.Routing.RouterModule.-ctor.html",
    "title": "Constructor RouterModule | Sisk Framework",
    "keywords": "Constructor RouterModule Namespace Sisk.Core.Routing Assembly Sisk.Core.dll RouterModule() protected RouterModule()"
  },
  "api/Sisk.Core.Routing.RouterModule.HasRequestHandler.html": {
    "href": "api/Sisk.Core.Routing.RouterModule.HasRequestHandler.html",
    "title": "Method HasRequestHandler | Sisk Framework",
    "keywords": "Method HasRequestHandler Namespace Sisk.Core.Routing Assembly Sisk.Core.dll HasRequestHandler(IRequestHandler) Registers an IRequestHandler on all routes defined by this module. protected void HasRequestHandler(IRequestHandler handler) Parameters handler IRequestHandler The IRequestHandler instance which will be applied to all registered routes of this class."
  },
  "api/Sisk.Core.Routing.RouterModule.OnRouteCreating.html": {
    "href": "api/Sisk.Core.Routing.RouterModule.OnRouteCreating.html",
    "title": "Method OnRouteCreating | Sisk Framework",
    "keywords": "Method OnRouteCreating Namespace Sisk.Core.Routing Assembly Sisk.Core.dll OnRouteCreating(Route) This method is called before a route is defined in the router and after it is created in this class, so its attributes and parameters can be modified. This method must be overloaded in the extending class and must not be called directly. protected virtual void OnRouteCreating(Route configuringRoute) Parameters configuringRoute Route The route being defined on the router."
  },
  "api/Sisk.Core.Routing.RouterModule.OnSetup.html": {
    "href": "api/Sisk.Core.Routing.RouterModule.OnSetup.html",
    "title": "Method OnSetup | Sisk Framework",
    "keywords": "Method OnSetup Namespace Sisk.Core.Routing Assembly Sisk.Core.dll OnSetup(Router) Method that is called when an Router is defining routes from the current RouterModule. protected virtual void OnSetup(Router parentRouter) Parameters parentRouter Router The Router which is defining routes from the current RouterModule. Remarks The base method OnSetup(Router) is mandatory to be called on all derived methods."
  },
  "api/Sisk.Core.Routing.RouterModule.Prefix.html": {
    "href": "api/Sisk.Core.Routing.RouterModule.Prefix.html",
    "title": "Property Prefix | Sisk Framework",
    "keywords": "Property Prefix Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Prefix Gets or sets the router prefix for this class. This property overrides any value defined by RoutePrefixAttribute set in this class. public string? Prefix { get; set; } Property Value string"
  },
  "api/Sisk.Core.Routing.RouterModule.RequestHandlers.html": {
    "href": "api/Sisk.Core.Routing.RouterModule.RequestHandlers.html",
    "title": "Property RequestHandlers | Sisk Framework",
    "keywords": "Property RequestHandlers Namespace Sisk.Core.Routing Assembly Sisk.Core.dll RequestHandlers Gets or sets an list of IRequestHandler this RouterModule runs. public IList<IRequestHandler> RequestHandlers { get; set; } Property Value IList<IRequestHandler>"
  },
  "api/Sisk.Core.Routing.RouterModule.html": {
    "href": "api/Sisk.Core.Routing.RouterModule.html",
    "title": "Class RouterModule | Sisk Framework",
    "keywords": "Class RouterModule Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Indicates that extended class supports router modules, which allows the management of routes, request handlers and prefixes. public abstract class RouterModule Inheritance object RouterModule Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors RouterModule() Properties Prefix Gets or sets the router prefix for this class. This property overrides any value defined by RoutePrefixAttribute set in this class. RequestHandlers Gets or sets an list of IRequestHandler this RouterModule runs. Methods HasRequestHandler(IRequestHandler) Registers an IRequestHandler on all routes defined by this module. OnRouteCreating(Route) This method is called before a route is defined in the router and after it is created in this class, so its attributes and parameters can be modified. This method must be overloaded in the extending class and must not be called directly. OnSetup(Router) Method that is called when an Router is defining routes from the current RouterModule."
  },
  "api/Sisk.Core.Routing.RoutingErrorCallback.-ctor.html": {
    "href": "api/Sisk.Core.Routing.RoutingErrorCallback.-ctor.html",
    "title": "Constructor RoutingErrorCallback | Sisk Framework",
    "keywords": "Constructor RoutingErrorCallback Namespace Sisk.Core.Routing Assembly Sisk.Core.dll RoutingErrorCallback(object, nint) public RoutingErrorCallback(object @object, nint method) Parameters object object method nint"
  },
  "api/Sisk.Core.Routing.RoutingErrorCallback.BeginInvoke.html": {
    "href": "api/Sisk.Core.Routing.RoutingErrorCallback.BeginInvoke.html",
    "title": "Method BeginInvoke | Sisk Framework",
    "keywords": "Method BeginInvoke Namespace Sisk.Core.Routing Assembly Sisk.Core.dll BeginInvoke(HttpContext, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(HttpContext context, AsyncCallback callback, object @object) Parameters context HttpContext callback AsyncCallback object object Returns IAsyncResult"
  },
  "api/Sisk.Core.Routing.RoutingErrorCallback.EndInvoke.html": {
    "href": "api/Sisk.Core.Routing.RoutingErrorCallback.EndInvoke.html",
    "title": "Method EndInvoke | Sisk Framework",
    "keywords": "Method EndInvoke Namespace Sisk.Core.Routing Assembly Sisk.Core.dll EndInvoke(IAsyncResult) public virtual HttpResponse EndInvoke(IAsyncResult result) Parameters result IAsyncResult Returns HttpResponse"
  },
  "api/Sisk.Core.Routing.RoutingErrorCallback.Invoke.html": {
    "href": "api/Sisk.Core.Routing.RoutingErrorCallback.Invoke.html",
    "title": "Method Invoke | Sisk Framework",
    "keywords": "Method Invoke Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Invoke(HttpContext) public virtual HttpResponse Invoke(HttpContext context) Parameters context HttpContext Returns HttpResponse"
  },
  "api/Sisk.Core.Routing.RoutingErrorCallback.html": {
    "href": "api/Sisk.Core.Routing.RoutingErrorCallback.html",
    "title": "Delegate RoutingErrorCallback | Sisk Framework",
    "keywords": "Delegate RoutingErrorCallback Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Represents the function that is called when an request reaches an error on the router. public delegate HttpResponse RoutingErrorCallback(HttpContext context) Parameters context HttpContext Represents the function that is called when an request reaches an error on the router. Returns HttpResponse Represents the function that is called when an request reaches an error on the router. Constructors RoutingErrorCallback(object, nint) Methods BeginInvoke(HttpContext, AsyncCallback, object) EndInvoke(IAsyncResult) Invoke(HttpContext)"
  },
  "api/Sisk.Core.Routing.ValueResult-1.html": {
    "href": "api/Sisk.Core.Routing.ValueResult-1.html",
    "title": "Class ValueResult<T> | Sisk Framework",
    "keywords": "Class ValueResult<T> Namespace Sisk.Core.Routing Assembly Sisk.Core.dll Represents a mutable type for boxing objects by value or reference in a response from a router. public sealed class ValueResult<T> where T : notnull Type Parameters T The type of object to be boxed. Inheritance object ValueResult<T> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode()"
  },
  "api/Sisk.Core.Routing.html": {
    "href": "api/Sisk.Core.Routing.html",
    "title": "Namespace Sisk.Core.Routing | Sisk Framework",
    "keywords": "Namespace Sisk.Core.Routing Classes AsyncRequestHandler Represents a class that implements IRequestHandler and its execution method is asynchronous. RegexRoute Represents an Route which it's implementation already enables UseRegex. RegexRouteAttribute Represents a mapping to an route, which it's path is defined by an regular expression. This attribute is an shorthand from RouteAttribute. RequestHandler Represents an abstract class which implements IRequestHandler. RequestHandlerAttribute Specifies that the method or class, when used on this attribute, will instantiate the type and call the IRequestHandler with given parameters. RequestHandlerAttribute<T> Specifies that the method or class, when used on this attribute, will instantiate the type and call the IRequestHandler with given parameters. Route Represents an HTTP route to be matched by an Router. RouteAttribute Represents an class that, when applied to a method, will be recognized by a router as a route. RouteDeleteAttribute Represents a mapping to an HTTP DELETE route. This attribute is an shorthand from RouteAttribute. RouteGetAttribute Represents a mapping to an HTTP GET route. This attribute is an shorthand from RouteAttribute. RoutePatchAttribute Represents a mapping to an HTTP PATCH route. This attribute is an shorthand from RouteAttribute. RoutePostAttribute Represents a mapping to an HTTP POST route. This attribute is an shorthand from RouteAttribute. RoutePrefixAttribute Represents an attribute that, when applied to an class containing routes, all child routes will start with the specified prefix. RoutePutAttribute Represents a mapping to an HTTP PUT route. This attribute is an shorthand from RouteAttribute. Router Represents a collection of Route and main executor of actions in the HttpServer. RouterModule Indicates that extended class supports router modules, which allows the management of routes, request handlers and prefixes. ValueResult<T> Represents a mutable type for boxing objects by value or reference in a response from a router. Interfaces IRequestHandler Represents an interface that is executed before a request. Enums LogOutput Determines the way the server can write log messages. This enumerator is for giving permissions for certain contexts to be able or not to write to the server logs, such as AccessLogsStream and ErrorsLogsStream. RequestHandlerExecutionMode Defines when the IRequestHandler object should be executed. RouteMethod Represents an HTTP method to be matched in an Route. Delegates ExceptionErrorCallback Represents the function that is called after the route action threw an exception. ParameterlessRouteAction Represents the function that is called after the route is matched with the request. RouteAction Represents the function that is called after the route is matched with the request. RouterActionHandlerCallback<T> Represents the function that receives an object of the T and returns an HttpResponse response from the informed object. RoutingErrorCallback Represents the function that is called when an request reaches an error on the router."
  },
  "api/Sisk.Core.html": {
    "href": "api/Sisk.Core.html",
    "title": "Namespace Sisk.Core | Sisk Framework",
    "keywords": "Namespace Sisk.Core Namespaces Sisk.Core.Entity Sisk.Core.Helpers Sisk.Core.Http Sisk.Core.Routing"
  },
  "api/Sisk.IniConfiguration.IniConfigurationReader.-ctor.html": {
    "href": "api/Sisk.IniConfiguration.IniConfigurationReader.-ctor.html",
    "title": "Constructor IniConfigurationReader | Sisk Framework",
    "keywords": "Constructor IniConfigurationReader Namespace Sisk.IniConfiguration Assembly Sisk.IniConfiguration.dll IniConfigurationReader() public IniConfigurationReader()"
  },
  "api/Sisk.IniConfiguration.IniConfigurationReader.ReadConfiguration.html": {
    "href": "api/Sisk.IniConfiguration.IniConfigurationReader.ReadConfiguration.html",
    "title": "Method ReadConfiguration | Sisk Framework",
    "keywords": "Method ReadConfiguration Namespace Sisk.IniConfiguration Assembly Sisk.IniConfiguration.dll ReadConfiguration(ConfigurationContext) Represents the method that reads and applies settings from a settings file. public void ReadConfiguration(ConfigurationContext context) Parameters context ConfigurationContext The configuration context object."
  },
  "api/Sisk.IniConfiguration.IniConfigurationReader.html": {
    "href": "api/Sisk.IniConfiguration.IniConfigurationReader.html",
    "title": "Class IniConfigurationReader | Sisk Framework",
    "keywords": "Class IniConfigurationReader Namespace Sisk.IniConfiguration Assembly Sisk.IniConfiguration.dll Provides an INI-Document based configuration-reader pipeline. public sealed class IniConfigurationReader : IConfigurationReader Inheritance object IniConfigurationReader Implements IConfigurationReader Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors IniConfigurationReader() Methods ReadConfiguration(ConfigurationContext) Represents the method that reads and applies settings from a settings file."
  },
  "api/Sisk.IniConfiguration.IniDocument.Empty.html": {
    "href": "api/Sisk.IniConfiguration.IniDocument.Empty.html",
    "title": "Field Empty | Sisk Framework",
    "keywords": "Field Empty Namespace Sisk.IniConfiguration Assembly Sisk.IniConfiguration.dll public static readonly IniDocument Empty Returns IniDocument"
  },
  "api/Sisk.IniConfiguration.IniDocument.FromFile.html": {
    "href": "api/Sisk.IniConfiguration.IniDocument.FromFile.html",
    "title": "Method FromFile | Sisk Framework",
    "keywords": "Method FromFile Namespace Sisk.IniConfiguration Assembly Sisk.IniConfiguration.dll FromFile(string, Encoding?, bool) public static IniDocument FromFile(string filePath, Encoding? encoding = null, bool throwIfNotExists = true) Parameters filePath string encoding Encoding throwIfNotExists bool Returns IniDocument"
  },
  "api/Sisk.IniConfiguration.IniDocument.FromStream.html": {
    "href": "api/Sisk.IniConfiguration.IniDocument.FromStream.html",
    "title": "Method FromStream | Sisk Framework",
    "keywords": "Method FromStream Namespace Sisk.IniConfiguration Assembly Sisk.IniConfiguration.dll FromStream(Stream, Encoding?) Creates an new IniDocument document from the specified stream using the specified encoding. public static IniDocument FromStream(Stream stream, Encoding? encoding = null) Parameters stream Stream The input stream where the INI document is. encoding Encoding Optional. The encoding used to read the stream. Defaults to UTF-8. Returns IniDocument FromStream(TextReader) Creates an new IniDocument document from the specified TextReader. public static IniDocument FromStream(TextReader reader) Parameters reader TextReader The TextReader instance. Returns IniDocument"
  },
  "api/Sisk.IniConfiguration.IniDocument.FromString.html": {
    "href": "api/Sisk.IniConfiguration.IniDocument.FromString.html",
    "title": "Method FromString | Sisk Framework",
    "keywords": "Method FromString Namespace Sisk.IniConfiguration Assembly Sisk.IniConfiguration.dll FromString(string) Creates an new IniDocument document from the specified string, reading it as an UTF-8 string. public static IniDocument FromString(string iniConfiguration) Parameters iniConfiguration string The UTF-8 string. Returns IniDocument"
  },
  "api/Sisk.IniConfiguration.IniDocument.GetSection.html": {
    "href": "api/Sisk.IniConfiguration.IniDocument.GetSection.html",
    "title": "Method GetSection | Sisk Framework",
    "keywords": "Method GetSection Namespace Sisk.IniConfiguration Assembly Sisk.IniConfiguration.dll GetSection(string) Gets an defined INI section from this document. The search is case-insensitive. public IniSection? GetSection(string sectionName) Parameters sectionName string The section name. Returns IniSection The IniSection object if found, or null if not defined."
  },
  "api/Sisk.IniConfiguration.IniDocument.Global.html": {
    "href": "api/Sisk.IniConfiguration.IniDocument.Global.html",
    "title": "Property Global | Sisk Framework",
    "keywords": "Property Global Namespace Sisk.IniConfiguration Assembly Sisk.IniConfiguration.dll Global Gets the global INI section, which is the primary section in the document. public IniSection Global { get; } Property Value IniSection"
  },
  "api/Sisk.IniConfiguration.IniDocument.Sections.html": {
    "href": "api/Sisk.IniConfiguration.IniDocument.Sections.html",
    "title": "Property Sections | Sisk Framework",
    "keywords": "Property Sections Namespace Sisk.IniConfiguration Assembly Sisk.IniConfiguration.dll Sections Gets all INI sections defined in this INI document. public IList<IniSection> Sections { get; } Property Value IList<IniSection>"
  },
  "api/Sisk.IniConfiguration.IniDocument.html": {
    "href": "api/Sisk.IniConfiguration.IniDocument.html",
    "title": "Class IniDocument | Sisk Framework",
    "keywords": "Class IniDocument Namespace Sisk.IniConfiguration Assembly Sisk.IniConfiguration.dll Represents an INI configuration document. public sealed class IniDocument Inheritance object IniDocument Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Fields Empty Properties Global Gets the global INI section, which is the primary section in the document. Sections Gets all INI sections defined in this INI document. Methods FromFile(string, Encoding?, bool) FromStream(Stream, Encoding?) Creates an new IniDocument document from the specified stream using the specified encoding. FromStream(TextReader) Creates an new IniDocument document from the specified TextReader. FromString(string) Creates an new IniDocument document from the specified string, reading it as an UTF-8 string. GetSection(string) Gets an defined INI section from this document. The search is case-insensitive."
  },
  "api/Sisk.IniConfiguration.IniSection.ContainsKey.html": {
    "href": "api/Sisk.IniConfiguration.IniSection.ContainsKey.html",
    "title": "Method ContainsKey | Sisk Framework",
    "keywords": "Method ContainsKey Namespace Sisk.IniConfiguration Assembly Sisk.IniConfiguration.dll ContainsKey(string) Gets an boolean indicating if the specified key/property name is defined in this IniSection. public bool ContainsKey(string key) Parameters key string The property name. Returns bool An bool indicating if the specified property name is defined or not."
  },
  "api/Sisk.IniConfiguration.IniSection.Count.html": {
    "href": "api/Sisk.IniConfiguration.IniSection.Count.html",
    "title": "Property Count | Sisk Framework",
    "keywords": "Property Count Namespace Sisk.IniConfiguration Assembly Sisk.IniConfiguration.dll Count Gets the number of properties in this INI section. public int Count { get; } Property Value int"
  },
  "api/Sisk.IniConfiguration.IniSection.GetEnumerator.html": {
    "href": "api/Sisk.IniConfiguration.IniSection.GetEnumerator.html",
    "title": "Method GetEnumerator | Sisk Framework",
    "keywords": "Method GetEnumerator Namespace Sisk.IniConfiguration Assembly Sisk.IniConfiguration.dll GetEnumerator() public IEnumerator<KeyValuePair<string, string[]>> GetEnumerator() Returns IEnumerator<KeyValuePair<string, string[]>>"
  },
  "api/Sisk.IniConfiguration.IniSection.GetMany.html": {
    "href": "api/Sisk.IniConfiguration.IniSection.GetMany.html",
    "title": "Method GetMany | Sisk Framework",
    "keywords": "Method GetMany Namespace Sisk.IniConfiguration Assembly Sisk.IniConfiguration.dll GetMany(string) Gets all values defined in this INI section by their property name. public string[] GetMany(string key) Parameters key string The property name. Returns string[] All values associated with the specified property name."
  },
  "api/Sisk.IniConfiguration.IniSection.GetOne.html": {
    "href": "api/Sisk.IniConfiguration.IniSection.GetOne.html",
    "title": "Method GetOne | Sisk Framework",
    "keywords": "Method GetOne Namespace Sisk.IniConfiguration Assembly Sisk.IniConfiguration.dll GetOne(string) Gets the last value defined in this INI section by their property name. public string? GetOne(string key) Parameters key string The property name. Returns string The last value associated with the specified property name, or null if nothing is found."
  },
  "api/Sisk.IniConfiguration.IniSection.Item.html": {
    "href": "api/Sisk.IniConfiguration.IniSection.Item.html",
    "title": "Property this | Sisk Framework",
    "keywords": "Property this Namespace Sisk.IniConfiguration Assembly Sisk.IniConfiguration.dll this[string] Gets all values associated with the specified property name, performing an case-insensitive search. public string[] this[string key] { get; } Parameters key string The property name. Property Value string[]"
  },
  "api/Sisk.IniConfiguration.IniSection.Keys.html": {
    "href": "api/Sisk.IniConfiguration.IniSection.Keys.html",
    "title": "Property Keys | Sisk Framework",
    "keywords": "Property Keys Namespace Sisk.IniConfiguration Assembly Sisk.IniConfiguration.dll Keys Gets all keys defined in this INI section, without duplicates. public IEnumerable<string> Keys { get; } Property Value IEnumerable<string>"
  },
  "api/Sisk.IniConfiguration.IniSection.Name.html": {
    "href": "api/Sisk.IniConfiguration.IniSection.Name.html",
    "title": "Property Name | Sisk Framework",
    "keywords": "Property Name Namespace Sisk.IniConfiguration Assembly Sisk.IniConfiguration.dll Name Gets the INI section name. public string Name { get; } Property Value string"
  },
  "api/Sisk.IniConfiguration.IniSection.TryGetValue.html": {
    "href": "api/Sisk.IniConfiguration.IniSection.TryGetValue.html",
    "title": "Method TryGetValue | Sisk Framework",
    "keywords": "Method TryGetValue Namespace Sisk.IniConfiguration Assembly Sisk.IniConfiguration.dll TryGetValue(string, out string[]) public bool TryGetValue(string key, out string[] value) Parameters key string value string[] Returns bool"
  },
  "api/Sisk.IniConfiguration.IniSection.Values.html": {
    "href": "api/Sisk.IniConfiguration.IniSection.Values.html",
    "title": "Property Values | Sisk Framework",
    "keywords": "Property Values Namespace Sisk.IniConfiguration Assembly Sisk.IniConfiguration.dll Values Gets all values defined in this INI section. public IEnumerable<string[]> Values { get; } Property Value IEnumerable<string[]>"
  },
  "api/Sisk.IniConfiguration.IniSection.html": {
    "href": "api/Sisk.IniConfiguration.IniSection.html",
    "title": "Class IniSection | Sisk Framework",
    "keywords": "Class IniSection Namespace Sisk.IniConfiguration Assembly Sisk.IniConfiguration.dll Represents an INI section, which contains it's own properties. public sealed class IniSection : IReadOnlyDictionary<string, string[]>, IReadOnlyCollection<KeyValuePair<string, string[]>>, IEnumerable<KeyValuePair<string, string[]>>, IEnumerable Inheritance object IniSection Implements IReadOnlyDictionary<string, string[]> IReadOnlyCollection<KeyValuePair<string, string[]>> IEnumerable<KeyValuePair<string, string[]>> IEnumerable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties Count Gets the number of properties in this INI section. this[string] Gets all values associated with the specified property name, performing an case-insensitive search. Keys Gets all keys defined in this INI section, without duplicates. Name Gets the INI section name. Values Gets all values defined in this INI section. Methods ContainsKey(string) Gets an boolean indicating if the specified key/property name is defined in this IniSection. GetEnumerator() GetMany(string) Gets all values defined in this INI section by their property name. GetOne(string) Gets the last value defined in this INI section by their property name. TryGetValue(string, out string[])"
  },
  "api/Sisk.IniConfiguration.Serializer.IniReader.-ctor.html": {
    "href": "api/Sisk.IniConfiguration.Serializer.IniReader.-ctor.html",
    "title": "Constructor IniReader | Sisk Framework",
    "keywords": "Constructor IniReader Namespace Sisk.IniConfiguration.Serializer Assembly Sisk.IniConfiguration.dll IniReader(TextReader) Creates an new IniReader with the specified text reader. public IniReader(TextReader reader) Parameters reader TextReader The TextReader instace to read the INI document."
  },
  "api/Sisk.IniConfiguration.Serializer.IniReader.Dispose.html": {
    "href": "api/Sisk.IniConfiguration.Serializer.IniReader.Dispose.html",
    "title": "Method Dispose | Sisk Framework",
    "keywords": "Method Dispose Namespace Sisk.IniConfiguration.Serializer Assembly Sisk.IniConfiguration.dll Dispose() public void Dispose()"
  },
  "api/Sisk.IniConfiguration.Serializer.IniReader.Read.html": {
    "href": "api/Sisk.IniConfiguration.Serializer.IniReader.Read.html",
    "title": "Method Read | Sisk Framework",
    "keywords": "Method Read Namespace Sisk.IniConfiguration.Serializer Assembly Sisk.IniConfiguration.dll Read() Reads the INI document from the input stream. public IniDocument Read() Returns IniDocument An IniDocument file containing all properties and data from the input stream."
  },
  "api/Sisk.IniConfiguration.Serializer.IniReader.Reader.html": {
    "href": "api/Sisk.IniConfiguration.Serializer.IniReader.Reader.html",
    "title": "Property Reader | Sisk Framework",
    "keywords": "Property Reader Namespace Sisk.IniConfiguration.Serializer Assembly Sisk.IniConfiguration.dll Reader Gets the TextReader which is providing data to this INI reader. public TextReader Reader { get; } Property Value TextReader"
  },
  "api/Sisk.IniConfiguration.Serializer.IniReader.html": {
    "href": "api/Sisk.IniConfiguration.Serializer.IniReader.html",
    "title": "Class IniReader | Sisk Framework",
    "keywords": "Class IniReader Namespace Sisk.IniConfiguration.Serializer Assembly Sisk.IniConfiguration.dll Provides an INI-document reader and parser. public sealed class IniReader : IDisposable Inheritance object IniReader Implements IDisposable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors IniReader(TextReader) Creates an new IniReader with the specified text reader. Properties Reader Gets the TextReader which is providing data to this INI reader. Methods Dispose() Read() Reads the INI document from the input stream."
  },
  "api/Sisk.IniConfiguration.Serializer.html": {
    "href": "api/Sisk.IniConfiguration.Serializer.html",
    "title": "Namespace Sisk.IniConfiguration.Serializer | Sisk Framework",
    "keywords": "Namespace Sisk.IniConfiguration.Serializer Classes IniReader Provides an INI-document reader and parser."
  },
  "api/Sisk.IniConfiguration.html": {
    "href": "api/Sisk.IniConfiguration.html",
    "title": "Namespace Sisk.IniConfiguration | Sisk Framework",
    "keywords": "Namespace Sisk.IniConfiguration Namespaces Sisk.IniConfiguration.Serializer Classes IniConfigurationReader Provides an INI-Document based configuration-reader pipeline. IniDocument Represents an INI configuration document. IniSection Represents an INI section, which contains it's own properties."
  },
  "api/Sisk.JsonRPC.Annotations.MethodDescriptionAttribute.-ctor.html": {
    "href": "api/Sisk.JsonRPC.Annotations.MethodDescriptionAttribute.-ctor.html",
    "title": "Constructor MethodDescriptionAttribute | Sisk Framework",
    "keywords": "Constructor MethodDescriptionAttribute Namespace Sisk.JsonRPC.Annotations Assembly Sisk.JsonRPC.dll MethodDescriptionAttribute(string) public MethodDescriptionAttribute(string description) Parameters description string"
  },
  "api/Sisk.JsonRPC.Annotations.MethodDescriptionAttribute.Category.html": {
    "href": "api/Sisk.JsonRPC.Annotations.MethodDescriptionAttribute.Category.html",
    "title": "Property Category | Sisk Framework",
    "keywords": "Property Category Namespace Sisk.JsonRPC.Annotations Assembly Sisk.JsonRPC.dll Category public string? Category { get; set; } Property Value string"
  },
  "api/Sisk.JsonRPC.Annotations.MethodDescriptionAttribute.Description.html": {
    "href": "api/Sisk.JsonRPC.Annotations.MethodDescriptionAttribute.Description.html",
    "title": "Property Description | Sisk Framework",
    "keywords": "Property Description Namespace Sisk.JsonRPC.Annotations Assembly Sisk.JsonRPC.dll Description public string Description { get; } Property Value string"
  },
  "api/Sisk.JsonRPC.Annotations.MethodDescriptionAttribute.html": {
    "href": "api/Sisk.JsonRPC.Annotations.MethodDescriptionAttribute.html",
    "title": "Class MethodDescriptionAttribute | Sisk Framework",
    "keywords": "Class MethodDescriptionAttribute Namespace Sisk.JsonRPC.Annotations Assembly Sisk.JsonRPC.dll [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)] public sealed class MethodDescriptionAttribute : Attribute Inheritance object Attribute MethodDescriptionAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors MethodDescriptionAttribute(string) Properties Category Description"
  },
  "api/Sisk.JsonRPC.Annotations.ParamDescriptionAttribute.-ctor.html": {
    "href": "api/Sisk.JsonRPC.Annotations.ParamDescriptionAttribute.-ctor.html",
    "title": "Constructor ParamDescriptionAttribute | Sisk Framework",
    "keywords": "Constructor ParamDescriptionAttribute Namespace Sisk.JsonRPC.Annotations Assembly Sisk.JsonRPC.dll ParamDescriptionAttribute(string, string) public ParamDescriptionAttribute(string paramName, string description) Parameters paramName string description string"
  },
  "api/Sisk.JsonRPC.Annotations.ParamDescriptionAttribute.Description.html": {
    "href": "api/Sisk.JsonRPC.Annotations.ParamDescriptionAttribute.Description.html",
    "title": "Property Description | Sisk Framework",
    "keywords": "Property Description Namespace Sisk.JsonRPC.Annotations Assembly Sisk.JsonRPC.dll Description public string Description { get; } Property Value string"
  },
  "api/Sisk.JsonRPC.Annotations.ParamDescriptionAttribute.ParameterName.html": {
    "href": "api/Sisk.JsonRPC.Annotations.ParamDescriptionAttribute.ParameterName.html",
    "title": "Property ParameterName | Sisk Framework",
    "keywords": "Property ParameterName Namespace Sisk.JsonRPC.Annotations Assembly Sisk.JsonRPC.dll ParameterName public string ParameterName { get; } Property Value string"
  },
  "api/Sisk.JsonRPC.Annotations.ParamDescriptionAttribute.html": {
    "href": "api/Sisk.JsonRPC.Annotations.ParamDescriptionAttribute.html",
    "title": "Class ParamDescriptionAttribute | Sisk Framework",
    "keywords": "Class ParamDescriptionAttribute Namespace Sisk.JsonRPC.Annotations Assembly Sisk.JsonRPC.dll [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)] public sealed class ParamDescriptionAttribute : Attribute Inheritance object Attribute ParamDescriptionAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors ParamDescriptionAttribute(string, string) Properties Description ParameterName"
  },
  "api/Sisk.JsonRPC.Annotations.WebMethodAttribute.-ctor.html": {
    "href": "api/Sisk.JsonRPC.Annotations.WebMethodAttribute.-ctor.html",
    "title": "Constructor WebMethodAttribute | Sisk Framework",
    "keywords": "Constructor WebMethodAttribute Namespace Sisk.JsonRPC.Annotations Assembly Sisk.JsonRPC.dll WebMethodAttribute() public WebMethodAttribute() WebMethodAttribute(string) public WebMethodAttribute(string methodName) Parameters methodName string"
  },
  "api/Sisk.JsonRPC.Annotations.WebMethodAttribute.Name.html": {
    "href": "api/Sisk.JsonRPC.Annotations.WebMethodAttribute.Name.html",
    "title": "Property Name | Sisk Framework",
    "keywords": "Property Name Namespace Sisk.JsonRPC.Annotations Assembly Sisk.JsonRPC.dll Name public string? Name { get; set; } Property Value string"
  },
  "api/Sisk.JsonRPC.Annotations.WebMethodAttribute.html": {
    "href": "api/Sisk.JsonRPC.Annotations.WebMethodAttribute.html",
    "title": "Class WebMethodAttribute | Sisk Framework",
    "keywords": "Class WebMethodAttribute Namespace Sisk.JsonRPC.Annotations Assembly Sisk.JsonRPC.dll [AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = false)] public sealed class WebMethodAttribute : Attribute Inheritance object Attribute WebMethodAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors WebMethodAttribute() WebMethodAttribute(string) Properties Name"
  },
  "api/Sisk.JsonRPC.Annotations.WebNameAttribute.-ctor.html": {
    "href": "api/Sisk.JsonRPC.Annotations.WebNameAttribute.-ctor.html",
    "title": "Constructor WebNameAttribute | Sisk Framework",
    "keywords": "Constructor WebNameAttribute Namespace Sisk.JsonRPC.Annotations Assembly Sisk.JsonRPC.dll WebNameAttribute(string) public WebNameAttribute(string name) Parameters name string"
  },
  "api/Sisk.JsonRPC.Annotations.WebNameAttribute.Name.html": {
    "href": "api/Sisk.JsonRPC.Annotations.WebNameAttribute.Name.html",
    "title": "Property Name | Sisk Framework",
    "keywords": "Property Name Namespace Sisk.JsonRPC.Annotations Assembly Sisk.JsonRPC.dll Name public string Name { get; set; } Property Value string"
  },
  "api/Sisk.JsonRPC.Annotations.WebNameAttribute.html": {
    "href": "api/Sisk.JsonRPC.Annotations.WebNameAttribute.html",
    "title": "Class WebNameAttribute | Sisk Framework",
    "keywords": "Class WebNameAttribute Namespace Sisk.JsonRPC.Annotations Assembly Sisk.JsonRPC.dll [AttributeUsage(AttributeTargets.Class)] public sealed class WebNameAttribute : Attribute Inheritance object Attribute WebNameAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors WebNameAttribute(string) Properties Name"
  },
  "api/Sisk.JsonRPC.Annotations.html": {
    "href": "api/Sisk.JsonRPC.Annotations.html",
    "title": "Namespace Sisk.JsonRPC.Annotations | Sisk Framework",
    "keywords": "Namespace Sisk.JsonRPC.Annotations Classes MethodDescriptionAttribute ParamDescriptionAttribute WebMethodAttribute WebNameAttribute"
  },
  "api/Sisk.JsonRPC.Documentation.IJsonRpcDocumentationExporter.ExportDocumentBytes.html": {
    "href": "api/Sisk.JsonRPC.Documentation.IJsonRpcDocumentationExporter.ExportDocumentBytes.html",
    "title": "Method ExportDocumentBytes | Sisk Framework",
    "keywords": "Method ExportDocumentBytes Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll ExportDocumentBytes(JsonRpcDocumentation) byte[] ExportDocumentBytes(JsonRpcDocumentation documentation) Parameters documentation JsonRpcDocumentation Returns byte[]"
  },
  "api/Sisk.JsonRPC.Documentation.IJsonRpcDocumentationExporter.html": {
    "href": "api/Sisk.JsonRPC.Documentation.IJsonRpcDocumentationExporter.html",
    "title": "Interface IJsonRpcDocumentationExporter | Sisk Framework",
    "keywords": "Interface IJsonRpcDocumentationExporter Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll public interface IJsonRpcDocumentationExporter Methods ExportDocumentBytes(JsonRpcDocumentation)"
  },
  "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentation.Export.html": {
    "href": "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentation.Export.html",
    "title": "Method Export | Sisk Framework",
    "keywords": "Method Export Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll Export(IJsonRpcDocumentationExporter) public byte[] Export(IJsonRpcDocumentationExporter exporter) Parameters exporter IJsonRpcDocumentationExporter Returns byte[]"
  },
  "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentation.ExportToJson.html": {
    "href": "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentation.ExportToJson.html",
    "title": "Method ExportToJson | Sisk Framework",
    "keywords": "Method ExportToJson Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll ExportToJson(JsonOptions) public string ExportToJson(JsonOptions options) Parameters options JsonOptions Returns string ExportToJson() public string ExportToJson() Returns string"
  },
  "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentation.Metadata.html": {
    "href": "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentation.Metadata.html",
    "title": "Property Metadata | Sisk Framework",
    "keywords": "Property Metadata Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll Metadata public JsonRpcDocumentationMetadata? Metadata { get; } Property Value JsonRpcDocumentationMetadata"
  },
  "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentation.Methods.html": {
    "href": "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentation.Methods.html",
    "title": "Property Methods | Sisk Framework",
    "keywords": "Property Methods Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll Methods public JsonRpcDocumentationMethod[] Methods { get; } Property Value JsonRpcDocumentationMethod[]"
  },
  "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentation.html": {
    "href": "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentation.html",
    "title": "Class JsonRpcDocumentation | Sisk Framework",
    "keywords": "Class JsonRpcDocumentation Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll public sealed class JsonRpcDocumentation Inheritance object JsonRpcDocumentation Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties Metadata Methods Methods Export(IJsonRpcDocumentationExporter) ExportToJson() ExportToJson(JsonOptions)"
  },
  "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentationMetadata.-ctor.html": {
    "href": "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentationMetadata.-ctor.html",
    "title": "Constructor JsonRpcDocumentationMetadata | Sisk Framework",
    "keywords": "Constructor JsonRpcDocumentationMetadata Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll JsonRpcDocumentationMetadata() public JsonRpcDocumentationMetadata()"
  },
  "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentationMetadata.AllowedMethods.html": {
    "href": "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentationMetadata.AllowedMethods.html",
    "title": "Property AllowedMethods | Sisk Framework",
    "keywords": "Property AllowedMethods Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll AllowedMethods public string[] AllowedMethods { get; set; } Property Value string[]"
  },
  "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentationMetadata.ApplicationDescription.html": {
    "href": "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentationMetadata.ApplicationDescription.html",
    "title": "Property ApplicationDescription | Sisk Framework",
    "keywords": "Property ApplicationDescription Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll ApplicationDescription public string? ApplicationDescription { get; set; } Property Value string"
  },
  "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentationMetadata.ApplicationName.html": {
    "href": "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentationMetadata.ApplicationName.html",
    "title": "Property ApplicationName | Sisk Framework",
    "keywords": "Property ApplicationName Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll ApplicationName public string? ApplicationName { get; set; } Property Value string"
  },
  "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentationMetadata.ServicePath.html": {
    "href": "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentationMetadata.ServicePath.html",
    "title": "Property ServicePath | Sisk Framework",
    "keywords": "Property ServicePath Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll ServicePath public string? ServicePath { get; set; } Property Value string"
  },
  "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentationMetadata.html": {
    "href": "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentationMetadata.html",
    "title": "Class JsonRpcDocumentationMetadata | Sisk Framework",
    "keywords": "Class JsonRpcDocumentationMetadata Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll public sealed class JsonRpcDocumentationMetadata Inheritance object JsonRpcDocumentationMetadata Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors JsonRpcDocumentationMetadata() Properties AllowedMethods ApplicationDescription ApplicationName ServicePath"
  },
  "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentationMethod.Category.html": {
    "href": "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentationMethod.Category.html",
    "title": "Property Category | Sisk Framework",
    "keywords": "Property Category Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll Category public string? Category { get; } Property Value string"
  },
  "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentationMethod.Description.html": {
    "href": "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentationMethod.Description.html",
    "title": "Property Description | Sisk Framework",
    "keywords": "Property Description Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll Description public string? Description { get; } Property Value string"
  },
  "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentationMethod.MethodName.html": {
    "href": "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentationMethod.MethodName.html",
    "title": "Property MethodName | Sisk Framework",
    "keywords": "Property MethodName Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll MethodName public string MethodName { get; } Property Value string"
  },
  "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentationMethod.Parameters.html": {
    "href": "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentationMethod.Parameters.html",
    "title": "Property Parameters | Sisk Framework",
    "keywords": "Property Parameters Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll Parameters public JsonRpcDocumentationParameter[] Parameters { get; } Property Value JsonRpcDocumentationParameter[]"
  },
  "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentationMethod.ReturnType.html": {
    "href": "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentationMethod.ReturnType.html",
    "title": "Property ReturnType | Sisk Framework",
    "keywords": "Property ReturnType Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll ReturnType public Type ReturnType { get; } Property Value Type"
  },
  "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentationMethod.html": {
    "href": "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentationMethod.html",
    "title": "Class JsonRpcDocumentationMethod | Sisk Framework",
    "keywords": "Class JsonRpcDocumentationMethod Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll public sealed class JsonRpcDocumentationMethod Inheritance object JsonRpcDocumentationMethod Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties Category Description MethodName Parameters ReturnType"
  },
  "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentationParameter.Description.html": {
    "href": "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentationParameter.Description.html",
    "title": "Property Description | Sisk Framework",
    "keywords": "Property Description Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll Description public string? Description { get; } Property Value string"
  },
  "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentationParameter.IsOptional.html": {
    "href": "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentationParameter.IsOptional.html",
    "title": "Property IsOptional | Sisk Framework",
    "keywords": "Property IsOptional Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll IsOptional public bool IsOptional { get; } Property Value bool"
  },
  "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentationParameter.ParameterName.html": {
    "href": "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentationParameter.ParameterName.html",
    "title": "Property ParameterName | Sisk Framework",
    "keywords": "Property ParameterName Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll ParameterName public string ParameterName { get; } Property Value string"
  },
  "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentationParameter.ParameterType.html": {
    "href": "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentationParameter.ParameterType.html",
    "title": "Property ParameterType | Sisk Framework",
    "keywords": "Property ParameterType Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll ParameterType public Type ParameterType { get; } Property Value Type"
  },
  "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentationParameter.html": {
    "href": "api/Sisk.JsonRPC.Documentation.JsonRpcDocumentationParameter.html",
    "title": "Class JsonRpcDocumentationParameter | Sisk Framework",
    "keywords": "Class JsonRpcDocumentationParameter Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll public sealed class JsonRpcDocumentationParameter Inheritance object JsonRpcDocumentationParameter Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties Description IsOptional ParameterName ParameterType"
  },
  "api/Sisk.JsonRPC.Documentation.JsonRpcHtmlExport.-ctor.html": {
    "href": "api/Sisk.JsonRPC.Documentation.JsonRpcHtmlExport.-ctor.html",
    "title": "Constructor JsonRpcHtmlExport | Sisk Framework",
    "keywords": "Constructor JsonRpcHtmlExport Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll JsonRpcHtmlExport() public JsonRpcHtmlExport()"
  },
  "api/Sisk.JsonRPC.Documentation.JsonRpcHtmlExport.EncodeDocumentationHtml.html": {
    "href": "api/Sisk.JsonRPC.Documentation.JsonRpcHtmlExport.EncodeDocumentationHtml.html",
    "title": "Method EncodeDocumentationHtml | Sisk Framework",
    "keywords": "Method EncodeDocumentationHtml Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll EncodeDocumentationHtml(JsonRpcDocumentation) protected string EncodeDocumentationHtml(JsonRpcDocumentation documentation) Parameters documentation JsonRpcDocumentation Returns string"
  },
  "api/Sisk.JsonRPC.Documentation.JsonRpcHtmlExport.ExportDocumentBytes.html": {
    "href": "api/Sisk.JsonRPC.Documentation.JsonRpcHtmlExport.ExportDocumentBytes.html",
    "title": "Method ExportDocumentBytes | Sisk Framework",
    "keywords": "Method ExportDocumentBytes Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll ExportDocumentBytes(JsonRpcDocumentation) public byte[] ExportDocumentBytes(JsonRpcDocumentation documentation) Parameters documentation JsonRpcDocumentation Returns byte[]"
  },
  "api/Sisk.JsonRPC.Documentation.JsonRpcHtmlExport.ExportMetadata.html": {
    "href": "api/Sisk.JsonRPC.Documentation.JsonRpcHtmlExport.ExportMetadata.html",
    "title": "Property ExportMetadata | Sisk Framework",
    "keywords": "Property ExportMetadata Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll ExportMetadata public bool ExportMetadata { get; set; } Property Value bool"
  },
  "api/Sisk.JsonRPC.Documentation.JsonRpcHtmlExport.ExportSummary.html": {
    "href": "api/Sisk.JsonRPC.Documentation.JsonRpcHtmlExport.ExportSummary.html",
    "title": "Property ExportSummary | Sisk Framework",
    "keywords": "Property ExportSummary Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll ExportSummary public bool ExportSummary { get; set; } Property Value bool"
  },
  "api/Sisk.JsonRPC.Documentation.JsonRpcHtmlExport.Header.html": {
    "href": "api/Sisk.JsonRPC.Documentation.JsonRpcHtmlExport.Header.html",
    "title": "Property Header | Sisk Framework",
    "keywords": "Property Header Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll Header public object? Header { get; set; } Property Value object"
  },
  "api/Sisk.JsonRPC.Documentation.JsonRpcHtmlExport.Style.html": {
    "href": "api/Sisk.JsonRPC.Documentation.JsonRpcHtmlExport.Style.html",
    "title": "Property Style | Sisk Framework",
    "keywords": "Property Style Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll Style public string? Style { get; set; } Property Value string"
  },
  "api/Sisk.JsonRPC.Documentation.JsonRpcHtmlExport.html": {
    "href": "api/Sisk.JsonRPC.Documentation.JsonRpcHtmlExport.html",
    "title": "Class JsonRpcHtmlExport | Sisk Framework",
    "keywords": "Class JsonRpcHtmlExport Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll public class JsonRpcHtmlExport : IJsonRpcDocumentationExporter Inheritance object JsonRpcHtmlExport Implements IJsonRpcDocumentationExporter Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors JsonRpcHtmlExport() Properties ExportMetadata ExportSummary Header Style Methods EncodeDocumentationHtml(JsonRpcDocumentation) ExportDocumentBytes(JsonRpcDocumentation)"
  },
  "api/Sisk.JsonRPC.Documentation.JsonRpcJsonExport.-ctor.html": {
    "href": "api/Sisk.JsonRPC.Documentation.JsonRpcJsonExport.-ctor.html",
    "title": "Constructor JsonRpcJsonExport | Sisk Framework",
    "keywords": "Constructor JsonRpcJsonExport Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll JsonRpcJsonExport() public JsonRpcJsonExport() JsonRpcJsonExport(JsonOptions) public JsonRpcJsonExport(JsonOptions options) Parameters options JsonOptions"
  },
  "api/Sisk.JsonRPC.Documentation.JsonRpcJsonExport.EncodeDocumentation.html": {
    "href": "api/Sisk.JsonRPC.Documentation.JsonRpcJsonExport.EncodeDocumentation.html",
    "title": "Method EncodeDocumentation | Sisk Framework",
    "keywords": "Method EncodeDocumentation Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll EncodeDocumentation(JsonRpcDocumentation) public JsonValue EncodeDocumentation(JsonRpcDocumentation documentation) Parameters documentation JsonRpcDocumentation Returns JsonValue"
  },
  "api/Sisk.JsonRPC.Documentation.JsonRpcJsonExport.ExportDocumentBytes.html": {
    "href": "api/Sisk.JsonRPC.Documentation.JsonRpcJsonExport.ExportDocumentBytes.html",
    "title": "Method ExportDocumentBytes | Sisk Framework",
    "keywords": "Method ExportDocumentBytes Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll ExportDocumentBytes(JsonRpcDocumentation) public byte[] ExportDocumentBytes(JsonRpcDocumentation documentation) Parameters documentation JsonRpcDocumentation Returns byte[]"
  },
  "api/Sisk.JsonRPC.Documentation.JsonRpcJsonExport.JsonOptions.html": {
    "href": "api/Sisk.JsonRPC.Documentation.JsonRpcJsonExport.JsonOptions.html",
    "title": "Property JsonOptions | Sisk Framework",
    "keywords": "Property JsonOptions Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll JsonOptions public JsonOptions JsonOptions { get; set; } Property Value JsonOptions"
  },
  "api/Sisk.JsonRPC.Documentation.JsonRpcJsonExport.html": {
    "href": "api/Sisk.JsonRPC.Documentation.JsonRpcJsonExport.html",
    "title": "Class JsonRpcJsonExport | Sisk Framework",
    "keywords": "Class JsonRpcJsonExport Namespace Sisk.JsonRPC.Documentation Assembly Sisk.JsonRPC.dll public sealed class JsonRpcJsonExport : IJsonRpcDocumentationExporter Inheritance object JsonRpcJsonExport Implements IJsonRpcDocumentationExporter Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors JsonRpcJsonExport() JsonRpcJsonExport(JsonOptions) Properties JsonOptions Methods EncodeDocumentation(JsonRpcDocumentation) ExportDocumentBytes(JsonRpcDocumentation)"
  },
  "api/Sisk.JsonRPC.Documentation.html": {
    "href": "api/Sisk.JsonRPC.Documentation.html",
    "title": "Namespace Sisk.JsonRPC.Documentation | Sisk Framework",
    "keywords": "Namespace Sisk.JsonRPC.Documentation Classes JsonRpcDocumentation JsonRpcDocumentationMetadata JsonRpcDocumentationMethod JsonRpcDocumentationParameter JsonRpcHtmlExport JsonRpcJsonExport Interfaces IJsonRpcDocumentationExporter"
  },
  "api/Sisk.JsonRPC.JsonRpcError.-ctor.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcError.-ctor.html",
    "title": "Constructor JsonRpcError | Sisk Framework",
    "keywords": "Constructor JsonRpcError Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll JsonRpcError() public JsonRpcError() JsonRpcError(int, string) public JsonRpcError(int code, string message) Parameters code int message string JsonRpcError(int, string, JsonValue) public JsonRpcError(int code, string message, JsonValue data) Parameters code int message string data JsonValue"
  },
  "api/Sisk.JsonRPC.JsonRpcError.Code.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcError.Code.html",
    "title": "Property Code | Sisk Framework",
    "keywords": "Property Code Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll Code public int Code { get; } Property Value int"
  },
  "api/Sisk.JsonRPC.JsonRpcError.Data.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcError.Data.html",
    "title": "Property Data | Sisk Framework",
    "keywords": "Property Data Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll Data public JsonValue Data { get; } Property Value JsonValue"
  },
  "api/Sisk.JsonRPC.JsonRpcError.Message.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcError.Message.html",
    "title": "Property Message | Sisk Framework",
    "keywords": "Property Message Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll Message public string Message { get; } Property Value string"
  },
  "api/Sisk.JsonRPC.JsonRpcError.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcError.html",
    "title": "Struct JsonRpcError | Sisk Framework",
    "keywords": "Struct JsonRpcError Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll public readonly struct JsonRpcError Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors JsonRpcError() JsonRpcError(int, string) JsonRpcError(int, string, JsonValue) Properties Code Data Message"
  },
  "api/Sisk.JsonRPC.JsonRpcException.-ctor.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcException.-ctor.html",
    "title": "Constructor JsonRpcException | Sisk Framework",
    "keywords": "Constructor JsonRpcException Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll JsonRpcException(string) public JsonRpcException(string message) Parameters message string JsonRpcException(string, int, object?) public JsonRpcException(string message, int code, object? data) Parameters message string code int data object"
  },
  "api/Sisk.JsonRPC.JsonRpcException.AsRpcError.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcException.AsRpcError.html",
    "title": "Method AsRpcError | Sisk Framework",
    "keywords": "Method AsRpcError Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll AsRpcError() public JsonRpcError AsRpcError() Returns JsonRpcError"
  },
  "api/Sisk.JsonRPC.JsonRpcException.Code.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcException.Code.html",
    "title": "Property Code | Sisk Framework",
    "keywords": "Property Code Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll Code public int Code { get; } Property Value int"
  },
  "api/Sisk.JsonRPC.JsonRpcException.Data.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcException.Data.html",
    "title": "Property Data | Sisk Framework",
    "keywords": "Property Data Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll Data public object? Data { get; } Property Value object"
  },
  "api/Sisk.JsonRPC.JsonRpcException.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcException.html",
    "title": "Class JsonRpcException | Sisk Framework",
    "keywords": "Class JsonRpcException Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll public class JsonRpcException : Exception, ISerializable Inheritance object Exception JsonRpcException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors JsonRpcException(string) JsonRpcException(string, int, object?) Properties Code Data Methods AsRpcError()"
  },
  "api/Sisk.JsonRPC.JsonRpcHandler.-ctor.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcHandler.-ctor.html",
    "title": "Constructor JsonRpcHandler | Sisk Framework",
    "keywords": "Constructor JsonRpcHandler Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll JsonRpcHandler(HttpServer) public JsonRpcHandler(HttpServer parentServer) Parameters parentServer HttpServer"
  },
  "api/Sisk.JsonRPC.JsonRpcHandler.GetDocumentation.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcHandler.GetDocumentation.html",
    "title": "Method GetDocumentation | Sisk Framework",
    "keywords": "Method GetDocumentation Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll GetDocumentation() public JsonRpcDocumentation GetDocumentation() Returns JsonRpcDocumentation GetDocumentation(JsonRpcDocumentationMetadata) public JsonRpcDocumentation GetDocumentation(JsonRpcDocumentationMetadata metadata) Parameters metadata JsonRpcDocumentationMetadata Returns JsonRpcDocumentation"
  },
  "api/Sisk.JsonRPC.JsonRpcHandler.JsonSerializerOptions.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcHandler.JsonSerializerOptions.html",
    "title": "Property JsonSerializerOptions | Sisk Framework",
    "keywords": "Property JsonSerializerOptions Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll JsonSerializerOptions public JsonOptions JsonSerializerOptions { get; } Property Value JsonOptions"
  },
  "api/Sisk.JsonRPC.JsonRpcHandler.Methods.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcHandler.Methods.html",
    "title": "Property Methods | Sisk Framework",
    "keywords": "Property Methods Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll Methods public JsonRpcMethodCollection Methods { get; } Property Value JsonRpcMethodCollection"
  },
  "api/Sisk.JsonRPC.JsonRpcHandler.Transport.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcHandler.Transport.html",
    "title": "Property Transport | Sisk Framework",
    "keywords": "Property Transport Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll Transport public JsonRpcTransportLayer Transport { get; } Property Value JsonRpcTransportLayer"
  },
  "api/Sisk.JsonRPC.JsonRpcHandler.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcHandler.html",
    "title": "Class JsonRpcHandler | Sisk Framework",
    "keywords": "Class JsonRpcHandler Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll public sealed class JsonRpcHandler Inheritance object JsonRpcHandler Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors JsonRpcHandler(HttpServer) Properties JsonSerializerOptions Methods Transport Methods GetDocumentation() GetDocumentation(JsonRpcDocumentationMetadata)"
  },
  "api/Sisk.JsonRPC.JsonRpcMethodCollection.-ctor.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcMethodCollection.-ctor.html",
    "title": "Constructor JsonRpcMethodCollection | Sisk Framework",
    "keywords": "Constructor JsonRpcMethodCollection Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll JsonRpcMethodCollection() public JsonRpcMethodCollection()"
  },
  "api/Sisk.JsonRPC.JsonRpcMethodCollection.AddMethod.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcMethodCollection.AddMethod.html",
    "title": "Method AddMethod | Sisk Framework",
    "keywords": "Method AddMethod Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll AddMethod(string, Delegate) public void AddMethod(string name, Delegate method) Parameters name string method Delegate"
  },
  "api/Sisk.JsonRPC.JsonRpcMethodCollection.AddMethodsFromType.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcMethodCollection.AddMethodsFromType.html",
    "title": "Method AddMethodsFromType | Sisk Framework",
    "keywords": "Method AddMethodsFromType Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll AddMethodsFromType<T>(T, bool) public void AddMethodsFromType<T>(T target, bool prefixTypes = false) where T : notnull Parameters target T prefixTypes bool Type Parameters T AddMethodsFromType(Type, object?, bool) public void AddMethodsFromType(Type type, object? target, bool prefixTypes) Parameters type Type target object prefixTypes bool AddMethodsFromType(Type, object?) public void AddMethodsFromType(Type type, object? target) Parameters type Type target object AddMethodsFromType(Type) public void AddMethodsFromType(Type type) Parameters type Type"
  },
  "api/Sisk.JsonRPC.JsonRpcMethodCollection.RemoveMethod.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcMethodCollection.RemoveMethod.html",
    "title": "Method RemoveMethod | Sisk Framework",
    "keywords": "Method RemoveMethod Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll RemoveMethod(string) public void RemoveMethod(string name) Parameters name string"
  },
  "api/Sisk.JsonRPC.JsonRpcMethodCollection.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcMethodCollection.html",
    "title": "Class JsonRpcMethodCollection | Sisk Framework",
    "keywords": "Class JsonRpcMethodCollection Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll public sealed class JsonRpcMethodCollection Inheritance object JsonRpcMethodCollection Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors JsonRpcMethodCollection() Methods AddMethod(string, Delegate) AddMethodsFromType(Type) AddMethodsFromType(Type, object?) AddMethodsFromType(Type, object?, bool) AddMethodsFromType<T>(T, bool) RemoveMethod(string)"
  },
  "api/Sisk.JsonRPC.JsonRpcRequest.Id.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcRequest.Id.html",
    "title": "Property Id | Sisk Framework",
    "keywords": "Property Id Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll Id public JsonValue Id { get; } Property Value JsonValue"
  },
  "api/Sisk.JsonRPC.JsonRpcRequest.Method.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcRequest.Method.html",
    "title": "Property Method | Sisk Framework",
    "keywords": "Property Method Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll Method public string Method { get; } Property Value string"
  },
  "api/Sisk.JsonRPC.JsonRpcRequest.Parameters.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcRequest.Parameters.html",
    "title": "Property Parameters | Sisk Framework",
    "keywords": "Property Parameters Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll Parameters public JsonValue Parameters { get; } Property Value JsonValue"
  },
  "api/Sisk.JsonRPC.JsonRpcRequest.Version.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcRequest.Version.html",
    "title": "Property Version | Sisk Framework",
    "keywords": "Property Version Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll Version public string Version { get; } Property Value string"
  },
  "api/Sisk.JsonRPC.JsonRpcRequest.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcRequest.html",
    "title": "Class JsonRpcRequest | Sisk Framework",
    "keywords": "Class JsonRpcRequest Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll public sealed class JsonRpcRequest Inheritance object JsonRpcRequest Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties Id Method Parameters Version"
  },
  "api/Sisk.JsonRPC.JsonRpcResponse.CreateErrorResponse.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcResponse.CreateErrorResponse.html",
    "title": "Method CreateErrorResponse | Sisk Framework",
    "keywords": "Method CreateErrorResponse Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll CreateErrorResponse(JsonValue, JsonRpcError) public static JsonRpcResponse CreateErrorResponse(JsonValue id, JsonRpcError error) Parameters id JsonValue error JsonRpcError Returns JsonRpcResponse"
  },
  "api/Sisk.JsonRPC.JsonRpcResponse.CreateSuccessResponse.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcResponse.CreateSuccessResponse.html",
    "title": "Method CreateSuccessResponse | Sisk Framework",
    "keywords": "Method CreateSuccessResponse Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll CreateSuccessResponse(JsonValue, JsonValue) public static JsonRpcResponse CreateSuccessResponse(JsonValue id, JsonValue result) Parameters id JsonValue result JsonValue Returns JsonRpcResponse"
  },
  "api/Sisk.JsonRPC.JsonRpcResponse.Error.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcResponse.Error.html",
    "title": "Property Error | Sisk Framework",
    "keywords": "Property Error Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll Error public JsonRpcError? Error { get; } Property Value JsonRpcError?"
  },
  "api/Sisk.JsonRPC.JsonRpcResponse.Id.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcResponse.Id.html",
    "title": "Property Id | Sisk Framework",
    "keywords": "Property Id Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll Id public JsonValue Id { get; } Property Value JsonValue"
  },
  "api/Sisk.JsonRPC.JsonRpcResponse.Result.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcResponse.Result.html",
    "title": "Property Result | Sisk Framework",
    "keywords": "Property Result Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll Result public JsonValue? Result { get; } Property Value JsonValue?"
  },
  "api/Sisk.JsonRPC.JsonRpcResponse.Version.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcResponse.Version.html",
    "title": "Property Version | Sisk Framework",
    "keywords": "Property Version Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll Version public string Version { get; } Property Value string"
  },
  "api/Sisk.JsonRPC.JsonRpcResponse.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcResponse.html",
    "title": "Class JsonRpcResponse | Sisk Framework",
    "keywords": "Class JsonRpcResponse Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll public sealed class JsonRpcResponse Inheritance object JsonRpcResponse Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties Error Id Result Version Methods CreateErrorResponse(JsonValue, JsonRpcError) CreateSuccessResponse(JsonValue, JsonValue)"
  },
  "api/Sisk.JsonRPC.JsonRpcServerConfigurationEventArgs.Handler.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcServerConfigurationEventArgs.Handler.html",
    "title": "Property Handler | Sisk Framework",
    "keywords": "Property Handler Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll Handler public JsonRpcHandler Handler { get; } Property Value JsonRpcHandler"
  },
  "api/Sisk.JsonRPC.JsonRpcServerConfigurationEventArgs.Router.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcServerConfigurationEventArgs.Router.html",
    "title": "Property Router | Sisk Framework",
    "keywords": "Property Router Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll Router public Router Router { get; } Property Value Router"
  },
  "api/Sisk.JsonRPC.JsonRpcServerConfigurationEventArgs.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcServerConfigurationEventArgs.html",
    "title": "Class JsonRpcServerConfigurationEventArgs | Sisk Framework",
    "keywords": "Class JsonRpcServerConfigurationEventArgs Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll public sealed class JsonRpcServerConfigurationEventArgs : EventArgs Inheritance object EventArgs JsonRpcServerConfigurationEventArgs Inherited Members EventArgs.Empty object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties Handler Router"
  },
  "api/Sisk.JsonRPC.JsonRpcServerHandler.-ctor.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcServerHandler.-ctor.html",
    "title": "Constructor JsonRpcServerHandler | Sisk Framework",
    "keywords": "Constructor JsonRpcServerHandler Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll JsonRpcServerHandler() public JsonRpcServerHandler()"
  },
  "api/Sisk.JsonRPC.JsonRpcServerHandler.ConfigureAction.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcServerHandler.ConfigureAction.html",
    "title": "Event ConfigureAction | Sisk Framework",
    "keywords": "Event ConfigureAction Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll public event EventHandler<JsonRpcServerConfigurationEventArgs>? ConfigureAction Returns EventHandler<JsonRpcServerConfigurationEventArgs>"
  },
  "api/Sisk.JsonRPC.JsonRpcServerHandler.OnServerStarting.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcServerHandler.OnServerStarting.html",
    "title": "Method OnServerStarting | Sisk Framework",
    "keywords": "Method OnServerStarting Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll OnServerStarting(HttpServer) Event that is called immediately before starting the HttpServer. protected override void OnServerStarting(HttpServer server) Parameters server HttpServer The HTTP server entity which is starting."
  },
  "api/Sisk.JsonRPC.JsonRpcServerHandler.OnSetupRouter.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcServerHandler.OnSetupRouter.html",
    "title": "Method OnSetupRouter | Sisk Framework",
    "keywords": "Method OnSetupRouter Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll OnSetupRouter(Router) Event that is called when an Router is binded to the HTTP server. protected override void OnSetupRouter(Router router) Parameters router Router The router entity which is binded."
  },
  "api/Sisk.JsonRPC.JsonRpcServerHandler.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcServerHandler.html",
    "title": "Class JsonRpcServerHandler | Sisk Framework",
    "keywords": "Class JsonRpcServerHandler Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll public sealed class JsonRpcServerHandler : HttpServerHandler Inheritance object HttpServerHandler JsonRpcServerHandler Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors JsonRpcServerHandler() Methods OnServerStarting(HttpServer) Event that is called immediately before starting the HttpServer. OnSetupRouter(Router) Event that is called when an Router is binded to the HTTP server. Events ConfigureAction"
  },
  "api/Sisk.JsonRPC.JsonRpcServerHandlerExtensions.UseJsonRPC.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcServerHandlerExtensions.UseJsonRPC.html",
    "title": "Method UseJsonRPC | Sisk Framework",
    "keywords": "Method UseJsonRPC Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll UseJsonRPC(HttpServerHostContextBuilder, EventHandler<JsonRpcServerConfigurationEventArgs>) public static HttpServerHostContextBuilder UseJsonRPC(this HttpServerHostContextBuilder builder, EventHandler<JsonRpcServerConfigurationEventArgs> configure) Parameters builder HttpServerHostContextBuilder configure EventHandler<JsonRpcServerConfigurationEventArgs> Returns HttpServerHostContextBuilder"
  },
  "api/Sisk.JsonRPC.JsonRpcServerHandlerExtensions.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcServerHandlerExtensions.html",
    "title": "Class JsonRpcServerHandlerExtensions | Sisk Framework",
    "keywords": "Class JsonRpcServerHandlerExtensions Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll public static class JsonRpcServerHandlerExtensions Inheritance object JsonRpcServerHandlerExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods UseJsonRPC(HttpServerHostContextBuilder, EventHandler<JsonRpcServerConfigurationEventArgs>)"
  },
  "api/Sisk.JsonRPC.JsonRpcTransportLayer.HttpGet.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcTransportLayer.HttpGet.html",
    "title": "Property HttpGet | Sisk Framework",
    "keywords": "Property HttpGet Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll HttpGet public RouteAction HttpGet { get; } Property Value RouteAction"
  },
  "api/Sisk.JsonRPC.JsonRpcTransportLayer.HttpPost.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcTransportLayer.HttpPost.html",
    "title": "Property HttpPost | Sisk Framework",
    "keywords": "Property HttpPost Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll HttpPost public RouteAction HttpPost { get; } Property Value RouteAction"
  },
  "api/Sisk.JsonRPC.JsonRpcTransportLayer.WebSocket.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcTransportLayer.WebSocket.html",
    "title": "Property WebSocket | Sisk Framework",
    "keywords": "Property WebSocket Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll WebSocket public WebSocketMessageReceivedEventHandler WebSocket { get; } Property Value WebSocketMessageReceivedEventHandler"
  },
  "api/Sisk.JsonRPC.JsonRpcTransportLayer.html": {
    "href": "api/Sisk.JsonRPC.JsonRpcTransportLayer.html",
    "title": "Class JsonRpcTransportLayer | Sisk Framework",
    "keywords": "Class JsonRpcTransportLayer Namespace Sisk.JsonRPC Assembly Sisk.JsonRPC.dll public sealed class JsonRpcTransportLayer Inheritance object JsonRpcTransportLayer Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties HttpGet HttpPost WebSocket"
  },
  "api/Sisk.JsonRPC.html": {
    "href": "api/Sisk.JsonRPC.html",
    "title": "Namespace Sisk.JsonRPC | Sisk Framework",
    "keywords": "Namespace Sisk.JsonRPC Namespaces Sisk.JsonRPC.Annotations Sisk.JsonRPC.Documentation Classes JsonRpcException JsonRpcHandler JsonRpcMethodCollection JsonRpcRequest JsonRpcResponse JsonRpcServerConfigurationEventArgs JsonRpcServerHandler JsonRpcServerHandlerExtensions JsonRpcTransportLayer Structs JsonRpcError"
  },
  "api/Sisk.Ssl.CertificateUtil.CreateDevelopmentCertificate.html": {
    "href": "api/Sisk.Ssl.CertificateUtil.CreateDevelopmentCertificate.html",
    "title": "Method CreateDevelopmentCertificate | Sisk Framework",
    "keywords": "Method CreateDevelopmentCertificate Namespace Sisk.Ssl Assembly Sisk.SslProxy.dll CreateDevelopmentCertificate(string[]) Creates a self-signed certificate for the specified DNS names. public static X509Certificate2 CreateDevelopmentCertificate(string[] dnsNames) Parameters dnsNames string[] The certificate DNS names. Returns X509Certificate2"
  },
  "api/Sisk.Ssl.CertificateUtil.CreateTrustedDevelopmentCertificate.html": {
    "href": "api/Sisk.Ssl.CertificateUtil.CreateTrustedDevelopmentCertificate.html",
    "title": "Method CreateTrustedDevelopmentCertificate | Sisk Framework",
    "keywords": "Method CreateTrustedDevelopmentCertificate Namespace Sisk.Ssl Assembly Sisk.SslProxy.dll CreateTrustedDevelopmentCertificate(params string[]) Creates a self-signed certificate for the specified DNS names and adds them to the local user's certificate store. public static X509Certificate2 CreateTrustedDevelopmentCertificate(params string[] dnsNames) Parameters dnsNames string[] The certificate DNS names. Returns X509Certificate2"
  },
  "api/Sisk.Ssl.CertificateUtil.html": {
    "href": "api/Sisk.Ssl.CertificateUtil.html",
    "title": "Class CertificateUtil | Sisk Framework",
    "keywords": "Class CertificateUtil Namespace Sisk.Ssl Assembly Sisk.SslProxy.dll Provides a set of useful functions to issue development certificates for the SslProxy. public static class CertificateUtil Inheritance object CertificateUtil Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods CreateDevelopmentCertificate(string[]) Creates a self-signed certificate for the specified DNS names. CreateTrustedDevelopmentCertificate(params string[]) Creates a self-signed certificate for the specified DNS names and adds them to the local user's certificate store."
  },
  "api/Sisk.Ssl.SslProxy.-ctor.html": {
    "href": "api/Sisk.Ssl.SslProxy.-ctor.html",
    "title": "Constructor SslProxy | Sisk Framework",
    "keywords": "Constructor SslProxy Namespace Sisk.Ssl Assembly Sisk.SslProxy.dll SslProxy(int, X509Certificate, IPEndPoint) Initializes a new instance of the SslProxy class. public SslProxy(int sslListeningPort, X509Certificate certificate, IPEndPoint remoteEndpoint) Parameters sslListeningPort int The port number on which the proxy server listens for incoming connections. certificate X509Certificate The SSL/TLS certificate used by the proxy server. remoteEndpoint IPEndPoint The remote endpoint to which the proxy server forwards traffic."
  },
  "api/Sisk.Ssl.SslProxy.AllowedProtocols.html": {
    "href": "api/Sisk.Ssl.SslProxy.AllowedProtocols.html",
    "title": "Property AllowedProtocols | Sisk Framework",
    "keywords": "Property AllowedProtocols Namespace Sisk.Ssl Assembly Sisk.SslProxy.dll AllowedProtocols Gets or sets the SSL/HTTPS protocols allowed for connections. public SslProtocols AllowedProtocols { get; set; } Property Value SslProtocols"
  },
  "api/Sisk.Ssl.SslProxy.CheckCertificateRevocation.html": {
    "href": "api/Sisk.Ssl.SslProxy.CheckCertificateRevocation.html",
    "title": "Property CheckCertificateRevocation | Sisk Framework",
    "keywords": "Property CheckCertificateRevocation Namespace Sisk.Ssl Assembly Sisk.SslProxy.dll CheckCertificateRevocation Gets or sets a value indicating whether to check for certificate revocation. public bool CheckCertificateRevocation { get; set; } Property Value bool"
  },
  "api/Sisk.Ssl.SslProxy.ClientCertificateRequired.html": {
    "href": "api/Sisk.Ssl.SslProxy.ClientCertificateRequired.html",
    "title": "Property ClientCertificateRequired | Sisk Framework",
    "keywords": "Property ClientCertificateRequired Namespace Sisk.Ssl Assembly Sisk.SslProxy.dll ClientCertificateRequired Gets or sets a value indicating whether client certificates are required for authentication. public bool ClientCertificateRequired { get; set; } Property Value bool"
  },
  "api/Sisk.Ssl.SslProxy.Dispose.html": {
    "href": "api/Sisk.Ssl.SslProxy.Dispose.html",
    "title": "Method Dispose | Sisk Framework",
    "keywords": "Method Dispose Namespace Sisk.Ssl Assembly Sisk.SslProxy.dll Dispose() public void Dispose()"
  },
  "api/Sisk.Ssl.SslProxy.GatewayEndpoint.html": {
    "href": "api/Sisk.Ssl.SslProxy.GatewayEndpoint.html",
    "title": "Property GatewayEndpoint | Sisk Framework",
    "keywords": "Property GatewayEndpoint Namespace Sisk.Ssl Assembly Sisk.SslProxy.dll GatewayEndpoint Gets the proxy endpoint. public IPEndPoint GatewayEndpoint { get; } Property Value IPEndPoint"
  },
  "api/Sisk.Ssl.SslProxy.GatewayHostname.html": {
    "href": "api/Sisk.Ssl.SslProxy.GatewayHostname.html",
    "title": "Property GatewayHostname | Sisk Framework",
    "keywords": "Property GatewayHostname Namespace Sisk.Ssl Assembly Sisk.SslProxy.dll GatewayHostname Gets or sets an fixed proxy host header value for incoming requests. public string? GatewayHostname { get; set; } Property Value string"
  },
  "api/Sisk.Ssl.SslProxy.GatewayTimeout.html": {
    "href": "api/Sisk.Ssl.SslProxy.GatewayTimeout.html",
    "title": "Property GatewayTimeout | Sisk Framework",
    "keywords": "Property GatewayTimeout Namespace Sisk.Ssl Assembly Sisk.SslProxy.dll GatewayTimeout Gets or sets the maximum time that the gateway should take to respond to a connection or message from the proxy. public TimeSpan GatewayTimeout { get; set; } Property Value TimeSpan"
  },
  "api/Sisk.Ssl.SslProxy.KeepAliveEnabled.html": {
    "href": "api/Sisk.Ssl.SslProxy.KeepAliveEnabled.html",
    "title": "Property KeepAliveEnabled | Sisk Framework",
    "keywords": "Property KeepAliveEnabled Namespace Sisk.Ssl Assembly Sisk.SslProxy.dll KeepAliveEnabled Gets or sets whether keep-alive connections should be used. public bool KeepAliveEnabled { get; set; } Property Value bool"
  },
  "api/Sisk.Ssl.SslProxy.MaxOpenConnections.html": {
    "href": "api/Sisk.Ssl.SslProxy.MaxOpenConnections.html",
    "title": "Property MaxOpenConnections | Sisk Framework",
    "keywords": "Property MaxOpenConnections Namespace Sisk.Ssl Assembly Sisk.SslProxy.dll MaxOpenConnections Gets or sets the maximum of open TCP connections this SslProxy can mantain open at the same time. public int MaxOpenConnections { get; set; } Property Value int"
  },
  "api/Sisk.Ssl.SslProxy.ProxyAuthorization.html": {
    "href": "api/Sisk.Ssl.SslProxy.ProxyAuthorization.html",
    "title": "Property ProxyAuthorization | Sisk Framework",
    "keywords": "Property ProxyAuthorization Namespace Sisk.Ssl Assembly Sisk.SslProxy.dll ProxyAuthorization Gets or sets the Proxy-Authorization header value for creating an trusted gateway between the application and the proxy. public string? ProxyAuthorization { get; set; } Property Value string"
  },
  "api/Sisk.Ssl.SslProxy.ServerCertificate.html": {
    "href": "api/Sisk.Ssl.SslProxy.ServerCertificate.html",
    "title": "Property ServerCertificate | Sisk Framework",
    "keywords": "Property ServerCertificate Namespace Sisk.Ssl Assembly Sisk.SslProxy.dll ServerCertificate Gets the SSL certificate used by the proxy server. public X509Certificate ServerCertificate { get; } Property Value X509Certificate"
  },
  "api/Sisk.Ssl.SslProxy.Start.html": {
    "href": "api/Sisk.Ssl.SslProxy.Start.html",
    "title": "Method Start | Sisk Framework",
    "keywords": "Method Start Namespace Sisk.Ssl Assembly Sisk.SslProxy.dll Start() Starts the SslProxy and start routing traffic to the set remote endpoint. public void Start()"
  },
  "api/Sisk.Ssl.SslProxy.html": {
    "href": "api/Sisk.Ssl.SslProxy.html",
    "title": "Class SslProxy | Sisk Framework",
    "keywords": "Class SslProxy Namespace Sisk.Ssl Assembly Sisk.SslProxy.dll Represents a HTTP/1.1 proxy server that forwards traffic over SSL/HTTPS into an insecure HTTP gateway. public sealed class SslProxy : IDisposable Inheritance object SslProxy Implements IDisposable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors SslProxy(int, X509Certificate, IPEndPoint) Initializes a new instance of the SslProxy class. Properties AllowedProtocols Gets or sets the SSL/HTTPS protocols allowed for connections. CheckCertificateRevocation Gets or sets a value indicating whether to check for certificate revocation. ClientCertificateRequired Gets or sets a value indicating whether client certificates are required for authentication. GatewayEndpoint Gets the proxy endpoint. GatewayHostname Gets or sets an fixed proxy host header value for incoming requests. GatewayTimeout Gets or sets the maximum time that the gateway should take to respond to a connection or message from the proxy. KeepAliveEnabled Gets or sets whether keep-alive connections should be used. MaxOpenConnections Gets or sets the maximum of open TCP connections this SslProxy can mantain open at the same time. ProxyAuthorization Gets or sets the Proxy-Authorization header value for creating an trusted gateway between the application and the proxy. ServerCertificate Gets the SSL certificate used by the proxy server. Methods Dispose() Start() Starts the SslProxy and start routing traffic to the set remote endpoint."
  },
  "api/Sisk.Ssl.SslProxyExtensions.UseSsl.html": {
    "href": "api/Sisk.Ssl.SslProxyExtensions.UseSsl.html",
    "title": "Method UseSsl | Sisk Framework",
    "keywords": "Method UseSsl Namespace Sisk.Ssl Assembly Sisk.SslProxy.dll UseSsl(HttpServerHostContextBuilder, short, X509Certificate?, SslProtocols, bool, object?, bool) Configures the HttpServerHostContext to use SslProxy with the specified parameters. public static HttpServerHostContextBuilder UseSsl(this HttpServerHostContextBuilder builder, short sslListeningPort, X509Certificate? certificate = null, SslProtocols allowedProtocols = SslProtocols.Tls12 | SslProtocols.Tls13, bool clientCertificateRequired = false, object? proxyAuthorization = null, bool onlyUseIPv4 = false) Parameters builder HttpServerHostContextBuilder The HttpServerHostContextBuilder instance to configure. sslListeningPort short The port number on which the server will listen for SSL/HTTPS connections. certificate X509Certificate Optional. The SSL/HTTPS certificate to use for encrypting communications. allowedProtocols SslProtocols Optional. The SSL/HTTPS protocols allowed for the connection. Defaults to Tls12 and Tls13. clientCertificateRequired bool Optional. Specifies whether a client certificate is required for authentication. Defaults to false. proxyAuthorization object Optional. Specifies the Proxy-Authorization header value for creating an trusted gateway between the application and the proxy. onlyUseIPv4 bool Optional. Specifies whether DNS Resolve may also use IPv6 addresses or should only use IPv4 addresses Returns HttpServerHostContextBuilder The configured HttpServerHostContextBuilder instance."
  },
  "api/Sisk.Ssl.SslProxyExtensions.html": {
    "href": "api/Sisk.Ssl.SslProxyExtensions.html",
    "title": "Class SslProxyExtensions | Sisk Framework",
    "keywords": "Class SslProxyExtensions Namespace Sisk.Ssl Assembly Sisk.SslProxy.dll Provides extension methods for SslProxy. public static class SslProxyExtensions Inheritance object SslProxyExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods UseSsl(HttpServerHostContextBuilder, short, X509Certificate?, SslProtocols, bool, object?, bool) Configures the HttpServerHostContext to use SslProxy with the specified parameters."
  },
  "api/Sisk.Ssl.SslProxyServerHandler.-ctor.html": {
    "href": "api/Sisk.Ssl.SslProxyServerHandler.-ctor.html",
    "title": "Constructor SslProxyServerHandler | Sisk Framework",
    "keywords": "Constructor SslProxyServerHandler Namespace Sisk.Ssl Assembly Sisk.SslProxy.dll SslProxyServerHandler(SslProxy) Creates an new SslProxyServerHandler instance with the specified SslProxy instance. public SslProxyServerHandler(SslProxy secureProxy) Parameters secureProxy SslProxy The SslProxy instance."
  },
  "api/Sisk.Ssl.SslProxyServerHandler.SecureProxy.html": {
    "href": "api/Sisk.Ssl.SslProxyServerHandler.SecureProxy.html",
    "title": "Property SecureProxy | Sisk Framework",
    "keywords": "Property SecureProxy Namespace Sisk.Ssl Assembly Sisk.SslProxy.dll SecureProxy Gets the SslProxy instance used in this server handler. public SslProxy SecureProxy { get; } Property Value SslProxy"
  },
  "api/Sisk.Ssl.SslProxyServerHandler.html": {
    "href": "api/Sisk.Ssl.SslProxyServerHandler.html",
    "title": "Class SslProxyServerHandler | Sisk Framework",
    "keywords": "Class SslProxyServerHandler Namespace Sisk.Ssl Assembly Sisk.SslProxy.dll Provides event handlers and hooks for SslProxy. public sealed class SslProxyServerHandler : HttpServerHandler Inheritance object HttpServerHandler SslProxyServerHandler Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors SslProxyServerHandler(SslProxy) Creates an new SslProxyServerHandler instance with the specified SslProxy instance. Properties SecureProxy Gets the SslProxy instance used in this server handler."
  },
  "api/Sisk.Ssl.html": {
    "href": "api/Sisk.Ssl.html",
    "title": "Namespace Sisk.Ssl | Sisk Framework",
    "keywords": "Namespace Sisk.Ssl Classes CertificateUtil Provides a set of useful functions to issue development certificates for the SslProxy. SslProxy Represents a HTTP/1.1 proxy server that forwards traffic over SSL/HTTPS into an insecure HTTP gateway. SslProxyExtensions Provides extension methods for SslProxy. SslProxyServerHandler Provides event handlers and hooks for SslProxy."
  },
  "api/Sisk.html": {
    "href": "api/Sisk.html",
    "title": "Namespace Sisk | Sisk Framework",
    "keywords": "Namespace Sisk Namespaces Sisk.BasicAuth Sisk.Core Sisk.IniConfiguration Sisk.JsonRPC Sisk.Ssl"
  },
  "docs/advanced/forwarding-resolvers.html": {
    "href": "docs/advanced/forwarding-resolvers.html",
    "title": "Forwarding Resolvers | Sisk Framework",
    "keywords": "Forwarding Resolvers A Forwarding Resolver is a helper that helps decode information that identifies the client through a request, proxy, CDN or load-balancers. When your Sisk service runs through a reverse or forward proxy, the client's IP address, host and protocol may be different from the original request as it is a forwarding from one service to another. This Sisk functionality allows you to control and resolve this information before working with the request. These proxies usually provide useful headers to identify their client. Currently, with the ForwardingResolver class, it is possible to resolve the client IP address, host, and HTTP protocol used. After version 1.0 of Sisk, the server no longer has a standard implementation to decode these headers for security reasons that vary from service to service. For example, the X-Forwarded-For header includes information about the IP addresses that forwarded the request. This header is used by proxies to carry a chain of information to the final service and includes the IP of all proxies used, including the client's real address. The problem is: sometimes it is challenging to identify the client's remote IP and there is no specific rule to identify this header. It is highly recommended to read the documentation for the headers you are about to implement below: Read about the X-Forwarded-For header here. Read about the X-Forwarded-Host header here. Read about the X-Forwarded-Proto header here. The ForwardingResolver class This class has three virtual methods that allow the most appropriate implementation for each service. Each method is responsible for resolving information from the request through a proxy: the client's IP address, the host of the request and the security protocol used. By default, Sisk will always use the information from the original request, without resolving any headers. The example below shows how this implementation can be used. This example resolves the client's IP through the X-Forwarded-For header and throws an error when more than one IP was forwarded in the request. Important Do not use this example in production code. Always check if the implementation is appropriate for use. Read the header documentation before implementing it. class Program { static void Main(string[] args) { using var host = HttpServer.CreateBuilder() .UseForwardingResolver<Resolver>() .UseListeningPort(5555) .Build(); host.Router.SetRoute(RouteMethod.Any, Route.AnyPath, request => new HttpResponse(\"Hello, world!!!\")); host.Start(); } class Resolver : ForwardingResolver { public override IPAddress OnResolveClientAddress(HttpRequest request, IPEndPoint connectingEndpoint) { string? forwardedFor = request.Headers.XForwardedFor; if (forwardedFor is null) { throw new Exception(\"The X-Forwarded-For header is missing.\"); } string[] ipAddresses = forwardedFor.Split(','); if (ipAddresses.Length != 1) { throw new Exception(\"Too many addresses in the X-Forwarded-For header.\"); } return IPAddress.Parse(ipAddresses[0]); } } }"
  },
  "docs/advanced/http-server-handlers.html": {
    "href": "docs/advanced/http-server-handlers.html",
    "title": "Http server handlers | Sisk Framework",
    "keywords": "Http server handlers In Sisk version 0.16, we've introduced the HttpServerHandler class, which aims to extend the overral Sisk behavior and provide additional event handlers to Sisk, such as handling Http requests, routers, context bags and more. The class concentrates events that occur during the lifetime of the entire HTTP server and also of a request. The Http protocol does not have sessions, and therefore it is not possible to preserve information from one request to another. Sisk for now provides a way for you to implement sessions, contexts, database connections and other useful providers to help your work. Please refer to this page to read where each event is triggered and what its purpose is. You can also view the lifecycle of an HTTP request to understand what happens with a request and where events are fired. The HTTP server allows you to use multiple handlers at the same time. Each event call is synchronous, that is, it will blocked the current thread for each request or context until all handlers associated with that function are executed and completed. Unlike RequestHandlers, they cannot be applied to some route groups or specific routes. Instead, they are applied to the entire HTTP server. You can apply conditions within your Http Server Handler. Furthermore, singletons of each HttpServerHandler are defined for every Sisk application, so only one instance per HttpServerHandler is defined. A practical example of using HttpServerHandler is to automatically dispose a database connection at the end of the request. // DatabaseConnectionHandler.cs public class DatabaseConnectionHandler : HttpServerHandler { public override void OnHttpRequestClose(HttpServerExecutionResult result) { var requestBag = result.Request.Context.RequestBag; // checks if the request has defined an DbContext // in it's context bag if (requestBag.IsSet<DbContext>()) { var db = requestBag.Get<DbContext>(); db.Dispose(); } } } public static class DatabaseConnectionHandlerExtensions { // allows the user to create an dbcontext from an http request // and store it in its request bag public static DbContext GetDbContext(this HttpRequest request) { var db = new DbContext(); return request.SetContextBag<DbContext>(db); } } With the code above, the GetDbContext extension allows a connection context to be created directly from the HttpRequest object. An undisposed connection can cause problems when running with the database, so it is terminated in OnHttpRequestClose. You can register a handler on an Http server in your builder or directly with HttpServer.RegisterHandler. // Program.cs class Program { static void Main(string[] args) { using var app = HttpServer.CreateBuilder() .UseHandler<DatabaseConnectionHandler>() .Build(); app.Router.SetObject(new UserController()); app.Start(); } } With this, the UsersController class can make use of the database context as: // UserController.cs [RoutePrefix(\"/users\")] public class UserController : ApiController { [RouteGet()] public async Task<HttpResponse> List(HttpRequest request) { var db = request.GetDbContext(); var users = db.Users.ToArray(); return JsonOk(users); } [RouteGet(\"<id>\")] public async Task<HttpResponse> View(HttpRequest request) { var db = request.GetDbContext(); var userId = request.GetQueryValue<int>(\"id\"); var user = db.Users.FirstOrDefault(u => u.Id == userId); return JsonOk(user); } [RoutePost] public async Task<HttpResponse> Create(HttpRequest request) { var db = request.GetDbContext(); var user = JsonSerializer.Deserialize<User>(request.Body); ArgumentNullException.ThrowIfNull(user); db.Users.Add(user); await db.SaveChangesAsync(); return JsonMessage(\"User added.\"); } } The code above uses methods like JsonOk and JsonMessage that are built into ApiController, which is inherited from a RouterController: // ApiController.cs public class ApiController : RouterModule { public HttpResponse JsonOk(object value) { return new HttpResponse(200) .WithContent(JsonContent.Create(value, null, new JsonSerializerOptions() { PropertyNameCaseInsensitive = true })); } public HttpResponse JsonMessage(string message, int statusCode = 200) { return new HttpResponse(statusCode) .WithContent(JsonContent.Create(new { Message = message })); } } Developers can implement sessions, contexts, and database connections using this class. The provided code showcases a practical example with the DatabaseConnectionHandler, automating database connection disposal at the end of each request. Integration is straightforward, with handlers registered during server setup. The HttpServerHandler class offers a powerful toolset for managing resources and extending Sisk behavior in HTTP applications."
  },
  "docs/advanced/manual-setup.html": {
    "href": "docs/advanced/manual-setup.html",
    "title": "Manual (advanced) setup | Sisk Framework",
    "keywords": "Manual (advanced) setup In this section, we will create our HTTP server without any predefined standards, in a completely abstract way. Here, you can manually build how your HTTP server will function. Each ListeningHost has a router, and an HTTP server can have multiple ListeningHosts, each pointing to a different host on a different port. First, we need to understand the request/response concept. It is quite simple: for every request, there must be a response. Sisk follows this principle as well. Let's create a method that responds with a \"Hello, World!\" message in HTML, specifying the status code and headers. // Program.cs using Sisk.Core.Http; using Sisk.Core.Routing; static HttpResponse IndexPage(HttpRequest request) { HttpResponse indexResponse = new HttpResponse { Status = System.Net.HttpStatusCode.OK, Content = new HtmlContent(@\" <html> <body> <h1>Hello, world!</h1> </body> </html> \") }; return indexResponse; } The next step is to associate this method with an HTTP route. Routers Routers are abstractions of request routes and serve as the bridge between requests and responses for the service. Routers manage service routes, functions, and errors. A router can have several routes, and each route can perform different operations on that path, such as executing a function, serving a page, or providing a resource from the server. Let's create our first router and associate our IndexPage method with the index path. Router mainRouter = new Router(); // SetRoute will associate all index routes with our method. mainRouter.SetRoute(RouteMethod.Get, \"/\", IndexPage); Now our router can receive requests and send responses. However, mainRouter is not tied to a host or a server, so it will not work on its own. The next step is to create our ListeningHost. Listening Hosts and Ports A ListeningHost can host a router and multiple listening ports for the same router. A ListeningPort is a prefix where the HTTP server will listen. Here, we can create a ListeningHost that points to two endpoints for our router: ListeningHost myHost = new ListeningHost { Router = new Router(), Ports = new ListeningPort[] { new ListeningPort(\"http://localhost:5000/\") } }; Now our HTTP server will listen to the specified endpoints and redirect its requests to our router. Server Configuration Server configuration is responsible for most of the behavior of the HTTP server itself. In this configuration, we can associate ListeningHosts with our server. HttpServerConfiguration config = new HttpServerConfiguration(); config.ListeningHosts.Add(myHost); // Add our ListeningHost to this server configuration Next, we can create our HTTP server: HttpServer server = new HttpServer(config); server.Start(); // Starts the server Console.ReadKey(); // Prevents the application from exiting Now we can compile our executable and run our HTTP server with the command: dotnet watch At runtime, open your browser and navigate to the server path, and you should see:"
  },
  "docs/advanced/multi-host-setup.html": {
    "href": "docs/advanced/multi-host-setup.html",
    "title": "Multiple listening hosts per server | Sisk Framework",
    "keywords": "Multiple listening hosts per server The Sisk Framework has always supported the use of more than one host per server, that is, a single HTTP server can listen on multiple ports and each port has its own router and its own service running on it. This way, it is easy to separate responsibilities and manage services on a single HTTP server with Sisk. The example below shows the creation of two ListeningHosts, each listening to a different port, with different routers and actions. Read manually creating your app to understand the details about this abstraction. static void Main(string[] args) { // create two listening hosts, which each one has it's own router and // listens to it's own port // ListeningHost hostA = new ListeningHost(); hostA.Ports = [new ListeningPort(12000)]; hostA.Router = new Router(); hostA.Router.SetRoute(RouteMethod.Get, \"/\", request => new HttpResponse().WithContent(\"Hello from the host A!\")); ListeningHost hostB = new ListeningHost(); hostB.Ports = [new ListeningPort(12001)]; hostB.Router = new Router(); hostB.Router.SetRoute(RouteMethod.Get, \"/\", request => new HttpResponse().WithContent(\"Hello from the host B!\")); // create an server configuration and adds both // listening hosts on it // HttpServerConfiguration configuration = new HttpServerConfiguration(); configuration.ListeningHosts.Add(hostA); configuration.ListeningHosts.Add(hostB); // creates an http server which uses the specified // configuration // HttpServer server = new HttpServer(configuration); // starts the server server.Start(); Console.WriteLine(\"Try to reach host A in {0}\", server.ListeningPrefixes[0]); Console.WriteLine(\"Try to reach host B in {0}\", server.ListeningPrefixes[1]); Thread.Sleep(-1); }"
  },
  "docs/advanced/request-lifecycle.html": {
    "href": "docs/advanced/request-lifecycle.html",
    "title": "Request lifecycle | Sisk Framework",
    "keywords": "Request lifecycle This diagram explains the life process of an HTTP request from the moment it arrives at the server until it is delivered to the client."
  },
  "docs/changelogs.html": {
    "href": "docs/changelogs.html",
    "title": "Changelogs | Sisk Framework",
    "keywords": "Changelogs Every change made to Sisk is recorded through the changelog. You can view the changelogs for all Sisk versions here."
  },
  "docs/cn/advanced/forwarding-resolvers.html": {
    "href": "docs/cn/advanced/forwarding-resolvers.html",
    "title": "| Sisk Framework",
    "keywords": "转发解析器 转发解析器是一种辅助工具，用于解码识别客户端信息，例如通过请求、代理、CDN 或负载均衡器。当您的 Sisk 服务通过反向或转发代理运行时，客户端的 IP 地址、主机名和协议可能与原始请求不同，因为它是从一个服务转发到另一个服务。此 Sisk 功能允许您在处理请求之前控制和解析这些信息。这些代理通常提供有用的标头来识别其客户端。 目前，使用 ForwardingResolver 类，可以解析客户端 IP 地址、主机名和使用的 HTTP 协议。从 Sisk 版本 1.0 开始，服务器不再具有标准实现来解码这些标头，因为安全原因因服务而异。 例如，X-Forwarded-For 标头包含有关转发请求的 IP 地址的信息。代理使用此标头传递一条信息链到最终服务，其中包括所有代理使用的 IP，包括客户端的真实地址。问题是：有时很难识别客户端的远程 IP，并且没有特定的规则来识别此标头。强烈建议您阅读即将要实现的标头的文档： 阅读有关 X-Forwarded-For 标头的文档 此处。 阅读有关 X-Forwarded-Host 标头的文档 此处。 阅读有关 X-Forwarded-Proto 标头的文档 此处。 ForwardingResolver 类 此类具有三个虚拟方法，允许为每个服务实现最合适的方案。每个方法负责从代理请求中解析信息：客户端的 IP 地址、请求的主机名和使用的安全协议。默认情况下，Sisk 将始终使用原始请求中的信息，而不会解析任何标头。 以下示例演示了如何使用此实现。此示例通过 X-Forwarded-For 标头解析客户端的 IP 地址，并在请求中转发多个 IP 时抛出错误。 Important 请勿在生产代码中使用此示例。始终检查实现是否适合使用。在实现之前，请阅读标头文档。 class Program { static void Main(string[] args) { using var host = HttpServer.CreateBuilder() .UseForwardingResolver<Resolver>() .UseListeningPort(5555) .Build(); host.Router.SetRoute(RouteMethod.Any, Route.AnyPath, request => new HttpResponse(\"Hello, world!!!\")); host.Start(); } class Resolver : ForwardingResolver { public override IPAddress OnResolveClientAddress(HttpRequest request, IPEndPoint connectingEndpoint) { string? forwardedFor = request.Headers.XForwardedFor; if (forwardedFor is null) { throw new Exception(\"The X-Forwarded-For header is missing.\"); } string[] ipAddresses = forwardedFor.Split(','); if (ipAddresses.Length != 1) { throw new Exception(\"Too many addresses in the X-Forwarded-For header.\"); } return IPAddress.Parse(ipAddresses[0]); } } }"
  },
  "docs/cn/advanced/http-server-handlers.html": {
    "href": "docs/cn/advanced/http-server-handlers.html",
    "title": "| Sisk Framework",
    "keywords": "在Sisk版本0.16中，我们引入了HttpServerHandler类，旨在扩展整体Sisk的行为，并为Sisk提供额外的事件处理程序，例如处理Http请求、路由器、上下文袋等。 该类集中处理HTTP服务器及其请求生命周期中发生的事件。HTTP协议没有会话，因此无法在一次请求到另一次请求之间保留信息。Sisk目前提供了一种方法，您可以实现会话、上下文、数据库连接和其他有用的提供程序，以帮助您的工作。 请参考此页面以了解每个事件何时触发以及其用途。您还可以查看HTTP请求的生命周期以了解请求的发生过程以及事件何时触发。HTTP服务器允许您同时使用多个处理程序。每个事件调用都是同步的，也就是说，它将阻塞当前线程，直到与该函数关联的所有处理程序都执行完毕。 与RequestHandler不同，它们不能应用于某些路由组或特定路由。而是应用于整个HTTP服务器。您可以在Http Server Handler中应用条件。此外，每个Sisk应用程序都定义了每个HttpServerHandler的单例，因此每个HttpServerHandler只定义一个实例。 使用HttpServerHandler的一个实际例子是在请求结束时自动释放数据库连接。 // DatabaseConnectionHandler.cs public class DatabaseConnectionHandler : HttpServerHandler { public override void OnHttpRequestClose(HttpServerExecutionResult result) { var requestBag = result.Request.Context.RequestBag; // 检查请求是否在其上下文袋中定义了一个DbContext if (requestBag.IsSet<DbContext>()) { var db = requestBag.Get<DbContext>(); db.Dispose(); } } } public static class DatabaseConnectionHandlerExtensions { // 允许用户从一个HttpRequest对象创建DbContext // 并将其存储在其请求袋中 public static DbContext GetDbContext(this HttpRequest request) { var db = new DbContext(); return request.SetContextBag<DbContext>(db); } } 使用上面的代码，GetDbContext扩展允许直接从HttpRequest对象创建连接上下文。未释放的连接可能会导致在与数据库运行时出现问题，因此在OnHttpRequestClose中将其终止。 您可以在构建器或直接使用HttpServer.RegisterHandler在Http服务器上注册处理程序。 // Program.cs class Program { static void Main(string[] args) { using var app = HttpServer.CreateBuilder() .UseHandler<DatabaseConnectionHandler>() .Build(); app.Router.SetObject(new UserController()); app.Start(); } } 这样，UsersController类可以使用数据库上下文： // UserController.cs [RoutePrefix(\"/users\")] public class UserController : ApiController { [RouteGet()] public async Task<HttpResponse> List(HttpRequest request) { var db = request.GetDbContext(); var users = db.Users.ToArray(); return JsonOk(users); } [RouteGet(\"<id>\")] public async Task<HttpResponse> View(HttpRequest request) { var db = request.GetDbContext(); var userId = request.GetQueryValue<int>(\"id\"); var user = db.Users.FirstOrDefault(u => u.Id == userId); return JsonOk(user); } [RoutePost] public async Task<HttpResponse> Create(HttpRequest request) { var db = request.GetDbContext(); var user = JsonSerializer.Deserialize<User>(request.Body); ArgumentNullException.ThrowIfNull(user); db.Users.Add(user); await db.SaveChangesAsync(); return JsonMessage(\"User added.\"); } } 上面的代码使用JsonOk和JsonMessage等方法，这些方法是继承自RouterController的ApiController内置的： // ApiController.cs public class ApiController : RouterModule { public HttpResponse JsonOk(object value) { return new HttpResponse(200) .WithContent(JsonContent.Create(value, null, new JsonSerializerOptions() { PropertyNameCaseInsensitive = true })); } public HttpResponse JsonMessage(string message, int statusCode = 200) { return new HttpResponse(statusCode) .WithContent(JsonContent.Create(new { Message = message })); } } 开发人员可以使用此类实现会话、上下文和数据库连接。提供的代码展示了一个使用DatabaseConnectionHandler的实际例子，自动在每个请求结束时释放数据库连接。 集成非常简单，处理程序在服务器设置期间注册。HttpServerHandler类为管理资源和扩展Sisk HTTP应用程序的行为提供了一个强大的工具集。"
  },
  "docs/cn/advanced/manual-setup.html": {
    "href": "docs/cn/advanced/manual-setup.html",
    "title": "| Sisk Framework",
    "keywords": "手动（高级）设置 在本节中，我们将创建一个没有任何预定义标准的 HTTP 服务器，以一种完全抽象的方式。在这里，您可以手动构建 HTTP 服务器的工作方式。每个 ListeningHost 都有一个路由器，一个 HTTP 服务器可以有多个 ListeningHost，每个 ListeningHost 指向不同主机上的不同端口。 首先，我们需要理解请求/响应的概念。它非常简单：对于每个请求，都必须有一个响应。Sisk 也遵循这个原则。让我们创建一个方法，它以 HTML 格式响应“Hello, World！”消息，并指定状态码和标头。 // Program.cs using Sisk.Core.Http; using Sisk.Core.Routing; static HttpResponse IndexPage(HttpRequest request) { HttpResponse indexResponse = new HttpResponse { Status = System.Net.HttpStatusCode.OK, Content = new HtmlContent(@\" <html> <body> <h1>Hello, world!</h1> </body> </html> \") }; return indexResponse; } 下一步是将此方法与 HTTP 路由关联。 路由器 路由器是请求路由的抽象，是服务请求和响应之间的桥梁。路由器管理服务路由、函数和错误。 一个路由器可以有多个路由，每个路由可以在该路径上执行不同的操作，例如执行一个函数、服务一个页面或提供服务器上的资源。 让我们创建第一个路由器，并将我们的 IndexPage 方法与索引路径关联。 Router mainRouter = new Router(); // SetRoute 将所有索引路由与我们的方法关联。 mainRouter.SetRoute(RouteMethod.Get, \"/\", IndexPage); 现在我们的路由器可以接收请求并发送响应。但是，mainRouter 没有与主机或服务器关联，因此它无法单独工作。下一步是创建我们的 ListeningHost。 监听主机和端口 ListeningHost 可以托管路由器和同一路由器的多个监听端口。ListeningPort 是 HTTP 服务器将监听的前缀。 在这里，我们可以创建一个 ListeningHost，它指向我们路由器的两个端点： ListeningHost myHost = new ListeningHost { Router = new Router(), Ports = new ListeningPort[] { new ListeningPort(\"http://localhost:5000/\") } }; 现在我们的 HTTP 服务器将监听指定的端点并将请求重定向到我们的路由器。 服务器配置 服务器配置负责 HTTP 服务器本身的大多数行为。在此配置中，我们可以将 ListeningHosts 与我们的服务器关联。 HttpServerConfiguration config = new HttpServerConfiguration(); config.ListeningHosts.Add(myHost); // 将我们的 ListeningHost 添加到此服务器配置 接下来，我们可以创建我们的 HTTP 服务器： HttpServer server = new HttpServer(config); server.Start(); // 启动服务器 Console.ReadKey(); // 防止应用程序退出 现在我们可以编译我们的可执行文件并使用以下命令运行我们的 HTTP 服务器： dotnet watch 在运行时，打开浏览器并导航到服务器路径，您应该会看到："
  },
  "docs/cn/advanced/multi-host-setup.html": {
    "href": "docs/cn/advanced/multi-host-setup.html",
    "title": "| Sisk Framework",
    "keywords": "Sisk 框架一直以来都支持每个服务器使用多个主机，也就是说，单个 HTTP 服务器可以监听多个端口，每个端口都有其自己的路由器和运行在其上的服务。 这样，使用 Sisk 在单个 HTTP 服务器上轻松分离职责并管理服务。以下示例展示了创建两个监听主机，每个主机监听不同的端口，具有不同的路由器和操作。 阅读 手动创建应用程序 了解有关此抽象的详细信息。 static void Main(string[] args) { // 创建两个监听主机，每个主机都有自己的路由器，并监听自己的端口 // ListeningHost hostA = new ListeningHost(); hostA.Ports = [new ListeningPort(12000)]; hostA.Router = new Router(); hostA.Router.SetRoute(RouteMethod.Get, \"/\", request => new HttpResponse().WithContent(\"Hello from the host A!\")); ListeningHost hostB = new ListeningHost(); hostB.Ports = [new ListeningPort(12001)]; hostB.Router = new Router(); hostB.Router.SetRoute(RouteMethod.Get, \"/\", request => new HttpResponse().WithContent(\"Hello from the host B!\")); // 创建服务器配置并添加两个监听主机 // HttpServerConfiguration configuration = new HttpServerConfiguration(); configuration.ListeningHosts.Add(hostA); configuration.ListeningHosts.Add(hostB); // 创建一个使用指定配置的 HTTP 服务器 // HttpServer server = new HttpServer(configuration); // 启动服务器 server.Start(); Console.WriteLine(\"尝试访问主机 A 在 {0}\", server.ListeningPrefixes[0]); Console.WriteLine(\"尝试访问主机 B 在 {0}\", server.ListeningPrefixes[1]); Thread.Sleep(-1); }"
  },
  "docs/cn/advanced/request-lifecycle.html": {
    "href": "docs/cn/advanced/request-lifecycle.html",
    "title": "| Sisk Framework",
    "keywords": "此图表解释了HTTP请求的生命周期，从请求到达服务器到被发送到客户端的整个过程。"
  },
  "docs/cn/changelogs.html": {
    "href": "docs/cn/changelogs.html",
    "title": "变更日志 | Sisk Framework",
    "keywords": "变更日志 Sisk 的每一次更改都记录在变更日志中。您可以在这里查看所有 Sisk 版本的变更日志：https://github.com/sisk-http/archive/tree/master/changelogs"
  },
  "docs/cn/deploying.html": {
    "href": "docs/cn/deploying.html",
    "title": "| Sisk Framework",
    "keywords": "部署您的 Sisk 应用程序的过程包括将您的项目发布到生产环境。虽然这个过程相对简单，但需要注意一些细节，这些细节对于部署基础设施的安全性和稳定性至关重要。 理想情况下，在完成所有可能的测试并准备好应用程序后，您应该能够将应用程序部署到云端。 发布您的应用程序 发布您的 Sisk 应用程序或服务是指生成针对生产环境进行优化和准备就绪的二进制文件。在本例中，我们将编译生产环境的二进制文件，以便在安装了 .NET Runtime 的机器上运行。 为了构建您的应用程序，您需要在计算机上安装 .NET SDK，并在目标服务器上安装 .NET Runtime 才能运行应用程序。您可以了解如何在 Linux 服务器 此处、Windows 和 Mac OS 上安装 .NET Runtime。 在项目所在的文件夹中，打开一个终端并使用 .NET publish 命令： dotnet publish -r linux-x64 -c Release 这将在 bin/Release/publish/linux-x64 目录中生成您的二进制文件。 Note 如果您的应用程序使用 Sisk.ServiceProvider 包运行，您应该将 service-config.json 文件复制到您的主机服务器，以及 dotnet publish 生成的所有二进制文件。 您可以保留预配置的文件，其中包含环境变量、侦听端口和主机以及其他服务器配置。 下一步是将这些文件传输到将托管您的应用程序的服务器。 之后，为您的二进制文件授予执行权限。在本例中，假设我们的项目名称为“my-app”： cd /home/htdocs chmod +x my-app ./my-app 运行应用程序后，检查它是否产生任何错误消息。如果没有产生错误消息，则表示您的应用程序正在运行。 此时，由于尚未配置防火墙等访问规则，您可能无法通过服务器外部的网络访问您的应用程序。我们将在后续步骤中考虑这一点。 您应该知道虚拟主机的地址，您的应用程序正在侦听该地址。这在应用程序中手动设置，取决于您如何实例化 Sisk 服务。 如果您 未 使用 Sisk.ServiceProvider 包，则应该在您定义 HttpServer 实例的地方找到它： HttpServer server = HttpServer.Emit(5000, out HttpServerConfiguration config, out var host, out var router); // sisk 应该侦听 http://localhost:5000/ 手动关联侦听主机： config.ListeningHosts.Add(new ListeningHost(\"https://localhost:5000/\", router)); 或者，如果您使用 Sisk.ServiceProvider 包，请在 service-config.json 中： { \"Server\": { }, \"ListeningHost\": { \"Ports\": [ \"http://localhost:5000/\" ] } } 由此，我们可以创建一个反向代理来侦听您的服务，并使流量可通过开放网络访问。 代理您的应用程序 代理您的服务意味着不直接将您的 Sisk 服务公开到外部网络。这种做法对于服务器部署非常常见，因为： 允许您在应用程序中关联 SSL 证书； 在访问服务之前创建访问规则，避免过载； 控制带宽和请求限制； 为您的应用程序设置独立的负载均衡器； 防止安全损坏不可恢复的基础设施。 您可以通过反向代理（例如 Nginx 或 Apache）或使用类似 Cloudflared 的 HTTP-over-DNS 隧道来提供您的应用程序。 另外，请务必正确解析代理的转发标头，以便通过 转发解析器 获取客户端信息，例如 IP 地址和主机。 在创建隧道、防火墙配置并使应用程序运行之后，下一步是为您的应用程序创建服务。 Note 在非 Windows 系统上直接在 Sisk 服务中使用 SSL 证书是不可能的。这是 HttpListener 实现的一个要点，HttpListener 是 Sisk 中 HTTP 队列管理的核心模块，而这种实现在不同的操作系统之间有所不同。如果您使用反向代理，则可以将 SSL 证书与虚拟主机关联，从而在 Sisk 服务中使用 SSL。对于其他系统，强烈建议使用反向代理。 创建一个服务 创建服务将使您的应用程序始终可用，即使在重新启动服务器实例或发生不可恢复的崩溃后也是如此。 在本简短的教程中，我们将使用先前教程的内容作为展示，以使您的服务始终处于活动状态。 访问服务配置文件所在的文件夹： cd /etc/systemd/system 创建您的 my-app.service 文件并包含以下内容： [Unit] Description=<关于您的应用程序的描述> [Service] # 设置将启动服务的用户 User=<将启动服务的用户> # ExecStart 路径不是相对于 WorkingDirectory 的。 # 将其设置为可执行文件的完整路径 WorkingDirectory=/home/htdocs ExecStart=/home/htdocs/my-app # 设置服务在崩溃时始终重新启动 Restart=always RestartSec=3 [Install] WantedBy=multi-user.target 重新启动您的服务管理器模块： sudo systemctl daemon-reload 从您设置的文件名开始启动您的新创建的服务，并检查它们是否正在运行： sudo systemctl start my-app sudo systemctl status my-app 现在，如果您的应用程序正在运行（“Active: active”），请启用您的服务，以便在系统重新启动后保持运行： sudo systemctl enable my-app 现在，您已经准备好向所有人展示您的 Sisk 应用程序。"
  },
  "docs/cn/extensions/basic-auth.html": {
    "href": "docs/cn/extensions/basic-auth.html",
    "title": "| Sisk Framework",
    "keywords": "基本身份验证 Basic Auth 包增加了一个请求处理程序，能够处理您的 Sisk 应用程序中的基本身份验证方案，配置和操作非常简单。 基本 HTTP 身份验证是一种最简单的请求身份验证形式，通过用户 ID 和密码来验证请求，会话由客户端完全控制，没有身份验证或访问令牌。 在 MDN 规范 中了解更多关于基本身份验证方案的信息。 安装 要开始使用，请在您的项目中安装 Sisk.BasicAuth 包： > dotnet add package Sisk.BasicAuth 您可以在 Nuget 存储库 中查看更多安装方法。 创建您的身份验证处理程序 您可以控制整个模块或单个路由的身份验证方案。为此，让我们首先编写第一个基本身份验证处理程序。 在下面的示例中，建立数据库连接，检查用户是否存在以及密码是否有效，然后将用户存储在上下文袋中。 public class UserAuthHandler : BasicAuthenticateRequestHandler { public UserAuthHandler() : base() { Realm = \"要进入此页面，请提供您的凭据。 \"; } public override HttpResponse? OnValidating(BasicAuthenticationCredentials credentials, HttpContext context) { DbContext db = new DbContext(); // 在这种情况下，我们使用电子邮件作为用户 ID 字段，因此我们将根据电子邮件搜索用户。 User? user = db.Users.FirstOrDefault(u => u.Email == credentials.UserId); if (user == null) { return base.CreateUnauthorizedResponse(\"对不起！未找到此电子邮件的用户。\"); } // 验证凭据密码对于此用户有效。 if (!user.ValidatePassword(credentials.Password)) { return base.CreateUnauthorizedResponse(\"凭据无效。\"); } // 将已登录的用户添加到 HTTP 上下文中 // 并继续执行 context.Bag.Add(\"loggedUser\", user); return null; } } 因此，只需将此请求处理程序与我们的路由或类关联即可。 public class UsersController { [RouteGet(\"/\")] [RequestHandler(typeof(UserAuthHandler))] public string Index(HttpRequest request) { User loggedUser = (User)request.Context.RequestBag[\"loggedUser\"]; return \"您好，\" + loggedUser.Name + \"！\"; } } 或者使用 RouterModule 类： public class UsersController : RouterModule { public ClientModule() { // 现在，此类中的所有路由都将由 UserAuthHandler 处理。 base.HasRequestHandler(new UserAuthHandler()); } [RouteGet(\"/\")] public string Index(HttpRequest request) { User loggedUser = (User)request.Context.RequestBag[\"loggedUser\"]; return \"您好，\" + loggedUser.Name + \"！\"; } } 备注 基本身份验证的主要责任由客户端承担。存储、缓存控制和加密都由客户端本地处理。服务器仅接收凭据并验证是否允许访问。 请注意，这种方法不是最安全的，因为它将很大一部分责任放在客户端，这可能难以追踪和维护其凭据的安全性。此外，对于密码，必须在安全的连接上下文中（SSL）传输，因为它们本身没有加密。请求标头中的短暂拦截可能会暴露用户的访问凭据。 对于生产应用程序，请选择更强大的身份验证解决方案，避免使用过多的现成的组件，因为它们可能无法适应您的项目需求，并最终导致暴露安全风险。"
  },
  "docs/cn/extensions/ini-configuration.html": {
    "href": "docs/cn/extensions/ini-configuration.html",
    "title": "INI 配置提供程序 | Sisk Framework",
    "keywords": "INI 配置提供程序 Sisk 提供了一种除了 JSON 之外的获取启动配置的方法。实际上，任何实现 IConfigurationReader 的管道都可以与 PortableConfigurationBuilder.WithConfigurationPipeline 一起使用，从任何文件类型读取服务器配置。 Sisk.IniConfiguration 包提供了一个基于流的 INI 文件读取器，它不会为常见的语法错误抛出异常，并且具有简单的配置语法。该包可以在 Sisk 框架之外使用，为需要高效 INI 文档读取器的项目提供灵活性。 安装 要安装该包，您可以从以下开始： $ dotnet add package Sisk.IniConfiguration 并在您的代码中使用它，如下例所示： class Program { static HttpServerHostContext Host = null!; static void Main(string[] args) { Host = HttpServer.CreateBuilder() .UsePortableConfiguration(config => { config.WithConfigFile(\"app.ini\", createIfDontExists: true); // 向配置读取器添加 IniConfigurationPipeline config.WithConfigurationPipeline<IniConfigurationPipeline>(); }) .UseRouter(r => { r.MapGet(\"/\", SayHello); }) .Build(); Host.Start(); } static HttpResponse SayHello(HttpRequest request) { string? name = Host.Parameters[\"name\"] ?? \"world\"; return new HttpResponse($\"Hello, {name}!\"); } } 上面的代码将查找进程当前目录（CurrentDirectory）中的 app.ini 文件。INI 文件如下所示： [Server] # 支持多个监听地址 Listen = http://localhost:5552/ Listen = http://localhost:5553/ ThrowExceptions = false AccessLogsStream = console [Cors] AllowMethods = GET, POST AllowHeaders = Content-Type, Authorization AllowOrigin = * [Parameters] Name = \"Kanye West\" INI 语言和语法 当前实现的语言版本： 属性和部分名称不区分大小写。 属性名称和值会被修剪。 值可以用单引号或双引号引起来。引号内部可以有换行符。 使用 # 和 ; 支持注释。也允许尾随注释。 属性可以有多个值。 有关 Sisk 中使用的 INI 解析器“语言”的详细文档，请参阅 GitHub 上的文档。 使用以下 ini 代码作为示例： One = 1 Value = this is an value Another value = \"this value has an line break on it\" ; the code below has some colors [some section] Color = Red Color = Blue Color = Yellow ; do not use yellow 使用以下代码解析它： // 从字符串解析 ini 文本 IniDocument doc = IniDocument.FromString(iniText); // 获取一个值 string? one = doc.Global.GetOne(\"one\"); string? anotherValue = doc.Global.GetOne(\"another value\"); // 获取多个值 string[]? colors = doc.GetSection(\"some section\")?.GetMany(\"color\"); 配置参数 部分和名称 是否允许多个值 描述 Server.Listen 是 服务器监听地址/端口。 Server.Encoding 否 服务器默认编码。 Server.MaximumContentLength 否 服务器最大内容长度（以字节为单位）。 Server.IncludeRequestIdHeader 否 指定 HTTP 服务器是否应发送 X-Request-Id 标头。 Server.ThrowExceptions 否 指定是否应抛出未处理的异常。 Server.AccessLogsStream 否 指定访问日志输出流。 Server.ErrorsLogsStream 否 指定错误日志输出流。 Cors.AllowMethods 否 指定 CORS Allow-Methods 标头值。 Cors.AllowHeaders 否 指定 CORS Allow-Headers 标头值。 Cors.AllowOrigins 否 指定多个 Allow-Origin 标头，用逗号分隔。有关 AllowOrigins 的更多信息。 Cors.AllowOrigin 否 指定一个 Allow-Origin 标头。 Cors.ExposeHeaders 否 指定 CORS Expose-Headers 标头值。 Cors.AllowCredentials 否 指定 CORS Allow-Credentials 标头值。 Cors.MaxAge 否 指定 CORS Max-Age 标头值。"
  },
  "docs/cn/extensions/json-rpc.html": {
    "href": "docs/cn/extensions/json-rpc.html",
    "title": "| Sisk Framework",
    "keywords": "Sisk有一个实验性模块用于JSON-RPC 2.0 API，它允许您创建更简单的应用程序。此扩展严格实现JSON-RPC 2.0传输接口，并通过HTTP GET、POST请求以及与Sisk的WebSockets提供传输。 您可以通过以下命令使用Nuget安装扩展。请注意，在实验/测试版中，您应该在Visual Studio中启用搜索预发布包的选项。 dotnet add package Sisk.JsonRpc 传输接口 JSON-RPC是一种无状态的、异步远程过程执行（RDP）协议，它使用JSON进行单向数据通信。JSON-RPC请求通常由一个ID标识，响应通过与请求中发送的相同ID传递。并非所有请求都需要响应，这些称为“通知”。 JSON-RPC 2.0规范详细解释了传输方式。此传输与其使用位置无关。Sisk通过HTTP实现此协议，遵循JSON-RPC over HTTP的规范，该规范部分支持GET请求，但完全支持POST请求。WebSockets也得到支持，提供异步消息通信。 一个JSON-RPC请求看起来类似于： { \"jsonrpc\": \"2.0\", \"method\": \"Sum\", \"params\": [1, 2, 4], \"id\": 1 } 一个成功的响应看起来类似于： { \"jsonrpc\": \"2.0\", \"result\": 7, \"id\": 1 } JSON-RPC 方法 以下示例演示了如何使用Sisk创建JSON-RPC API。一个数学运算类执行远程操作并将序列化响应传递给客户端。 using var app = HttpServer.CreateBuilder(port: 5555) .UseJsonRPC((sender, args) => { // 将带有WebMethod标签的所有方法添加到JSON-RPC 处理器 args.Handler.Methods.AddMethodsFromType(new MathOperations()); // 将 /service 路由映射到处理JSON-RPC POST 和GET请求 args.Router.MapPost(\"/service\", args.Handler.Transport.HttpPost); args.Router.MapGet(\"/service\", args.Handler.Transport.HttpGet); // 在GET /ws 上创建一个 WebSocket 处理器 args.Router.MapGet(\"/ws\", request => { var ws = request.GetWebSocket(); ws.OnReceive += args.Handler.Transport.WebSocket; ws.WaitForClose(timeout: TimeSpan.FromSeconds(30)); return ws.Close(); }); }) .Build(); await app.StartAsync(); public class MathOperations { [WebMethod] public float Sum(float a, float b) { return a + b; } [WebMethod] public double Sqrt(float a) { return Math.Sqrt(a); } } 上述示例将Sum和Sqrt方法映射到JSON-RPC 处理器，这些方法将在GET /service、POST /service和GET /ws上可用。方法名称不区分大小写。 方法参数将自动反序列化为其特定类型。也支持使用命名参数的请求。JSON序列化由LightJson库完成。当类型无法正确反序列化时，您可以为该类型创建特定的JSON转换器并将其与您的JsonSerializerOptions关联。 您还可以直接在方法中获取JSON-RPC 请求中的$.params原始对象。 [WebMethod] public float Sum(JsonArray|JsonObject @params) { ... } 为此，@params必须是方法中的唯一参数，名称必须为params（在C#中，@是必要的，以转义此参数名称）。 对于命名对象或位置数组，都会对参数进行反序列化。例如，以下方法可以通过以下两种请求远程调用： [WebMethod] public float AddUserToStore(string apiKey, User user, UserStore store) { ... } 对于数组，必须遵循参数的顺序。 { \"jsonrpc\": \"2.0\", \"method\": \"AddUserToStore\", \"params\": [ \"1234567890\", { \"name\": \"John Doe\", \"email\": \"john@example.com\" }, { \"name\": \"My Store\" } ], \"id\": 1 } 自定义序列化器 您可以在JsonRpcHandler.JsonSerializerOptions属性中自定义JSON序列化器。在此属性中，您可以启用使用JSON5反序列化消息。尽管JSON5不是JSON-RPC 2.0的规范，但JSON5是JSON的扩展，允许更易于阅读和理解的编写。 using var host = HttpServer.CreateBuilder(5556) .UseJsonRPC((o, e) => { // 使用经过消毒的名称比较器。此比较器仅比较名称中的字母和数字，并丢弃其他符号。例如： // foo_bar10 == FooBar10 e.Handler.JsonSerializerOptions.PropertyNameComparer = new JsonSanitizedComparer(); // 为JSON解释器启用JSON5。即使激活此选项，也仍然允许使用纯JSON e.Handler.JsonSerializerOptions.SerializationFlags = LightJson.Serialization.JsonSerializationFlags.Json5; // 将POST /service 路由映射到JSON RPC 处理器 e.Router.MapPost(\"/service\", e.Handler.Transport.HttpPost); }) .Build(); host.Start();"
  },
  "docs/cn/extensions/service-providers.html": {
    "href": "docs/cn/extensions/service-providers.html",
    "title": "| Sisk Framework",
    "keywords": "服务提供程序是一种将您的 Sisk 应用程序移植到不同环境的可移植配置文件的方式。此功能允许您更改服务器的端口、参数和其他选项，而无需为每个环境修改应用程序代码。此模块依赖于 Sisk 的构建语法，可以通过 UsePortableConfiguration 方法进行配置。 配置提供程序使用 IConfigurationProvider 实现，它提供了一个配置读取器，可以接收任何实现。默认情况下，Sisk 提供了一个 JSON 配置读取器，但还有一个用于 INI 文件的包。您还可以创建自己的配置提供程序并使用以下方法注册它： using var app = HttpServer.CreateBuilder() .UsePortableConfiguration(config => { config.WithConfigReader<MyConfigurationReader>(); }) .Build(); 如前所述，默认提供程序是一个 JSON 文件。默认情况下，搜索的文件名为 service-config.json，并且它在运行进程的当前目录中搜索，而不是可执行文件目录。 您可以选择更改文件名以及 Sisk 应该在哪里查找配置文件，方法如下： using Sisk.Core.Http; using Sisk.Core.Http.Hosting; using var app = HttpServer.CreateBuilder() .UsePortableConfiguration(config => { config.WithConfigFile(\"config.toml\", createIfDontExists: true, lookupDirectories: ConfigurationFileLookupDirectory.CurrentDirectory | ConfigurationFileLookupDirectory.AppDirectory); }) .Build(); 上面的代码将查找当前运行进程的 config.toml 文件。如果找不到，它将搜索可执行文件所在的目录。如果文件不存在，则会 honored createIfDontExists 参数，在最后一个测试路径（基于 lookupDirectories）中创建一个文件（没有内容），并在控制台中抛出一个错误，阻止应用程序初始化。 Tip 您可以查看 INI 配置读取器和 JSON 配置读取器的源代码，以了解如何实现 IConfigurationProvider。 从 JSON 文件读取配置 默认情况下，Sisk 提供了一个从 JSON 文件读取配置的配置提供程序。此文件遵循固定结构，由以下参数组成： { \"Server\": { \"DefaultEncoding\": \"UTF-8\", \"ThrowExceptions\": true, \"IncludeRequestIdHeader\": true }, \"ListeningHost\": { \"Label\": \"My sisk application\", \"Ports\": [ \"http://localhost:80/\", \"https://localhost:443/\", // 配置文件也支持注释 ], \"CrossOriginResourceSharingPolicy\": { \"AllowOrigin\": \"*\", \"AllowOrigins\": [ \"*\" ], // new on 0.14 \"AllowMethods\": [ \"*\" ], \"AllowHeaders\": [ \"*\" ], \"MaxAge\": 3600 }, \"Parameters\": { \"MySqlConnection\": \"server=localhost;user=root;\" } } } 可以从配置文件中访问的配置参数可以在服务器构造函数中： using var app = HttpServer.CreateBuilder() .UsePortableConfiguration(config => { config.WithParameters(paramCollection => { string databaseConnection = paramCollection.GetValueOrThrow(\"MySqlConnection\"); }); }) .Build(); 每个配置读取器都提供了一种读取服务器初始化参数的方法。某些属性指示应在进程环境中而不是在配置文件中定义，例如敏感的 API 数据、API 密钥等。 配置文件结构 JSON 配置文件由以下属性组成： 属性 必填 描述 Server 是 表示服务器本身及其设置。 Server.AccessLogsStream 可选 默认为console。指定访问日志输出流。可以是文件名、 null 或 console。 Server.ErrorsLogsStream 可选 默认为null。指定错误日志输出流。可以是文件名、 null 或 console。 Server.MaximumContentLength 可选 默认为0。指定最大内容长度（以字节为单位）。零表示无限。 Server.IncludeRequestIdHeader 可选 默认为false。指定 HTTP 服务器是否应发送 X-Request-Id 标头。 Server.ThrowExceptions 可选 默认为true。指定未处理的异常是否应抛出。设置为 false 用于生产环境，设置为 true 用于调试环境。 ListeningHost 必填 表示服务器侦听主机。 ListeningHost.Label 可选 表示应用程序标签。 ListeningHost.Ports 必填 表示一个字符串数组，与 ListeningPort 语法匹配。 ListeningHost.CrossOriginResourceSharingPolicy 可选 设置应用程序的 CORS 标头。 ListeningHost.CrossOriginResourceSharingPolicy.AllowCredentials 可选 默认为false。指定 Allow-Credentials 标头。 ListeningHost.CrossOriginResourceSharingPolicy.ExposeHeaders 可选 默认为null。此属性期望一个字符串数组。指定 Expose-Headers 标头。 ListeningHost.CrossOriginResourceSharingPolicy.AllowOrigin 可选 默认为null。此属性期望一个字符串。指定 Allow-Origin 标头。 ListeningHost.CrossOriginResourceSharingPolicy.AllowOrigins 可选 默认为null。此属性期望一个字符串数组。指定多个 Allow-Origin 标头。有关详细信息，请参阅 AllowOrigins。 ListeningHost.CrossOriginResourceSharingPolicy.AllowMethods 可选 默认为null。此属性期望一个字符串数组。指定 Allow-Methods 标头。 ListeningHost.CrossOriginResourceSharingPolicy.AllowHeaders 可选 默认为null。此属性期望一个字符串数组。指定 Allow-Headers 标头。 ListeningHost.CrossOriginResourceSharingPolicy.MaxAge 可选 默认为null。此属性期望一个整数。指定 Max-Age 标头（以秒为单位）。 ListeningHost.Parameters 可选 指定传递给应用程序设置方法的属性。"
  },
  "docs/cn/extensions/ssl-proxy.html": {
    "href": "docs/cn/extensions/ssl-proxy.html",
    "title": "| Sisk Framework",
    "keywords": "Sisk SSL代理是一个模块，为Sisk中的ListeningHost提供HTTPS连接，并将HTTPS消息路由到不安全的HTTP上下文。该模块旨在为使用HttpListener运行的服务提供SSL连接，而HttpListener不支持SSL。 代理在同一应用程序中运行，侦听HTTP/1.1消息，并将它们以相同协议转发到Sisk。目前，此功能处于高度实验阶段，可能不够稳定以在生产环境中使用。 目前，SslProxy支持几乎所有HTTP/1.1功能，例如保持活动连接、分块编码、WebSockets等。对于到SSL代理的开放连接，将创建一个TCP连接到目标服务器，并将代理转发到已建立的连接。 SslProxy可以用HttpServer.CreateBuilder使用，如下所示： using var app = HttpServer.CreateBuilder(port: 5555) .UseRouter(r => { r.MapGet(\"/\", request => { return new HttpResponse(\"Hello, world!\"); }); }) // 添加SSL到项目 .UseSsl( sslListeningPort: 5567, new X509Certificate2(@\".\\ssl.pfx\", password: \"12345\") ) .Build(); app.Start(); 您必须为代理提供有效的SSL证书。为了确保浏览器接受证书，请务必将其导入操作系统，以便其正常工作。"
  },
  "docs/cn/features/discard-syntax.html": {
    "href": "docs/cn/features/discard-syntax.html",
    "title": "| Sisk Framework",
    "keywords": "HTTP服务器可用于侦听来自操作的回调请求，例如OAuth身份验证，并在收到该请求后被丢弃。这在需要后台操作但不想为其设置整个HTTP应用程序的情况下很有用。 以下示例展示了如何使用CreateListener 在端口5555上创建一个侦听HTTP服务器，并等待下一个上下文： using (var server = HttpServer.CreateListener(5555)) { // 等待下一个HTTP请求 var context = await server.WaitNextAsync(); Console.WriteLine($\"Requested path: {context.Request.Path}\"); } WaitNext 函数等待下一个已完成请求处理的上下文。获得此操作的结果后，服务器已经完全处理了请求并向客户端发送了响应。"
  },
  "docs/cn/features/instancing.html": {
    "href": "docs/cn/features/instancing.html",
    "title": "根据请求实例化成员 | Sisk Framework",
    "keywords": "根据请求实例化成员 通常，会为请求的生命周期分配成员和实例，例如数据库连接、已验证的用户或会话令牌。一种可能性是通过 HttpContext.RequestBag，它创建一个在整个请求生命周期内有效的字典。 此字典可由 请求处理程序 访问，并在整个请求中定义变量。例如，一个验证用户请求处理程序将此用户设置到 HttpContext.RequestBag 中，并且在请求逻辑中，可以使用 HttpContext.RequestBag.Get<User>() 获取此用户。 以下是一个示例： public class AuthenticateUser : IRequestHandler { public RequestHandlerExecutionMode ExecutionMode { get; init; } = RequestHandlerExecutionMode.BeforeResponse; public HttpResponse? Execute(HttpRequest request, HttpContext context) { User authenticatedUser = AuthenticateUser(request); context.RequestBag.Set(authenticatedUser); return null; // 继续到下一个请求处理程序或请求逻辑 } } [RouteGet(\"/hello\")] [RequestHandler<AuthenticateUser>] public static HttpResponse SayHello(HttpRequest request) { var authenticatedUser = request.Bag.Get<User>(); return new HttpResponse() { Content = new StringContent($\"Hello {authenticatedUser.Name}!\") }; } 这是一个此操作的初步示例。User 的实例是在专门用于身份验证的请求处理程序中创建的，并且使用此请求处理程序的所有路由都将保证它们在 HttpContext.RequestBag 的实例中将有一个 User。 可以通过类似于 GetOrAdd 或 GetOrAddAsync 的方法，在 RequestBag 中未先前定义的情况下定义获取实例的逻辑。 从版本 1.3 开始，引入了静态属性 HttpContext.Current，允许访问正在执行的请求上下文的当前 HttpContext。这使得可以在请求上下文之外公开 HttpContext 的成员，并在路由对象中定义实例。 以下示例定义了一个控制器，该控制器具有请求上下文通常访问的成员。 public abstract class Controller : RouterModule { public DbContext Database { get { // 创建 DbContext 或获取现有 DbContext return HttpContext.Current.RequestBag.GetOrAdd(() => new DbContext()); } } // 如果在请求袋中未定义用户，则访问此属性将引发异常 public User AuthenticatedUser { get => HttpContext.Current.RequestBag.Get<User>(); } // 支持公开 HttpRequest 实例 public HttpRequest Request { get => HttpContext.Current.Request; } } 并定义继承自控制器的类型： [RoutePrefix(\"/api/posts\")] public class PostsController : Controller { [RouteGet] public IEnumerable<Blog> ListPosts() { return Database.Posts .Where(post => post.AuthorId == AuthenticatedUser.Id) .ToList(); } [RouteGet(\"<id>\")] public Post GetPost() { int blogId = Request.RouteParameters[\"id\"].GetInteger(); Post? post = Database.Posts .FirstOrDefault(post => post.Id == blogId && post.AuthorId == AuthenticatedUser.Id); return post ?? new HttpResponse(404); } } 对于上述示例，您需要在路由器中配置 值处理程序，以便路由器返回的对象被转换为有效的 HttpResponse。 请注意，这些方法没有像其他方法中那样包含 HttpRequest request 参数。这是因为从版本 1.3 开始，路由器支持两种类型的委托用于路由响应：RouteAction，这是默认的委托，它接收 HttpRequest 参数，以及 ParameterlessRouteAction。可以通过线程上的静态 HttpContext 的 Request 属性通过两个委托访问 HttpRequest 对象。 在上述示例中，我们定义了一个可释放对象 DbContext，我们需要确保在 HTTP 会话结束时释放所有在 DbContext 中创建的实例。为此，我们可以使用两种方法来实现这一点。一种方法是在路由器操作之后执行的请求处理程序，另一种方法是通过自定义 服务器处理程序。 对于第一种方法，我们可以直接在 RouterModule 继承的 OnSetup 方法中创建请求处理程序： public abstract class Controller : RouterModule { ... protected override void OnSetup(Router parentRouter) { base.OnSetup(parentRouter); HasRequestHandler(RequestHandler.Create( execute: (req, ctx) => { // 获取在请求处理程序上下文中定义的 DbContext，并释放它 ctx.RequestBag.GetOrDefault<DbContext>()?.Dispose(); return null; }, executionMode: RequestHandlerExecutionMode.AfterResponse)); } } 上述方法将确保在 HTTP 会话最终结束时释放 DbContext。您可以为需要在响应结束时释放的更多成员执行此操作。 对于第二种方法，您可以创建一个自定义 服务器处理程序 来释放 DbContext，当 HTTP 会话最终结束时。 public class ObjectDisposerHandler : HttpServerHandler { protected override void OnHttpRequestClose(HttpServerExecutionResult result) { result.Context.RequestBag.GetOrDefault<DbContext>()?.Dispose(); } } 并在构建器中使用它： using var host = HttpServer.CreateBuilder() .UseHandler<ObjectDisposerHandler>() .Build(); 这是处理代码清理并通过将请求的依赖项与将使用的模块类型分开的方式来实现的，从而减少了路由器每个操作中的重复代码量。这是一种类似于 ASP.NET 等框架中依赖注入所使用的实践。"
  },
  "docs/cn/features/logging.html": {
    "href": "docs/cn/features/logging.html",
    "title": "| Sisk Framework",
    "keywords": "您可以配置 Sisk 自动写入访问日志和错误日志。可以定义日志轮转、扩展和频率。 LogStream 类提供了一种异步写入日志并将其保留在可等待的写入队列中的方法。 在本文中，我们将向您展示如何配置应用程序的日志记录。 基于文件的访问日志 将日志写入文件会打开文件、写入行文本，然后关闭文件以写入每一行。采用此过程是为了在日志中保持写入响应性。 config.AccessLogsStream = new LogStream(\"logs/access.log\"); 上述代码将所有传入请求写入 logs/access.log 文件。请注意，如果文件不存在，则会自动创建该文件，但其父文件夹则不会。无需创建 logs/ 目录，因为 LogStream 类会自动创建它。 基于流的日志记录 您可以通过在构造函数中传递 TextWriter 对象实例（例如 Console.Out）将日志文件写入 TextWriter 对象实例。 config.AccessLogsStream = new LogStream(Console.Out); 对于流式日志中写入的每个消息，都会调用 TextWriter.Flush() 方法。 访问日志格式 您可以通过预定义变量自定义访问日志格式。请考虑以下行： config.AccessLogsFormat = \"%dd/%dmm/%dy %tH:%ti:%ts %tz %ls %ri %rs://%ra%rz%rq [%sc %sd] %lin -> %lou in %lmsms [%{user-agent}]\"; 它将写入类似于以下消息： 29/mar./2023 15:21:47 -0300 Executed ::1 http://localhost:5555/ \\[200 OK\\] 689B -> 707B in 84ms \\[Mozilla/5.0 (Windows NT 10.0; Win64; x64) Chrome/111.0.0.0 Safari/537.36\\] 您可以通过表格中描述的格式来格式化您的日志文件： Variable Description Example %dd 当前时间戳的日，以 00 格式。 25 %dm 当前时间戳的月，以 00 格式。 03 %dmm 当前时间戳的月，以缩写形式。 mar. %dmmm 当前时间戳的月，以完整名称形式。 三月 %dy 当前时间戳的年，以 0000 格式。 2023 %th 当前时间戳的小时，以 12 小时格式。 03 %tH 当前时间戳的小时，以 24 小时格式。 15 %ti 当前时间戳的分钟，以 00 格式。 25 %ts 当前时间戳的秒，以 00 格式。 32 %tm 当前时间戳的毫秒，以 000 格式。 633 %tz 当前时区差，以 +/- 0000 格式。 +0300, -0500, +0000 %ri 请求用户的 IP 地址（可能是 IPv4 或 IPv6）。 192.168.0.1 %rm 请求方法（大写）。 GET %rs 请求用户的 URL 方案。 https, http %ra 请求用户的 URL 权威。 my.contorso.com:8080 %rh 请求用户的 URL 主机。 my.contorso.com %rp 请求用户的 URL 端口。 8080 %rz 请求用户的 URL 绝对路径。 /index.html %rq 请求用户的 URL 查询字符串。?foo=bar&aaa=bbb %sc 响应状态码，以 000 格式。 404 %sd 响应状态描述。 未找到 %lin 传入请求内容大小，以人类可读形式。 12,5kb %lou 输出响应内容大小，以人类可读形式。 65,8kb %lms 服务器处理请求和传递响应的时间，以毫秒格式（000）。 18 %{header} 获取 HTTP 标头的值，其中 header 是标头名称，如果标头不存在，则为空值。此字段不区分大小写。 %{user-agent} 旋转日志 Tip 在 Sisk 0.15 及更早版本中，此功能仅在 Sisk.ServiceProvider 包中可用。在 Sisk 0.16 及更高版本中，此功能已在核心包中实现。 您可以配置 HTTP 服务器在日志文件达到特定大小时将其旋转到压缩的 .gz 文件。大小由您定义的 limiar 定期检查。 config.AccessLogsStream = new LogStream(\"access.log\"); var rotater = new RotatingLogPolicy(config.AccessLogsStream); rotater.Configure(1024 * 1024, TimeSpan.FromHours(6)); 上述代码每六小时检查一次 LogStream 文件是否已达到 1 MB 的限制。如果达到，则压缩文件到 .gz 文件，然后清理 access.log。 在此过程中，写入文件将被锁定，直到文件被压缩和清理为止。所有进入写入的行的队列将等待压缩结束。 此功能仅适用于基于文件的 LogStream。 错误日志记录 当服务器未将错误转发到调试器时，它会将错误转发到日志记录。您可以使用以下内容配置错误写入： config.ThrowExceptions = false; config.ErrorsLogsStream = new LogStream(\"error.log\"); 此属性仅在错误未被回调或 Router.CallbackErrorHandler 属性捕获时写入日志。 服务器写入的错误始终会写入日期和时间、请求标头（不包括正文）、错误跟踪和任何内部异常跟踪。 其他日志实例 您的应用程序可以具有零个或多个 LogStream，它可以具有任意数量的日志通道。因此，可以将应用程序的日志定向到与默认 AccessLog 或 ErrorLog 不同的文件。 LogStream appMessages = new LogStream(\"messages.log\"); appMessages.WriteLine(\"Application started at {0}\", DateTime.Now); 扩展 LogStream 您可以扩展 LogStream 类以写入自定义格式，与当前 Sisk 日志引擎兼容。以下示例允许将彩色消息写入使用 Spectre.Console 库的控制台。 public class CustomLogStream : LogStream { protected override void WriteLineInternal(string line) { base.WriteLineInternal($\"[{DateTime.Now:g}] {line}\"); } } 另一种自动为每个请求/响应写入自定义日志的方法是创建 HttpServerHandler。以下示例更加完整。它将请求和响应的正文以 JSON 格式写入控制台。这对于调试请求非常有用。此示例使用 ContextBag 和 HttpServerHandler。 class Program { static async Task Main(string[] args) { var app = HttpServer.CreateBuilder(host => { host.UseListeningPort(5555); host.UseHandler<JsonMessageHandler>(); }); app.Router += new Route(RouteMethod.Any, \"/json\", request => { return new HttpResponse() .WithContent(JsonContent.Create(new { method = request.Method.Method, path = request.Path, specialMessage = \"Hello, world!!\" })); }); await app.StartAsync(); } } class JsonMessageHandler : HttpServerHandler { protected override void OnHttpRequestOpen(HttpRequest request) { if (request.Method != HttpMethod.Get && request.Headers[\"Content-Type\"]?.Contains(\"json\", StringComparison.InvariantCultureIgnoreCase) == true) { // At this point, the connection is open and the client has sent the header specifying // that the content is JSON.The line below reads the content and leaves it stored in the request. // // If the content is not read in the request action, the GC is likely to collect the content // after sending the response to the client, so the content may not be available after the response is closed. // _ = request.RawBody; // add hint in the context to tell that this request has an json body on it request.Bag.Add(\"IsJsonRequest\", true); } } protected override async void OnHttpRequestClose(HttpServerExecutionResult result) { string? requestJson = null, responseJson = null, responseMessage; if (result.Request.Bag.ContainsKey(\"IsJsonRequest\")) { // reformats the JSON using the CypherPotato.LightJson library var content = result.Request.Body; requestJson = JsonValue.Deserialize(content, new JsonOptions() { WriteIndented = true }).ToString(); } if (result.Response is { } response) { var content = response.Content; responseMessage = $\"{(int)response.Status} {HttpStatusInformation.GetStatusCodeDescription(response.Status)}\"; if (content is HttpContent httpContent && // check if the response is JSON httpContent.Headers.ContentType?.MediaType?.Contains(\"json\", StringComparison.InvariantCultureIgnoreCase) == true) { string json = await httpContent.ReadAsStringAsync(); responseJson = JsonValue.Deserialize(json, new JsonOptions() { WriteIndented = true }).ToString(); } } else { // gets the internal server handling status responseMessage = result.Status.ToString(); } StringBuilder outputMessage = new StringBuilder(); if (requestJson is not null) { outputMessage.AppendLine(\"-----\"); outputMessage.AppendLine($\">>> {result.Request.Method} {result.Request.Path}\"); if (requestJson is not null outputMessage.AppendLine(requestJson); } outputMessage.AppendLine(\"<<< {responseMessage}\"); if (responseJson is not null outputMessage.AppendLine(responseJson); outputMessage.AppendLine(\"-----\"); await Console.Out.WriteLineAsync(outputMessage.ToString()); } }"
  },
  "docs/cn/features/server-sent-events.html": {
    "href": "docs/cn/features/server-sent-events.html",
    "title": "| Sisk Framework",
    "keywords": "Server Sent Events Sisk 支持开箱即用地通过 Server Sent Events 发送消息。您可以创建可丢弃的和持久连接，在运行时获取连接并使用它们。 此功能受到浏览器的一些限制，例如只能发送文本消息，并且无法永久关闭连接。服务器端关闭连接会导致客户端每隔 5 秒（某些浏览器为 3 秒）尝试重新连接一次。 这些连接对于从服务器向客户端发送事件非常有用，而无需客户端每次都请求信息。 创建 SSE 连接 SSE 连接的工作方式类似于常规 HTTP 请求，但它不会在发送响应并立即关闭连接后保持连接打开以发送消息。 通过调用 HttpRequest.GetEventSource() 方法，请求将处于等待状态，同时创建 SSE 实例。 r += new Route(RouteMethod.Get, \"/\", (req) => { var sse = req.GetEventSource(); sse.Send(\"Hello, world!\"); return sse.Close(); }); 在上面的代码中，我们创建了一个 SSE 连接并发送一条“Hello, world”消息，然后我们从服务器端关闭 SSE 连接。 Note 当关闭服务器端连接时，默认情况下，客户端将尝试再次连接，并且连接将重新启动，无限期地执行该方法。 通常，当从服务器关闭连接时，从服务器转发终止消息很常见，以防止客户端再次尝试连接。 追加标头 如果您需要发送标头，可以在发送任何消息之前使用 HttpRequestEventSource.AppendHeader 方法。 r += new Route(RouteMethod.Get, \"/\", (req) => { var sse = req.GetEventSource(); sse.AppendHeader(\"Header-Key\", \"Header-value\"); sse.Send(\"Hello!\"); return sse.Close(); }); 请注意，在发送任何消息之前必须发送标头。 Wait-For-Fail 连接 连接通常在服务器无法再发送消息时终止，例如由于客户端断开连接。这样，连接会自动终止，并且实例将被丢弃。 即使重新连接，该实例也无法使用，因为它与之前的连接相关联。在某些情况下，您可能需要稍后使用此连接，并且不想通过路由的回调方法来管理它。 为此，我们可以使用标识符标识 SSE 连接，并稍后使用它来获取它们，即使不在路由的回调之外。此外，我们使用 WaitForFail 标记连接，以便不终止路由并自动终止连接。 保持活动状态的 SSE 连接将等待发送错误（由断开连接引起）来恢复方法执行。还可以为此设置一个超时。在该时间过后，如果未发送任何消息，则会终止连接并恢复执行。 r += new Route(RouteMethod.Get, \"/\", (req) => { var sse = req.GetEventSource(\"my-index-connection\"); sse.WaitForFail(TimeSpan.FromSeconds(15)); // 等待 15 秒，如果没有消息则终止连接 return sse.Close(); }); 上述方法将创建连接，处理它并等待断开连接或错误。 HttpRequestEventSource? evs = server.EventSources.GetByIdentifier(\"my-index-connection\"); if (evs != null) { // 连接仍然存在 evs.Send(\"Hello again!\"); } 上面的代码片段将尝试查找新创建的连接，如果存在，则向其发送一条消息。 所有活动服务器连接都将包含在 HttpServer.EventSources 集合中。此集合仅存储活动和已标识的连接。已关闭的连接将从集合中移除。 Note 重要的是要注意，保持活动状态受到可能以不可控方式连接到 Sisk 的组件（例如 Web 代理、HTTP 内核或网络驱动程序）的限制，它们会在一段时间后关闭空闲连接。 因此，通过发送周期性 ping 或延长连接关闭的最大时间来保持连接打开非常重要。阅读下一节，以更好地了解发送周期性 ping。 设置连接 ping 策略 Ping 策略是一种自动向客户端发送周期性消息的方法。此功能允许服务器了解客户端何时断开该连接，而无需无限期地保持连接打开。 [RouteGet(\"/sse\")] public HttpResponse Events(HttpRequest request) { var sse = request.GetEventSource(); sse.WithPing(ping => { ping.DataMessage = \"ping-message\"; ping.Interval = TimeSpan.FromSeconds(5); ping.Start(); }); sse.KeepAlive(); return sse.Close(); } 在上面的代码中，每隔 5 秒，将向客户端发送一条新的 ping 消息。这将保持 TCP 连接活动，并防止由于空闲而关闭连接。此外，当消息发送失败时，连接会自动关闭，释放连接使用的资源。 查询连接 您可以使用连接标识符上的谓词来搜索活动连接，例如广播。 HttpRequestEventSource[] evs = server.EventSources.Find(es => es.StartsWith(\"my-connection-\")); foreach (HttpRequestEventSource e in evs) { e.Send(\"Broadcasting to all event sources that starts with 'my-connection-'\"); } 您还可以使用 All 方法获取所有活动 SSE 连接。"
  },
  "docs/cn/features/websockets.html": {
    "href": "docs/cn/features/websockets.html",
    "title": "| Sisk Framework",
    "keywords": "WebSockets Sisk也支持WebSockets，例如接收和发送消息到客户端。 此功能在大多数浏览器中都能正常工作，但在Sisk中仍处于实验阶段。如果您发现任何错误，请在github上报告。 异步接收和发送消息 以下示例演示了WebSocket在实践中的工作方式，并以打开连接、接收消息并将其显示在控制台为例。 WebSocket接收到的所有消息都是以字节接收的，因此您需要在接收时对其进行解码。 默认情况下，消息被分割成块，最后一部分作为消息的最终数据包发送。您可以使用WebSocketBufferSize标志配置数据包大小。此缓冲区对于发送和接收消息都是相同的。 static ListeningHost BuildLhA() { Router r = new Router(); r += new Route(RouteMethod.Get, \"/\", (req) => { var ws = req.GetWebSocket(); ws.OnReceive += (sender, msg) => { string msgText = Encoding.UTF8.GetString(msg.MessageBytes); Console.WriteLine(\"Received message: \" + msgText); // 获取接收消息的HttpWebSocket上下文 HttpWebSocket senderWebSocket = (HttpWebSocket)sender!; senderWebSocket.Send(\"Response!\"); }; ws.WaitForClose(); return ws.Close(); }); return new ListeningHost(\"localhost\", 5551, r); } 同步接收和发送消息 以下示例包含一种使用同步WebSocket的方法，无需异步上下文，您可以接收消息、处理它们并完成使用套接字。 static ListeningHost BuildLhA() { Router r = new Router(); r += new Route(RouteMethod.Get, \"/connect\", (req) => { var ws = req.GetWebSocket(); WebSocketMessage? msg; askName: ws.Send(\"What is your name?\"); msg = ws.WaitNext(); string? name = msg?.GetString(); if (string.IsNullOrEmpty(name)) { ws.Send(\"Please, insert your name!\"); goto askName; } askAge: ws.Send(\"And your age?\"); msg = ws.WaitNext(); if (!Int32.TryParse(msg?.GetString(), out int age)) { ws.Send(\"Please, insert an valid number\"); goto askAge; } ws.Send($\"You're {name}, and you are {age} old.\"); return ws.Close(); }); return new ListeningHost(\"localhost\", 5551, r); } 发送消息 Send方法有三个重载，允许您发送文本、字节数组或字节跨度。如果服务器的WebSocketBufferSize标志大于总有效负载大小，则它们都会被分块。 static ListeningHost BuildLhA() { Router r = new Router(); r += new Route(RouteMethod.Get, \"/\", (req) => { var ws = req.GetWebSocket(); byte[] myByteArrayContent = ...; ws.Send(\"Hello, world\"); // 将被编码为UTF-8字节数组 ws.Send(myByteArrayContent); return ws.Close(); }); return new ListeningHost(\"localhost\", 5551, r); } 等待WebSocket关闭 WaitForClose()方法阻止当前调用堆栈，直到连接由客户端或服务器终止。 通过此方法，请求的回调执行将阻塞，直到客户端或服务器断开连接。 您也可以使用Close()方法手动关闭连接。此方法返回一个空的HttpResponse对象，该对象不会发送到客户端，但作为接收HTTP请求的函数的返回值。 static ListeningHost BuildLhA() { Router r = new Router(); r += new Route(RouteMethod.Get, \"/\", (req) => { var ws = req.GetWebSocket(); // 等待客户端关闭连接 ws.WaitForClose(); // 等待60秒内没有消息交换，或者某个方关闭连接 ws.WaitForClose(TimeSpan.FromSeconds(60)); return ws.Close(); }); return new ListeningHost(\"localhost\", 5551, r); } Ping策略 类似于Server Side Events中的Ping策略，您还可以配置Ping策略来保持TCP连接处于活动状态，即使没有活动。 ws.WithPing(ping => { ping.DataMessage = \"ping-message\"; ping.Interval = TimeSpan.FromSeconds(5); ping.Start(); });"
  },
  "docs/cn/fundamentals/request-handlers.html": {
    "href": "docs/cn/fundamentals/request-handlers.html",
    "title": "| Sisk Framework",
    "keywords": "请求处理程序，也称为“中间件”，是在路由执行请求之前或之后运行的函数。它们可以按路由或按路由器定义。 存在两种类型的请求处理程序： BeforeResponse: 定义请求处理程序将在调用路由器操作之前执行。 AfterResponse: 定义请求处理程序将在调用路由器操作之后执行。在此上下文中发送 HTTP 响应将覆盖路由器的操作响应。 两个请求处理程序都可以覆盖实际路由器回调函数的响应。顺便说一句，请求处理程序可用于验证请求，例如身份验证、内容或任何其他信息，例如存储信息、日志或可以在响应之前或之后执行的其他步骤。 这样，请求处理程序可以中断所有此执行并返回响应，从而在完成循环之前丢弃其他所有内容。 示例：假设用户身份验证请求处理程序未对其进行身份验证。它将阻止请求生命周期继续，并挂起。如果这发生在第二个请求处理程序中，则不会评估第三个及以后的请求处理程序。 创建请求处理程序 要创建请求处理程序，我们可以创建一个继承 IRequestHandler 接口的类，采用以下格式： public class AuthenticateUserRequestHandler : IRequestHandler { public RequestHandlerExecutionMode ExecutionMode { get; init; } = RequestHandlerExecutionMode.BeforeResponse; public HttpResponse? Execute(HttpRequest request, HttpContext context) { if (request.Headers.Authorization != null) { // 返回 null 表示请求周期可以继续 return null; } else { // 返回 HttpResponse 对象表示此响应将覆盖相邻响应。 return new HttpResponse(System.Net.HttpStatusCode.Unauthorized); } } } 在上面的示例中，我们指示如果请求中包含 Authorization 标头，则应继续执行，并调用下一个请求处理程序或路由器回调，无论哪个先到。如果请求处理程序在响应之后执行，并且其 ExecutionMode 属性返回非空值，它将覆盖路由器的响应。 每当请求处理程序返回 null 时，它都表示请求必须继续，必须调用下一个对象或以路由器响应结束周期。 将请求处理程序与单个路由关联 您可以为路由定义一个或多个请求处理程序。 mainRouter.SetRoute(RouteMethod.Get, \"/\", IndexPage, \"\", new IRequestHandler[] { new AuthenticateUserRequestHandler(), // before request handler new ValidateJsonContentRequestHandler(), // before request handler // -- method IndexPage will be executed here new WriteToLogRequestHandler() // after request handler }); 或者创建 Route 对象： Route indexRoute = new Route(RouteMethod.Get, \"/\", \"\", IndexPage, null); indexRoute.RequestHandlers = new IRequestHandler[] { new AuthenticateUserRequestHandler() }; mainRouter.SetRoute(indexRoute); 将请求处理程序与路由器关联 您可以定义一个全局请求处理程序，它将在路由器上的所有路由上运行。 mainRouter.GlobalRequestHandlers = new IRequestHandler[] { new AuthenticateUserRequestHandler() }; 将请求处理程序与属性关联 您可以在方法属性以及路由属性中定义请求处理程序。 public class MyController { [RouteGet(\"/\")] [RequestHandler<AuthenticateUserRequestHandler>] static HttpResponse Index(HttpRequest request) { return new HttpResponse() .WithContent(new StringContent(\"Hello world!\")); } } 请注意，必须传递所需的请求处理程序类型，而不是对象实例。这样，路由器解析器将实例化请求处理程序。您可以通过 ConstructorArguments 属性使用构造函数参数将参数传递给类。 示例： [RequestHandler<AuthenticateUserRequestHandler>(\"arg1\", 123, ...)] static HttpResponse Index(HttpRequest request) { HttpResponse res = new HttpResponse(); res.Content = new StringContent(\"Hello world!\"); return res; } 您还可以创建自己的属性，该属性实现 RequestHandler： public class AuthenticateAttribute : RequestHandlerAttribute { public AuthenticateAttribute() : base(typeof(AuthenticateUserRequestHandler), ConstructorArguments = new object?[] { \"arg1\", 123, ... }) { ; } } 并使用它： [Authenticate] static HttpResponse Index(HttpRequest request) { HttpResponse res = new HttpResponse(); res.Content = new StringContent(\"Hello world!\"); return res; } 跳过全局请求处理程序 在路由上定义全局请求处理程序后，您可以忽略特定路由上的此请求处理程序。 var myRequestHandler = new AuthenticateUserRequestHandler(); mainRouter.GlobalRequestHandlers = new IRequestHandler[] { myRequestHandler }; mainRouter.SetRoute(new Route(RouteMethod.Get, \"/\", \"My route\", IndexPage, null) { BypassGlobalRequestHandlers = new IRequestHandler[] { myRequestHandler, // ok: 与全局请求处理程序中实例化的相同引用 new AuthenticateUserRequestHandler() // wrong: 不会跳过全局请求处理程序 } }); Note 如果您要跳过请求处理程序，则必须使用与在全局请求处理程序中实例化的相同引用。创建另一个请求处理程序实例将不会跳过全局请求处理程序，因为其引用将发生变化。请务必在 GlobalRequestHandlers 和 BypassGlobalRequestHandlers 中使用相同的请求处理程序引用。"
  },
  "docs/cn/fundamentals/requests.html": {
    "href": "docs/cn/fundamentals/requests.html",
    "title": "| Sisk Framework",
    "keywords": "请求是表示 HTTP 请求消息的结构。 HttpRequest 对象包含用于在整个应用程序中处理 HTTP 消息的有用函数。 HTTP 请求由方法、路径、版本、标头和正文组成。 在本文档中，我们将教您如何获取这些元素的每个部分。 获取请求方法 要获取接收到的请求的方法，可以使用 Method 属性： static HttpResponse Index(HttpRequest request) { HttpMethod requestMethod = request.Method; ... } 此属性返回请求的方法，由 HttpMethod 对象表示。 Note 与路由方法不同，此属性不包含 RouteMethod.Any 项。而是返回实际的请求方法。 获取请求 URL 组件 您可以通过请求的某些属性获取 URL 的各种组件。 以下是一个示例 URL： http://localhost:5000/user/login?email=foo@bar.com 组件名称 描述 组件值 Path 获取请求路径。 /user/login FullPath 获取请求路径和查询字符串。 /user/login?email=foo@bar.com FullUrl 获取整个请求 URL 字符串。 http://localhost:5000/user/login?email=foo@bar.com Host 获取请求主机。 localhost Authority 获取请求主机和端口。 localhost:5000 QueryString 获取请求查询。 ?email=foo@bar.com Query 获取请求查询作为命名值集合。 {StringValueCollection 对象} IsSecure 确定请求是否使用 SSL（true）或不使用 SSL（false）。 false 您还可以使用 HttpRequest.Uri 属性，该属性包含上述所有内容在一个对象中。 获取请求正文 某些请求包含正文，例如表单、文件或 API 事务。您可以从属性获取请求的正文： // 获取请求正文作为字符串，使用请求编码作为编码器 string body = request.Body; // 或以字节数组获取 byte[] bodyBytes = request.RawBody; // 或流式传输它 Stream requestStream = request.GetRequestStream(); 还可以确定请求中是否存在正文以及是否已加载正文，使用 HasContents 和 IsContentAvailable 属性。 通过 GetRequestStream 读取请求内容一次以上是不可能的。如果使用此方法读取，则 RawBody 和 Body 中的值也将不可用。在请求上下文中，无需处理请求流，因为它将在 HTTP 会话结束时自动处理。此外，您可以使用 HttpRequest.RequestEncoding 属性获取最佳编码，以手动解码请求。 服务器对读取请求内容有限制，这适用于 HttpRequest.Body 和 HttpRequest.RawBody。这些属性将整个输入流复制到与 HttpRequest.ContentLength 相同大小的本地缓冲区中。 如果发送的内容大于 HttpServerConfiguration.MaximumContentLength 中定义的用户配置，则服务器会向客户端返回状态 413 Content Too Large 的响应。此外，如果未配置限制或限制太大，则服务器将在内容发送到客户端超过 Int32.MaxValue（2 GB）时抛出 OutOfMemoryException。您可以通过流式传输来处理内容。 Note Sisk 遵循 RFC 9110 \"HTTP Semantics\"，它不允许某些请求方法具有正文。这些请求将立即返回 400 (Bad Request) 以及 ContentServedOnIllegalMethod 状态。GET、OPTIONS、HEAD 和 TRACE 方法不允许使用请求正文。您可以在这里阅读 RFC 9910。 您可以通过将 ThrowContentOnNonSemanticMethods 设为 false 来禁用此功能。 获取请求上下文 HTTP 上下文是 Sisk 的一个专用对象，用于存储 HTTP 服务器、路由、路由器和请求处理程序信息。您可以使用它来组织在组织这些对象的环境中难以组织的代码。 RequestBag 对象包含从一个请求处理程序传递到另一个点存储的信息，并且可以在最终目的地被消费。此对象也可以由在路由回调之后运行的请求处理程序使用。 Tip 此属性也可以通过 HttpRequest.Bag 属性访问。 public class AuthenticateUserRequestHandler : IRequestHandler { public string Identifier { get; init; } = Guid.NewGuid().ToString(); public RequestHandlerExecutionMode ExecutionMode { get; init; } = RequestHandlerExecutionMode.BeforeResponse; public HttpResponse? Execute(HttpRequest request, HttpContext context) { if (request.Headers[\"Authorization\"] != null) { context.RequestBag.Add(\"AuthenticatedUser\", \"Bob\"); return null; } else { return new HttpResponse(System.Net.HttpStatusCode.Unauthorized); } } } 上面的请求处理程序将定义 AuthenticatedUser 在请求袋中，并在最终回调中可以被消费： public class MyController { [Route(RouteMethod.Get, \"/\") [RequestHandler(typeof(AuthenticateUserRequestHandler)) static HttpResponse Index(HttpRequest request) { var user = request.Context.RequestBag[\"AuthenticatedUser\"]; res.Content = new StringContent($\"Hello, {user}!\"); return res; } } 您还可以使用 Bag.Set() 和 Bag.Get() 助手方法来获取或设置类型为 object 的对象。 public class Authenticate : RequestHandler { public override HttpResponse? Execute(HttpRequest request, HttpContext context) { request.Bag.Set<User>(authUser); } } [RouteGet(\"/\")] [RequestHandler<Authenticate> public static HttpResponse Test(HttpRequest request) { var user = request.Bag.Get<User>(); } 获取表单数据 您可以使用 NameValueCollection 获取表单数据。 static HttpResponse Index(HttpRequest request) { var form = request.GetFormContent(); string? username = form[\"username\"]; string? password = form[\"password\"]; if (AttempLogin(username, password) == true) { ... } } 获取多部分表单数据 Sisk 的 HTTP 请求允许您获取上传的 multipart 内容，例如文件、表单字段或任何二进制内容。 static HttpResponse Index(HttpRequest request) { var multipartFormDataObjects = request.GetMultipartFormContent(); foreach (MultipartObject uploadedObject in multipartFormDataObjects) { // 文件名由 Multipart form data 提供的名称。 // Null 是返回的 object 如果不是文件。 Console.WriteLine(\"File name : \" + uploadedObject.Filename); // Multipart form data Console.WriteLine(\"Field name : \" + uploadedObject.Name); // Multipart form data 内容长度。 Console.WriteLine(\"Content length : \" + uploadedObject.ContentLength); // 根据文件头来确定图像格式。如果内容不是一个已知的常见文件格式。 Console.WriteLine(\"Common format : \" + uploadedObject.GetCommonFileFormat()); } } You can read more about Sisk Multipart form objects and its methods, properties and functionalities. Server-sent events support Sisk supports [Server-sent events](https://developer.mozilla. Calling the HttpRequest.GetEventSource method will put the HttpRequest in its listener state. From this, the context of this HTTP request will not expect an HttpResponse as it will overlap the packets sent by server side events. After sending all packets, the callback must return the Close method, which will send the final response to the server and indicate that the streaming has ended. It is not possible to predict the total length of all packets that will be sent, so it is not possible to determine the end of the connection with `Content-Length header. By default, most browsers restart streams if the EventSource.close method is not called on the client side after receiving all the packets, causing infinite additional processing on the server side. To avoid this kind of problem, it's common to send a final packet indicating that the event source has finished sending all packets. The example below shows how the browser can communicate with the server that supports Server-side events. <html> <b>Fruits:</b> <ul> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li> <li>"
  },
  "docs/cn/fundamentals/responses.html": {
    "href": "docs/cn/fundamentals/responses.html",
    "title": "| Sisk Framework",
    "keywords": "响应表示 HTTP 请求的 HTTP 响应。它们由服务器发送给客户端，作为请求资源、页面、文档、文件或其他对象的指示。 HTTP 响应由状态、标头和内容组成。 在本文件中，我们将教您如何使用 Sisk 架构 HTTP 响应。 设置 HTTP 状态 HTTP 状态列表自 HTTP/1.0 以来一直相同，Sisk 支持所有状态。 HttpResponse res = new HttpResponse(); res.Status = System.Net.HttpStatusCode.Accepted; // 202 或者使用流畅语法： new HttpResponse() .WithStatus(200) // 或者 .WithStatus(HttpStatusCode.Ok) // 或者 .WithStatus(HttpStatusInformation.Ok); 您可以查看 此处 获取所有可用 HttpStatusCode 的完整列表。您还可以使用 HttpStatusInformation 结构提供您自己的状态代码。 内容和 content-type Sisk 支持使用本机 .NET 内容对象发送响应中的内容。您可以使用 StringContent 类发送 JSON 响应，例如： HttpResponse res = new HttpResponse(); res.Content = new StringContent(myJson, Encoding.UTF8, \"application/json\"); 服务器将始终尝试从您在内容中定义的内容中计算 Content-Length，如果您没有在标头中明确定义它。如果服务器无法从响应内容中隐式获取 Content-Length 标头，则响应将使用 Chunked-Encoding 发送。 您还可以通过发送 StreamContent 或使用 GetResponseStream 方法来流式传输响应。 响应标头 您可以添加、编辑或删除发送到响应中的标头。以下示例演示如何向客户端发送重定向响应： HttpResponse res = new HttpResponse(); res.Status = HttpStatusCode.Moved; res.Headers.Add(HttpKnownHeaderNames.Location, \"/login\"); 或者使用流畅语法： new HttpResponse(301) .WithHeader(\"Location\", \"/login\"); 当您使用 HttpHeaderCollection 的 Add 方法时，您是在向请求添加标头，而不会更改已经发送的标头。Set 方法用指示的值替换具有相同名称的标头。HttpHeaderCollection 的索引器内部调用 Set 方法来替换标头。 发送 cookie Sisk 提供了方便定义客户端 cookie 的方法。通过此方法设置的 cookie 已经进行了 URL 编码，符合 RFC-6265 标准。 HttpResponse res = new HttpResponse(); res.SetCookie(\"cookie-name\", \"cookie-value\"); 或者使用流畅语法： new HttpResponse(301) .WithCookie(\"cookie-name\", \"cookie-value\", expiresAt: DateTime.Now.Add(TimeSpan.FromDays(7))); 还有其他 更完整的版本 。 分块响应 您可以设置传输编码为分块以发送大型响应。 HttpResponse res = new HttpResponse(); res.SendChunked = true; 使用分块编码时，Content-Length 标头会自动省略。 响应流 响应流是一种受管理的方式，允许您分段发送响应。它比使用 HttpResponse 对象更低级操作，因为它们要求您手动发送标头和内容，然后关闭连接。 此示例打开文件的只读流，将流复制到响应输出流，并且不会将整个文件加载到内存中。这对于服务中等或大型文件很有用。 // 获取响应输出流 using var fileStream = File.OpenRead(\"my-big-file.zip\"); var responseStream = request.GetResponseStream(); // 设置响应编码为使用分块编码 // 同样，您不应该在使用分块编码时发送 content-length 标头 responseStream.SendChunked = true; responseStream.SetStatus(200); responseStream.SetHeader(HttpKnownHeaderNames.ContentType, contentType); // 将文件流复制到响应输出流 fileStream.CopyTo(responseStream.ResponseStream); // 关闭流 return responseStream.Close(); GZip、Deflate 和 Brotli 压缩 您可以使用 Sisk 压缩 HTTP 内容来发送带有压缩内容的响应。首先，将您的 HttpContent 对象封装到以下压缩器之一中，以将压缩响应发送到客户端。 router.MapGet(\"/hello.html\", request => { string myHtml = \"...\"; return new HttpResponse () { Content = new GZipContent(new HtmlContent(myHtml)), // 或者 Content = new BrotliContent(new HtmlContent(myHtml)), // 或者 Content = new DeflateContent(new HtmlContent(myHtml)), }; }); 您也可以使用这些压缩内容与流一起使用。 router.MapGet(\"/archive.zip\", request => { // 不要在此处使用 \"using\"。HttpServer 会在发送响应后丢弃您的内容。 var archive = File.OpenRead(\"/path/to/big-file.zip\"); return new HttpResponse () { Content = new GZipContent(archive) } }); 使用这些内容会自动设置 Content-Encoding 标头。 隐式响应类型 从 0.15 版本开始，您可以使用 HttpResponse 以外的其他返回类型，但必须配置路由器如何处理每个类型的对象。 该概念始终返回引用类型并将其转换为有效的 HttpResponse 对象。返回 HttpResponse 的路由不会进行任何转换。 值类型（结构）不能用作返回类型，因为它们与 RouterCallback 不兼容，因此必须将其包装在 ValueResult 中才能在处理程序中使用。 考虑来自不使用 HttpResponse 的路由模块的以下示例： [RoutePrefix(\"/users\")] public class UsersController : RouterModule { public List<User> Users = new List<User>(); [RouteGet] public IEnumerable<User> Index(HttpRequest request) { return Users.ToArray(); } [RouteGet(\"<id>\")] public User View(HttpRequest request) { int id = request.Query[\"id\"].GetInteger(); User dUser = Users.First(u => u.Id == id); return dUser; } [RoutePost] public ValueResult<bool> Create(HttpRequest request) { User fromBody = JsonSerializer.Deserialize<User>(request.Body)!; Users.Add(fromBody); return true; } } 因此，现在需要在路由器中定义如何处理每个类型的对象。对象始终是处理程序的第一个参数，并且输出类型必须是有效的 HttpResponse。此外，路由输出对象的输出对象永远不能为 null。 对于 ValueResult 类型，无需指示输入对象是 ValueResult，只需 T，因为 ValueResult 是其原始组件的对象反射。 类型关联不比较注册类型与路由器结果类型。相反，它检查路由器结果类型是否可分配给注册类型。 注册类型为 Object 的处理程序将作为回退用于所有先前未验证的类型。值处理程序的插入顺序也至关重要，因此注册 Object 处理程序将忽略所有其他特定于类型的处理程序。始终先注册特定值处理程序以确保顺序。 Router r = new Router(); r.SetObject(new UsersController()); r.RegisterValueHandler<bool>(bolVal => { HttpResponse res = new HttpResponse(); res.Status = (bool)bolVal ? HttpStatusCode.OK : HttpStatusCode.BadRequest; return res; }); r.RegisterValueHandler<IEnumerable>(enumerableValue => { return new HttpResponse(); // 在这里执行一些操作 }); // 注册 Object 类型的值处理程序必须是最后一个 // 值处理程序，它将用作回退 r.RegisterValueHandler<object>(fallback => { HttpResponse res = new HttpResponse(); res.Status = HttpStatusCode.OK; res.Content = JsonContent.Create(fallback); return res; });"
  },
  "docs/cn/fundamentals/routing.html": {
    "href": "docs/cn/fundamentals/routing.html",
    "title": "| Sisk Framework",
    "keywords": "路由是构建服务器的第一步。它负责容纳路由对象（/api/Sisk.Core.Routing.Route），这些对象是将 URL 和其方法映射到服务器执行的操作的端点。每个操作负责接收请求并向客户端发送响应。 路由是路径表达式（“路径模式”）和它们可以侦听的 HTTP 方法的组合。当向服务器发出请求时，它将尝试找到与接收到的请求匹配的路由，然后它将调用该路由的操作并向客户端发送生成的响应。 在 Sisk 中有多种定义路由的方式：它们可以是静态的、动态的或自动扫描的，由属性定义，也可以直接在路由对象中定义。 Router mainRouter = new Router(); // 将 GET / 路由映射到以下操作 mainRouter.MapGet(\"/\", request => { return new HttpResponse(\"Hello, world!\"); }); 要了解路由的功能，我们需要了解请求的功能。HttpRequest（/api/Sisk.Core.Http.HttpRequest）将包含您需要的所有信息。Sisk 还包含一些加速整体开发的额外功能。 对于服务器接收到的每个操作，将调用类型为 RouteAction（/api/Sisk.Core.Routing.RouteAction）的委托。此委托包含一个参数，其中包含一个 HttpRequest（/api/Sisk.Core.Http.HttpRequest），其中包含有关服务器接收到的请求的所有必要信息。此委托的结果必须是 HttpResponse（/api/Sisk.Core.Http.HttpResponse）或通过隐式响应类型（/docs/fundamentals/responses#implicit-response-types）映射到它的对象。 匹配路由 当 HTTP 服务器收到请求时，Sisk 会搜索满足接收到的请求路径表达式的路由。表达式始终在路由和请求路径之间进行测试，而不考虑查询字符串。 此测试没有优先级，并且仅限于单个路由。当没有路由与该请求匹配时，将向客户端返回 Router.NotFoundErrorHandler（/api/Sisk.Core.Routing.Router.NotFoundErrorHandler）响应。当路径模式匹配，但 HTTP 方法不匹配时，将向客户端发送 Router.MethodNotAllowedErrorHandler（/api/Sisk.Core.Routing.Router.MethodNotAllowedErrorHandler）响应。 Sisk 检查路由冲突的可能性以避免这些问题。在定义路由时，Sisk 将查找可能与正在定义的路由发生冲突的可能路由。此测试包括检查路径和路由设置接受的方法。 使用路径模式创建路由 您可以使用各种 SetRoute 方法定义路由。 // SetRoute 方式 mainRouter.SetRoute(RouteMethod.Get, \"/hey/<name>\", (request) => { string name = request.RouteParameters[\"name\"].GetString(); return new HttpResponse($\"Hello, {name}\"); }); // Map* 方式 mainRouter.MapGet(\"/form\", (request) => { var formData = request.GetFormData(); return new HttpResponse(); // 空 200 ok }); // Route.* 助手方法 mainRouter += Route.Get(\"/image.png\", (request) => { var imageStream = File.OpenRead(\"image.png\"); return new HttpResponse() { // streamContent 内的 Stream // 在发送响应后会释放 Content = new StreamContent(imageStream) }; }); // 多个参数 mainRouter.MapGet(\"/hey/<name>/surname/<surname>\", (request) => { string name = request.RouteParameters[\"name\"].GetString(); string surname = request.RouteParameters[\"surname\"].GetString(); return new HttpResponse($\"Hello, {name} {surname}!\"); }); HttpRequest（/api/Sisk.Core.Http.HttpRequest）的 RouteParameters 属性包含有关接收到的请求路径变量的所有信息。 在执行路径模式测试之前，服务器接收到的所有路径都将被标准化，遵循以下规则： 从路径中删除所有空段，例如： ////foo//bar 变为 /foo/bar。 路径匹配是 区分大小写的，除非 Router.MatchRoutesIgnoreCase（/api/Sisk.Core.Routing.Router.MatchRoutesIgnoreCase）设置为 true。 HttpRequest（/api/Sisk.Core.Http.HttpRequest）的 Query 和 RouteParameters 属性返回一个 StringValueCollection（/api/Sisk.Core.Entity.StringValueCollection）对象，其中每个索引属性返回一个非空 StringValue（/api/Sisk.Core.Entity.StringValue），可以将其用作选项/单态来将其原始值转换为托管对象。 以下示例读取路由参数“id”，并从中获取一个 Guid。如果参数不是有效的 Guid，则会抛出异常，并且如果服务器未处理 Router.CallbackErrorHandler（/api/Sisk.Core.Routing.Router.CallbackErrorHandler），则向客户端返回 500 错误。 mainRouter.SetRoute(RouteMethod.Get, \"/user/<id>\", (request) => { Guid id = request.RouteParameters[\"id\"].GetGuid(); }); Note 路径在请求和路由路径中都忽略了尾随 /，也就是说，如果您尝试访问定义为 /index/page 的路由，您也可以使用 /index/page/ 访问。 您还可以强制 URL 以 / 结尾，方法是启用 ForceTrailingSlash 标志。 使用类实例创建路由 您还可以使用反射动态定义路由，并使用带有 RouteAttribute（/api/Sisk.Core.Routing.RouteAttribute）属性的类实例。这样，其方法实现此属性的类实例的路由将定义在目标路由器中。 对于方法要被定义为路由，它必须标记为 RouteAttribute（/api/Sisk.Core.Routing.RouteAttribute），例如属性本身或 RouteGetAttribute（/api/Sisk.Core.Routing.RouteGetAttribute）。该方法可以是静态的、实例的、公共的或私有的。当使用 SetObject(type) 或 SetObject<TType>() 方法时，将忽略实例方法。 public class MyController { // 将匹配 GET / [RouteGet] HttpResponse Index(HttpRequest request) { HttpResponse res = new HttpResponse(); res.Content = new StringContent(\"Index!\"); return res; } // 静态方法也行 [RouteGet(\"/hello\")] static HttpResponse Hello(HttpRequest request) { HttpResponse res = new HttpResponse(); res.Content = new StringContent(\"Hello world!\"); return res; } } 以下行将定义 MyController 中的 Index 和 Hello 方法作为路由，因为这两个方法都标记为路由，并且已经提供了类的实例，而不是其类型。如果提供了类型而不是实例，则只会定义静态方法。 var myController = new MyController(); mainRouter.SetObject(myController); 从 Sisk 版本 0.16 开始，可以启用 AutoScan，它将搜索实现 RouterModule 的用户定义类，并自动将其与路由器关联。这在 AOT 编译中不受支持。 mainRouter.AutoScanModules<ApiController>(); 上面的指令将搜索实现 ApiController 但不是类型本身的所有类型。两个可选参数指示方法将如何搜索这些类型。第一个参数表示搜索这些类型的程序集，第二个参数表示定义这些类型的方式。 正则表达式路由 您可以使用正则表达式来匹配路由，而不是使用默认的 HTTP 路径匹配方法。 Route indexRoute = new Route(RouteMethod.Get, @\"\\/[a-z]+\\/\", \"My route\", IndexPage, null); indexRoute.UseRegex = true; mainRouter.SetRoute(indexRoute); 也可以使用 RegexRoute（/api/Sisk.Core.Routing.RegexRoute）类： RegexRoute indexRoute = new RegexRoute(RouteMethod.Get, @\"/uploads/(?<filename>.*\\.(jpeg|jpg|png))\", request => { string filename = request.Query[\"filename\"].GetString(); return new HttpResponse().WithContent($\"Acessing file {filename}\"); }); mainRouter.SetRoute(indexRoute); 您还可以将正则表达式模式中的分组捕获到 Request.Query（/api/Sisk.Core.Http.HttpRequest.Query）内容中： 任何方法路由 您可以定义一个路由，使其仅匹配其路径，并跳过 HTTP 方法。这对于在路由回调中进行方法验证可能很有用。 // 将匹配任何 HTTP 方法的 / 路由 mainRouter.SetRoute(RouteMethod.Any, \"/\", callbackFunction); 任何路径路由 任何路径路由测试接收到的所有请求，subject to the route method being tested. If the route method is RouteMethod.Any and the route uses Route.AnyPath in its path expression, this route will listen to all requests from the HTTP server, and no other routes can be defined. // the following route will match all POST requests mainRouter.SetRoute(RouteMethod.Post, Route.AnyPath, callbackFunction); 忽略大小写路由匹配 默认情况下，路由与请求的解释是区分大小写的。要使其忽略大小写，请启用此选项： mainRouter.MatchRoutesIgnoreCase = true; 这也会为路由启用 RegexOptions.IgnoreCase 选项。 未找到 (404) 回调处理程序 您可以创建自定义回调，用于处理请求不匹配任何已知路由的情况。 mainRouter.NotFoundErrorHandler = () => { return new HttpResponse(404) { // Content = new HtmlContent(\"<h1>Not found</h1>\") // older versions Content = new StringContent(\"<h1>Not found</h1>\", Encoding.UTF8, \"text/html\") }; }; 方法不允许 (405) 回调处理程序 您还可以创建自定义回调，用于处理请求匹配其路径，但方法不匹配的情况。 mainRouter.MethodNotAllowedErrorHandler = (context) => { return new HttpResponse(405) { Content = new StringContent($\"Method not allowed for this route.\"); }; 内部错误处理程序 路由回调在服务器执行期间可能会抛出错误。如果未正确处理，则可能会导致服务器整体功能中断。路由器有一个回调，用于处理路由回调失败，并防止服务中断。 此方法仅在 ThrowExceptions 设置为 false 时才可访问。 mainRouter.CallbackErrorHandler = (ex, context) => { return new HttpResponse(500) { Content = new StringContent($\"Error: {ex.Message}\"); }; ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs"
  },
  "docs/cn/getting-started.html": {
    "href": "docs/cn/getting-started.html",
    "title": "| Sisk Framework",
    "keywords": "Sisk 入门指南 Sisk 可以运行在任何 .NET 环境中。在本指南中，我们将教您如何使用 .NET 创建一个 Sisk 应用程序。如果您还没有安装，请从 这里 下载 SDK。 在本教程中，我们将介绍如何创建项目结构、接收请求、获取 URL 参数以及发送响应。本指南将重点介绍使用 C# 构建一个简单的服务器。您也可以使用您喜欢的编程语言。 Note 您可能对快速入门项目感兴趣。有关更多信息，请查看 这个存储库。 创建项目 让我们将我们的项目命名为“我的 Sisk 应用程序”。在您设置好 .NET 后，可以使用以下命令创建项目： dotnet new console -n my-sisk-application 接下来，导航到您的项目目录，并使用 .NET 实用工具安装 Sisk： cd my-sisk-application dotnet add package Sisk.HttpServer 您可以在 这里 找到有关在项目中安装 Sisk 的其他方法。 现在，让我们创建一个 HTTP 服务器实例。在本例中，我们将配置它在端口 5000 上侦听。 构建 HTTP 服务器 Sisk 允许您逐步手动构建应用程序，因为它会路由到 HttpServer 对象。但是，对于大多数项目来说，这可能不太方便。因此，我们可以使用构建器方法，这使得启动应用程序变得更加容易。 class Program { static async Task Main(string[] args) { using var app = HttpServer.CreateBuilder() .UseListeningPort(\"http://localhost:5000/\") .Build(); app.Router.MapGet(\"/\", request => { return new HttpResponse() { Status = 200, Content = new StringContent(\"Hello, world!\") }; }); await app.StartAsync(); } } 了解 Sisk 的每个重要组件非常重要。在本文档的后面部分，您将学习有关 Sisk 如何工作的更多信息。 手动（高级）设置 您可以在文档的 这个部分 中了解每个 Sisk 机制的工作原理，该部分解释了 HttpServer、Router、ListeningPort 以及其他组件的行为和关系。"
  },
  "docs/cn/installing.html": {
    "href": "docs/cn/installing.html",
    "title": "安装 | Sisk Framework",
    "keywords": "安装 您可以通过 Nuget、dotnet cli 或 其他选项 安装 Sisk。您可以通过在开发人员控制台中运行以下命令轻松设置您的 Sisk 环境： Warning 最新版本的 Sisk 与 .NET 8 和即将到来的 .NET 9 兼容。Sisk 的旧版本（用于 .NET 6 和 .NET 7）将在 2024 年 11 月 30 日之前继续维护，仅在“旧版”分支下接收安全补丁和修复程序。请将使用 Sisk 的项目更新到 .NET 8。 dotnet add package Sisk.HttpServer 此命令将在您的项目中安装最新版本的 Sisk。"
  },
  "docs/cn/native-aot.html": {
    "href": "docs/cn/native-aot.html",
    "title": "| Sisk Framework",
    "keywords": ".NET 7 引入了 Native AOT，这是一种 .NET 编译模式，允许您在任何受支持的平台上导出已就绪的二进制文件，而无需在目标机器上安装 .NET 运行时。 使用 Native AOT，您的代码将被编译为本地代码，并且已经包含了执行所需的一切。Sisk 自 0.9.1 版本开始就一直在尝试此功能，它通过定义应用程序动态路由的功能来改进对 Native AOT 的支持，而不会影响编译过程并发出警告消息。 Sisk 使用反射来获取将从类型和对象定义的方法。此外，Sisk 还使用反射来初始化诸如 RequestHandlerAttribute 等属性，这些属性是从类型初始化的。为了正常工作，AOT 编译使用修剪，其中应该指定动态类型将在最终程序集中使用哪些。 考虑以下示例，这是一个调用 RequestHandler 的路由。 [Route(RouteMethod.Get, \"/\", LogMode = LogOutput.None)] [RequestHandler(typeof(MyRequestHandler)) ] static HttpResponse IndexPage(HttpRequest request) { HttpResponse htmlResponse = new HttpResponse(); htmlResponse.Content = new StringContent(\"Hello, world!\", System.Text.Encoding.UTF8, \"text/plain\"); return htmlResponse; } 此 RequestHandler 在运行时动态调用，并且此调用必须被分割，并且此分割必须是显式的。 为了更好地理解编译器将从 MyRequestHandler 中考虑哪些内容应该保留在最终编译中： 公共属性； 公共和私有字段； 公共和私有构造函数； 公共和私有方法； 编译器将删除您在 RequestHandler 中未提及的所有内容。 请记住，您在应用程序中使用的所有其他组件、类和程序包都应与 AOT 修剪兼容，否则您的代码将无法按预期工作。顺便说一句，如果想要构建性能至关重要的项目，Sisk 不会让您失望。 您可以在官方 Microsoft 文档 中阅读有关 Native AOT 及其工作方式的更多信息。"
  },
  "docs/cn/registering-namespace.html": {
    "href": "docs/cn/registering-namespace.html",
    "title": "| Sisk Framework",
    "keywords": "Sisk 使用 HttpListener 网络接口，将虚拟主机绑定到系统以侦听请求。 在 Windows 上，此绑定有点限制，只允许 localhost 绑定为有效主机。尝试侦听其他主机时，服务器会抛出拒绝访问错误。本教程解释了如何授予对系统上任何主机侦听的授权。 @echo off :: 在此处插入前缀，不带空格或引号 SET PREFIX= SET DOMAIN=%ComputerName%\\%USERNAME% netsh http add urlacl url=%PREFIX% user=%DOMAIN% pause 其中 PREFIX 是服务器将侦听的前缀 (\"侦听主机->端口\")。它必须使用 URL 方案、主机、端口和结尾的斜杠格式化，例如： SET PREFIX=http://my-application.example.test/ 这样您就可以通过以下方式在应用程序中侦听： class Program { static async Task Main(string[] args) { using var app = HttpServer.CreateBuilder() .UseListeningPort(\"http://my-application.example.test/\") .Build(); app.Router.MapGet(\"/\", request => { return new HttpResponse() { Status = 200, Content = new StringContent(\"Hello, world!\") }; }); await app.StartAsync(); } }"
  },
  "docs/cn/ssl.html": {
    "href": "docs/cn/ssl.html",
    "title": "| Sisk Framework",
    "keywords": "使用 SSL 进行开发在需要安全性的情况下可能很有必要，例如大多数 Web 开发场景。Sisk 运行在 HttpListener 之上，它不支持本机 HTTPS，仅支持 HTTP。但是，有一些解决方法允许您在 Sisk 中使用 SSL。请参阅以下内容： 通过 Windows 上的 IIS 可用平台：Windows 难度：中等 如果您使用的是 Windows，可以使用 IIS 在您的 HTTP 服务器上启用 SSL。为了使此功能正常工作，建议您事先按照 此教程 进行操作，以便您的应用程序能够侦听除“localhost”以外的主机。 为了使此功能正常工作，您必须通过 Windows 功能安装 IIS。IIS 可免费提供给 Windows 和 Windows Server 用户。要配置应用程序中的 SSL，请准备好 SSL 证书，即使它是自签名的。接下来，您可以查看 如何设置 IIS 7 或更高版本上的 SSL。 通过 mitmproxy 可用平台：Linux、macOS、Windows 难度：简单 mitmproxy 是一种拦截代理工具，允许开发人员和安全测试人员检查、修改和记录客户端（例如 Web 浏览器）和服务器之间 的 HTTP 和 HTTPS 流量。您可以使用 mitmdump 实用程序在您的客户端和 Sisk 应用程序之间启动反向 SSL 代理。 首先，在您的计算机上安装 mitmprxy。 启动您的 Sisk 应用程序。在本例中，我们将使用 8000 端口作为不安全的 HTTP 端口。 启动 mitmproxy 服务器以侦听 8001 端口上的安全端口： mitmdump --mode reverse:http://localhost:8000/ -p 8001 现在就可以开始了！您可以通过 https://localhost:8001/ 访问您的应用程序。您的应用程序不需要运行才能启动 mitmdump。 通过 Sisk.SslProxy 包 可用平台：Linux、macOS、Windows 难度：简单 Sisk.SslProxy 包是启用 Sisk 应用程序 SSL 的一种简单方法。但是，它是一个 非常实验性的 包。使用此包可能不稳定，但您可以成为一小部分将有助于使此包可行和稳定的用户。要开始使用，您可以使用以下命令安装 Sisk.SslProxy 包： dotnet add package Sisk.SslProxy Note 您必须在 Visual Studio 包管理器中启用“启用预发布包”才能安装 Sisk.SslProxy。 再次强调，这是一个实验项目，因此请不要考虑将其投入生产环境。 目前，Sisk.SslProxy 可以处理大多数 HTTP/1.1 功能，包括 HTTP Continue、分块编码、WebSockets 和 SSE。有关 SslProxy 的更多信息，请参阅 此处。"
  },
  "docs/deploying.html": {
    "href": "docs/deploying.html",
    "title": "Deploying your Sisk Application | Sisk Framework",
    "keywords": "Deploying your Sisk Application The process of deploying a Sisk application consists of publishing your project into production. Although the process is relatively simple, it is worth noting details that can be lethal to the security and stability of the deployment's infrastructure. Ideally, you should be ready to deploy your application to the cloud, after carrying out all possible tests to have your application ready. Publishing your app Publishing your Sisk application or service is generating binaries ready and optimized for production. In this example, we will compile the binaries for production to run on a machine that has the .NET Runtime installed on the machine. You will need .NET SDK installed in your machine in order to build your app, and .NET Runtime installed on the target server to run your app. You can learn how to install .NET Runtime in your Linux server here, Windows and Mac OS. In the folder where your project is located, open a terminal and use the .NET publish command: dotnet publish -r linux-x64 -c Release This will generate your binaries inside bin/Release/publish/linux-x64. Note If your app is running using Sisk.ServiceProvider package, you should copy your service-config.json into your host server along all binaries generated by dotnet publish. You can leave the file preconfigured, with environment variables, listening ports and hosts, and additional server configurations. The next step is to take these files to the server where your application will be hosted. After that, give execution permissions to your binary file. In this case, let's consider that our project name is \"my-app\": cd /home/htdocs chmod +x my-app ./my-app After running your application, check to see if it produces any error messages. If it didn't produce, it's because your application is running. At this point, it will probably not be possible to access your application by external net ouside your server, as access rules such as Firewall have not been configured. We will consider this in the next steps. You should have the address of the virtual host where your application is listening to. This is set manually in the application, and depends on how you are instantiating your Sisk service. If you're not using the Sisk.ServiceProvider package, you should find it where you defined your HttpServer instance: HttpServer server = HttpServer.Emit(5000, out HttpServerConfiguration config, out var host, out var router); // sisk should listen on http://localhost:5000/ Associating an ListeningHost manually: config.ListeningHosts.Add(new ListeningHost(\"https://localhost:5000/\", router)); Or if you're using the Sisk.ServiceProvider package, in your service-config.json: { \"Server\": { }, \"ListeningHost\": { \"Ports\": [ \"http://localhost:5000/\" ] } } From this, we can create a reverse proxy to listen to your service and make the traffic available over the open network. Proxying your application Proxying your service means not directly exposing your Sisk service to an external network. This practice is very common for server deployments because: Allows you to associate an SSL certificate in your application; Create access rules before accessing the service and avoid overloads; Control bandwidth and request limits; Separate load-balancers for your application; Prevent security damage to failing infrastructure. You can serve your application through a reverse proxy like Nginx or Apache, or you can use an http-over-dns tunnel like Cloudflared. Also, remember to correctly resolve your proxy's forwarding headers to obtain your client's information, such as IP address and host, through forwarding resolvers. The next step after creating your tunnel, firewall configuration and having your application running, is to create a service for your application. Note Using SSL certificates directly in the Sisk service on non-Windows systems is not possible. This is a point of the implementation of HttpListener, which is the central module for how HTTP queue management is done in Sisk, and this implementation varies from operating system to operating system. You can use SSL in your Sisk service if you associate a certificate with the virtual host with IIS. For other systems, using a reverse proxy is highly recommended. Creating an service Creating a service will make your application always available, even after restarting your server instance or a non-recoverable crash. In this simple tutorial, we will use the content from the previous tutorial as a showcase to keep your service always active. Access the folder where the service configuration files are located: cd /etc/systemd/system Create your my-app.service file and include the contents: [Unit] Description=<description about your app> [Service] # set the user which will launch the service on User=<user which will launch the service> # the ExecStart path is not relative to WorkingDirectory. # set it as the full path to the executeable file WorkingDirectory=/home/htdocs ExecStart=/home/htdocs/my-app # set the service to always restart on crash Restart=always RestartSec=3 [Install] WantedBy=multi-user.target Restart your service manager module: sudo systemctl daemon-reload Start your new created service from the name of the file you set and check if they are running: sudo systemctl start my-app sudo systemctl status my-app Now if your app is running (\"Active: active\"), enable your service to keep run after an system reboot: sudo systemctl enable my-app Now you're ready to go and present your Sisk application to everyone."
  },
  "docs/extensions/basic-auth.html": {
    "href": "docs/extensions/basic-auth.html",
    "title": "Basic Auth | Sisk Framework",
    "keywords": "Basic Auth The Basic Auth package adds a request handler capable of handling basic authentication scheme in your Sisk application with very little configuration and effort. Basic HTTP authentication is a minimal input form of authenticating requests by an user id and password, where the session is controlled exclusively by the client and there are no authentication or access tokens. Read more about the Basic authentication scheme in the MDN specification. Installing To get started, install the Sisk.BasicAuth package in your project: > dotnet add package Sisk.BasicAuth You can view more ways to install it in your project in the Nuget repository. Creating your auth handler You can control the authentication scheme for an entire module or for individual routes. For that, let's first write our first basic authentication handler. In the example below, a connection is made to the database, it checks if the user exists and if the password is valid, and after that, stores the user in the context bag. public class UserAuthHandler : BasicAuthenticateRequestHandler { public UserAuthHandler() : base() { Realm = \"To enter this page, please, inform your credentials.\"; } public override HttpResponse? OnValidating(BasicAuthenticationCredentials credentials, HttpContext context) { DbContext db = new DbContext(); // in this case, we're using the email as the user id field, so we're // going to search for an user using their email. User? user = db.Users.FirstOrDefault(u => u.Email == credentials.UserId); if (user == null) { return base.CreateUnauthorizedResponse(\"Sorry! No user was found by this email.\"); } // validates that the credentials password is valid for this user. if (!user.ValidatePassword(credentials.Password)) { return base.CreateUnauthorizedResponse(\"Invalid credentials.\"); } // adds the logged user to the http context // and continues the execution context.Bag.Add(\"loggedUser\", user); return null; } } So, just associate this request handler with our route or class. public class UsersController { [RouteGet(\"/\")] [RequestHandler(typeof(UserAuthHandler))] public string Index(HttpRequest request) { User loggedUser = (User)request.Context.RequestBag[\"loggedUser\"]; return \"Hello, \" + loggedUser.Name + \"!\"; } } Or using RouterModule class: public class UsersController : RouterModule { public ClientModule() { // now all routes inside this class will be handled by // UserAuthHandler. base.HasRequestHandler(new UserAuthHandler()); } [RouteGet(\"/\")] public string Index(HttpRequest request) { User loggedUser = (User)request.Context.RequestBag[\"loggedUser\"]; return \"Hello, \" + loggedUser.Name + \"!\"; } } Remarks The primary responsibility of basic authentication is carried out on the client-side. Storage, cache control, and encryption are all handled locally on the client. The server only receives the credentials and validates whether access is allowed or not. Note that this method is not one of the most secure because it places a significant responsibility on the client, which can be difficult to trace and maintain the security of its credentials. Additionally, it is crucial for passwords to be transmitted in a secure connection context (SSL), as they do not have any inherent encryption. A brief interception in the headers of a request can expose the access credentials of your user. Opt for more robust authentication solutions for applications in production and avoid using too many off-the-shelf components, as they may not adapt to the needs of your project and end up exposing it to security risks."
  },
  "docs/extensions/ini-configuration.html": {
    "href": "docs/extensions/ini-configuration.html",
    "title": "INI configuration provider | Sisk Framework",
    "keywords": "INI configuration provider Sisk has a method for obtaining startup configurations other than JSON. In fact, any pipeline that implements IConfigurationReader can be used with PortableConfigurationBuilder.WithConfigurationPipeline, reading the server configuration from any file type. The Sisk.IniConfiguration package provides a stream-based INI file reader that does not throw exceptions for common syntax errors and has a simple configuration syntax. This package can be used outside the Sisk framework, offering flexibility for projects that require an efficient INI document reader. Installing To install the package, you can start with: $ dotnet add package Sisk.IniConfiguration and use it in your code as shown in the example below: class Program { static HttpServerHostContext Host = null!; static void Main(string[] args) { Host = HttpServer.CreateBuilder() .UsePortableConfiguration(config => { config.WithConfigFile(\"app.ini\", createIfDontExists: true); // adds the IniConfigurationPipeline to the configuration reader config.WithConfigurationPipeline<IniConfigurationPipeline>(); }) .UseRouter(r => { r.MapGet(\"/\", SayHello); }) .Build(); Host.Start(); } static HttpResponse SayHello(HttpRequest request) { string? name = Host.Parameters[\"name\"] ?? \"world\"; return new HttpResponse($\"Hello, {name}!\"); } } The code above will look for an app.ini file in the process's current directory (CurrentDirectory). The INI file looks like this: [Server] # Multiple listen addresses are supported Listen = http://localhost:5552/ Listen = http://localhost:5553/ ThrowExceptions = false AccessLogsStream = console [Cors] AllowMethods = GET, POST AllowHeaders = Content-Type, Authorization AllowOrigin = * [Parameters] Name = \"Kanye West\" INI flavor and syntax Current implementation flavor: Properties and section names are case-insensitive. Properties names and values are trimmed. Values can be quoted with single or double quotes. Quotes can have line-breaks inside them. Comments are supported with # and ;. Also, trailing comments are allowed. Properties can have multiple values. In detail, the documentation for the \"flavor\" of the INI parser used in Sisk is available on GitHub. Using the following ini code as example: One = 1 Value = this is an value Another value = \"this value has an line break on it\" ; the code below has some colors [some section] Color = Red Color = Blue Color = Yellow ; do not use yellow Parse it with: // parse the ini text from the string IniDocument doc = IniDocument.FromString(iniText); // get one value string? one = doc.Global.GetOne(\"one\"); string? anotherValue = doc.Global.GetOne(\"another value\"); // get multiple values string[]? colors = doc.GetSection(\"some section\")?.GetMany(\"color\"); Configuration parameters Section and name Allow multiple values Description Server.Listen Yes The server listening addresses/ports. Server.Encoding No The server default encoding. Server.MaximumContentLength No The server max content-length size in bytes. Server.IncludeRequestIdHeader No Specifies if the HTTP server should send the X-Request-Id header. Server.ThrowExceptions No Specifies if unhandled exceptions should be thrown. Server.AccessLogsStream No Specifies the access log output stream. Server.ErrorsLogsStream No Specifies the error log output stream. Cors.AllowMethods No Specifies the CORS Allow-Methods header value. Cors.AllowHeaders No Specifies the CORS Allow-Headers header value. Cors.AllowOrigins No Specifies multiples Allow-Origin headers, separated by commas. AllowOrigins for more information. Cors.AllowOrigin No Specifies one Allow-Origin header. Cors.ExposeHeaders No Specifies the CORS Expose-Headers header value. Cors.AllowCredentials No Specifies the CORS Allow-Credentials header value. Cors.MaxAge No Specifies the CORS Max-Age header value."
  },
  "docs/extensions/json-rpc.html": {
    "href": "docs/extensions/json-rpc.html",
    "title": "| Sisk Framework",
    "keywords": "Sisk has an experimental module for a JSON-RPC 2.0 API, which allows you to create even simpler applications. This extension strictly implements the JSON-RPC 2.0 transport interface and offers transport via HTTP GET, POST requests, and also web-sockets with Sisk. You can install the extension via Nuget with the command below. Note that, in experimental/beta versions, you should enable the option to search for pre-release packages in Visual Studio. dotnet add package Sisk.JsonRpc Transport Interface JSON-RPC is a stateless, asynchronous remote procedure execution (RDP) protocol that uses JSON for unilateral data communication. A JSON-RPC request is typically identified by an ID, and a response is delivered by the same ID that was sent in the request. Not all requests require a response, which are called \"notifications\". The JSON-RPC 2.0 specification explains in detail how the transport works. This transport is agnostic of where it will be used. Sisk implements this protocol through HTTP, following the conformities of JSON-RPC over HTTP, which partially supports GET requests, but completely supports POST requests. Web-sockets are also supported, providing asynchronous message communication. A JSON-RPC request looks similar to: { \"jsonrpc\": \"2.0\", \"method\": \"Sum\", \"params\": [1, 2, 4], \"id\": 1 } And a successful response looks similar to: { \"jsonrpc\": \"2.0\", \"result\": 7, \"id\": 1 } JSON-RPC Methods The following example shows how to create a JSON-RPC API using Sisk. A mathematical operations class performs the remote operations and delivers the serialized response to the client. using var app = HttpServer.CreateBuilder(port: 5555) .UseJsonRPC((sender, args) => { // add all methods tagged with WebMethod to the JSON-RPC handler args.Handler.Methods.AddMethodsFromType(new MathOperations()); // maps the /service route to handle JSON-RPC POST and GET requests args.Router.MapPost(\"/service\", args.Handler.Transport.HttpPost); args.Router.MapGet(\"/service\", args.Handler.Transport.HttpGet); // creates an websocket handler on GET /ws args.Router.MapGet(\"/ws\", request => { var ws = request.GetWebSocket(); ws.OnReceive += args.Handler.Transport.WebSocket; ws.WaitForClose(timeout: TimeSpan.FromSeconds(30)); return ws.Close(); }); }) .Build(); await app.StartAsync(); public class MathOperations { [WebMethod] public float Sum(float a, float b) { return a + b; } [WebMethod] public double Sqrt(float a) { return Math.Sqrt(a); } } The above example will map the Sum and Sqrt methods to the JSON-RPC handler, and these methods will be available at GET /service, POST /service and GET /ws. Method names are case-insensitive. Method parameters are automatically deserialized to their specific types. Using a request with named parameters is also supported. JSON serialization is done by the LightJson library. When a type is not correctly deserialized, you can create a specific JSON converter for that type and associate it with your JsonSerializerOptions later. You can also get the $.params raw object from the JSON-RPC request directly in your method. [WebMethod] public float Sum(JsonArray|JsonObject @params) { ... } For this to occur, @params must be the only parameter in your method, with exactly the name params (in C#, the @ is necessary to escape this parameter name). Parameter deserialization occurs for both named objects or positional arrays. For example, the following method can be called remotely by both requests: [WebMethod] public float AddUserToStore(string apiKey, User user, UserStore store) { ... } For an array, the order of the parameters must be followed. { \"jsonrpc\": \"2.0\", \"method\": \"AddUserToStore\", \"params\": [ \"1234567890\", { \"name\": \"John Doe\", \"email\": \"john@example.com\" }, { \"name\": \"My Store\" } ], \"id\": 1 } Customizing the serializer You can customize the JSON serializer in the JsonRpcHandler.JsonSerializerOptions property. In this property, you can enable the use of JSON5 for deserializing messages. Although not a conformity with JSON-RPC 2.0, JSON5 is an extension of JSON that allows for more human-readable and legible writing. using var host = HttpServer.CreateBuilder ( 5556 ) .UseJsonRPC ( ( o, e ) => { // uses a sanitized name comparer. this comparer compares only letters // and digits in a name, and discards other symbols. ex: // foo_bar10 == FooBar10 e.Handler.JsonSerializerOptions.PropertyNameComparer = new JsonSanitizedComparer (); // enables JSON5 for the JSON interpreter. even activating this, plain JSON is still allowed e.Handler.JsonSerializerOptions.SerializationFlags = LightJson.Serialization.JsonSerializationFlags.Json5; // maps the POST /service route to the JSON RPC handler e.Router.MapPost ( \"/service\", e.Handler.Transport.HttpPost ); } ) .Build (); host.Start ();"
  },
  "docs/extensions/service-providers.html": {
    "href": "docs/extensions/service-providers.html",
    "title": "Service Providers | Sisk Framework",
    "keywords": "Service Providers Service Providers is a way to port your Sisk application to different environments with a portable configuration file. This feature allows you to change the server's port, parameters, and other options without having to modify the application code for each environment. This module depends on the Sisk construction syntax and can be configured through the UsePortableConfiguration method. A configuration provider is implemented with IConfigurationProvider, which provides a configuration reader and can receive any implementation. By default, Sisk provides a JSON configuration reader, but there is also a package for INI files. You can also create your own configuration provider and register it with: using var app = HttpServer.CreateBuilder() .UsePortableConfiguration(config => { config.WithConfigReader<MyConfigurationReader>(); }) .Build(); As mentioned earlier, the default provider is a JSON file. By default, the file name searched for is service-config.json, and it is searched in the current directory of the running process, not the executable directory. You can choose to change the file name, as well as where Sisk should look for the configuration file, with: using Sisk.Core.Http; using Sisk.Core.Http.Hosting; using var app = HttpServer.CreateBuilder() .UsePortableConfiguration(config => { config.WithConfigFile(\"config.toml\", createIfDontExists: true, lookupDirectories: ConfigurationFileLookupDirectory.CurrentDirectory | ConfigurationFileLookupDirectory.AppDirectory); }) .Build(); The code above will look for the config.toml file in the current directory of the running process. If not found, it will then search in the directory where the executable is located. If the file does not exist, the createIfDontExists parameter is honored, creating the file, without any content, in the last tested path (based on lookupDirectories), and an error is thrown in the console, preventing the application from initializing. Tip You can look at the source code of the INI configuration reader and the JSON configuration reader to understand how an IConfigurationProvider is implemented. Reading configurations from a JSON file By default, Sisk provides a configuration provider that reads configurations from a JSON file. This file follows a fixed structure and is composed of the following parameters: { \"Server\": { \"DefaultEncoding\": \"UTF-8\", \"ThrowExceptions\": true, \"IncludeRequestIdHeader\": true }, \"ListeningHost\": { \"Label\": \"My sisk application\", \"Ports\": [ \"http://localhost:80/\", \"https://localhost:443/\", // Configuration files also support comments ], \"CrossOriginResourceSharingPolicy\": { \"AllowOrigin\": \"*\", \"AllowOrigins\": [ \"*\" ], // new on 0.14 \"AllowMethods\": [ \"*\" ], \"AllowHeaders\": [ \"*\" ], \"MaxAge\": 3600 }, \"Parameters\": { \"MySqlConnection\": \"server=localhost;user=root;\" } } } The parameters created from a configuration file can be accessed in the server constructor: using var app = HttpServer.CreateBuilder() .UsePortableConfiguration(config => { config.WithParameters(paramCollection => { string databaseConnection = paramCollection.GetValueOrThrow(\"MySqlConnection\"); }); }) .Build(); Each configuration reader provides a way to read the server initialization parameters. Some properties are indicated to be in the process environment instead of being defined in the configuration file, such as sensitive API data, API keys, etc. Configuration file structure The JSON configuration file is composed of the following properties: Property Mandatory Description Server Required Represents the server itself with its settings. Server.AccessLogsStream Optional Default to console. Specifies the access log output stream. Can be a filename, null or console. Server.ErrorsLogsStream Optional Default to null. Specifies the error log output stream. Can be a filename, null or console. Server.MaximumContentLength Optional Server.MaximumContentLength Optional Default to 0. Specifies the maximum content length in bytes. Zero means infinite. Server.IncludeRequestIdHeader Optional Default to false. Specifies if the HTTP server should send the X-Request-Id header. Server.ThrowExceptions Optional Default to true. Specifies if unhandled exceptions should be thrown. Set to false when production and true when debugging. ListeningHost Required Represents the server listening host. ListeningHost.Label Optional Represents the application label. ListeningHost.Ports Required Represents an array of strings, matching the ListeningPort syntax. ListeningHost.CrossOriginResourceSharingPolicy Optional Setup the CORS headers for the application. ListeningHost.CrossOriginResourceSharingPolicy.AllowCredentials Optional Defaults to false. Specifies the Allow-Credentials header. ListeningHost.CrossOriginResourceSharingPolicy.ExposeHeaders Optional Defaults to null. This property expects an array of strings. Specifies the Expose-Headers header. ListeningHost.CrossOriginResourceSharingPolicy.AllowOrigin Optional Defaults to null. This property expects an string. Specifies the Allow-Origin header. ListeningHost.CrossOriginResourceSharingPolicy.AllowOrigins Optional Defaults to null. This property expects an array of strings. Specifies multiples Allow-Origin headers. See AllowOrigins for more information. ListeningHost.CrossOriginResourceSharingPolicy.AllowMethods Optional Defaults to null. This property expects an array of strings. Specifies the Allow-Methods header. ListeningHost.CrossOriginResourceSharingPolicy.AllowHeaders Optional Defaults to null. This property expects an array of strings. Specifies the Allow-Headers header. ListeningHost.CrossOriginResourceSharingPolicy.MaxAge Optional Defaults to null. This property expects an integer. Specifies the Max-Age header in seconds. ListeningHost.Parameters Optional Specifies the properties provided to the application setup method."
  },
  "docs/extensions/ssl-proxy.html": {
    "href": "docs/extensions/ssl-proxy.html",
    "title": "SSL Proxy | Sisk Framework",
    "keywords": "SSL Proxy Warning This feature is experimental and should not be used in production. Please refer to this document if you want to make Sisk work with SSL. The Sisk SSL Proxy is a module that provides an HTTPS connection for a ListeningHost in Sisk and routes HTTPS messages to an insecure HTTP context. The module was built to provide SSL connection for a service that uses HttpListener to run, which does not support SSL. The proxy runs within the same application and listens for HTTP/1.1 messages, forwarding them in the same protocol to Sisk. Currently, this feature is highly experimental and may be unstable enough to not be used in production. At present, the SslProxy supports almost all HTTP/1.1 features, such as keep-alive, chunked encoding, websockets, etc. For an open connection to the SSL proxy, a TCP connection is created to the target server, and the proxy is forwarded to the established connection. The SslProxy can be used with HttpServer.CreateBuilder as follows: using var app = HttpServer.CreateBuilder(port: 5555) .UseRouter(r => { r.MapGet(\"/\", request => { return new HttpResponse(\"Hello, world!\"); }); }) // add SSL to the project .UseSsl( sslListeningPort: 5567, new X509Certificate2(@\".\\ssl.pfx\", password: \"12345\") ) .Build(); app.Start(); You must provide a valid SSL certificate for the proxy. To ensure that the certificate is accepted by browsers, remember to import it into the operating system so that it functions correctly."
  },
  "docs/features/discard-syntax.html": {
    "href": "docs/features/discard-syntax.html",
    "title": "Discard syntax | Sisk Framework",
    "keywords": "Discard syntax The HTTP server can be used to listen for a callback request from an action, such as OAuth authentication, and can be discarded after receiving that request. This can be useful in cases where you need a background action but do not want to set up an entire HTTP application for it. The following example show us how to create an listening HTTP server at port 5555 with CreateListener and wait the next context: using (var server = HttpServer.CreateListener(5555)) { // wait for the next http request var context = await server.WaitNextAsync(); Console.WriteLine($\"Requested path: {context.Request.Path}\"); } The WaitNext function waits for the next context of a completed request processing. Once the result of this operation is obtained, the server has already fully handled the request and sent the response to the client."
  },
  "docs/features/instancing.html": {
    "href": "docs/features/instancing.html",
    "title": "Instancing per-request members | Sisk Framework",
    "keywords": "Instancing per-request members It is common to dedicate members and instances that last for the lifetime of a request, such as a database connection, an authenticated user, or a session token. One of the possibilities is through the HttpContext.RequestBag, which creates a dictionary that lasts for the entire lifetime of a request. This dictionary can be accessed by request handlers and define variables throughout that request. For example, a request handler that authenticates a user sets this user within the HttpContext.RequestBag, and within the request logic, this user can be retrieved with HttpContext.RequestBag.Get<User>(). Here’s an example: public class AuthenticateUser : IRequestHandler { public RequestHandlerExecutionMode ExecutionMode { get; init; } = RequestHandlerExecutionMode.BeforeResponse; public HttpResponse? Execute(HttpRequest request, HttpContext context) { User authenticatedUser = AuthenticateUser(request); context.RequestBag.Set(authenticatedUser); return null; // advance to the next request handler or request logic } } [RouteGet(\"/hello\")] [RequestHandler<AuthenticateUser>] public static HttpResponse SayHello(HttpRequest request) { var authenticatedUser = request.Bag.Get<User>(); return new HttpResponse() { Content = new StringContent($\"Hello {authenticatedUser.Name}!\") }; } This is a preliminary example of this operation. The instance of User was created within the request handler dedicated to authentication, and all routes that use this request handler will have the guarantee that there will be a User in their instance of HttpContext.RequestBag. It is possible to define logic to obtain instances when not previously defined in the RequestBag through methods like GetOrAdd or GetOrAddAsync. Since version 1.3, the static property HttpContext.Current was introduced, allowing access to the currently executing HttpContext of the request context. This enables exposing members of the HttpContext outside the current request and defining instances in route objects. The example below defines a controller that has members commonly accessed by the context of a request. public abstract class Controller : RouterModule { public DbContext Database { get { // create an DbContext or get the existing one return HttpContext.Current.RequestBag.GetOrAdd(() => new DbContext()); } } // the following line will throw if the property is accessed when the User is not // defined in the request bag public User AuthenticatedUser { get => HttpContext.Current.RequestBag.Get<User>(); } // Exposing the HttpRequest instance is supported too public HttpRequest Request { get => HttpContext.Current.Request; } } And define types that inherit from the controller: [RoutePrefix(\"/api/posts\")] public class PostsController : Controller { [RouteGet] public IEnumerable<Blog> ListPosts() { return Database.Posts .Where(post => post.AuthorId == AuthenticatedUser.Id) .ToList(); } [RouteGet(\"<id>\")] public Post GetPost() { int blogId = Request.RouteParameters[\"id\"].GetInteger(); Post? post = Database.Posts .FirstOrDefault(post => post.Id == blogId && post.AuthorId == AuthenticatedUser.Id); return post ?? new HttpResponse(404); } } For the example above, you will need to configure a value handler in your router so that the objects returned by the router are transformed into a valid HttpResponse. Note that the methods do not have an HttpRequest request argument as present in other methods. This is because, since version 1.3, the router supports two types of delegates for routing responses: RouteAction, which is the default delegate that receives an HttpRequest argument, and ParameterlessRouteAction. The HttpRequest object can still be accessed by both delegates through the Request property of the static HttpContext on the thread. In the example above, we defined a disposable object, the DbContext, and we need to ensure that all instances created in a DbContext are disposed of when the HTTP session ends. For this, we can use two ways to achieve this. One is to create a request handler that is executed after the router's action, and the other way is through a custom server handler. For the first method, we can create the request handler inline directly in the OnSetup method inherited from RouterModule: public abstract class Controller : RouterModule { ... protected override void OnSetup(Router parentRouter) { base.OnSetup(parentRouter); HasRequestHandler(RequestHandler.Create( execute: (req, ctx) => { // get one DbContext defined in the request handler context and // dispose it ctx.RequestBag.GetOrDefault<DbContext>()?.Dispose(); return null; }, executionMode: RequestHandlerExecutionMode.AfterResponse)); } } The method above will ensure that the DbContext is disposed of when the HTTP session is finalized. You can do this for more members that need to be disposed of at the end of a response. For the second method, you can create a custom server handler that will dispose of the DbContext when the HTTP session is finalized. public class ObjectDisposerHandler : HttpServerHandler { protected override void OnHttpRequestClose(HttpServerExecutionResult result) { result.Context.RequestBag.GetOrDefault<DbContext>()?.Dispose(); } } And use it in your builder: using var host = HttpServer.CreateBuilder() .UseHandler<ObjectDisposerHandler>() .Build(); This is a way to handle code cleanup and keep the dependencies of a request separated by the type of module that will be used, reducing the amount of duplicated code within each action of a router. It is a practice similar to what dependency injection is used for in frameworks like ASP.NET."
  },
  "docs/features/logging.html": {
    "href": "docs/features/logging.html",
    "title": "Logging | Sisk Framework",
    "keywords": "Logging You can configure Sisk to write access and error logs automatically. It is possible to define log rotation, extensions and frequency. The LogStream class provides an asynchronous way of writing logs and keeping them in an awaitable write queue. In this article we will show you how to configure logging for your application. File based access logs Logs to files open the file, write the line text, and then close the file for every line written. This procedure was adopted to maintain write responsiveness in the logs. config.AccessLogsStream = new LogStream(\"logs/access.log\"); The above code will write all incoming requests to the logs/access.log file. Note that, the file is created automatically if it does not exist, however the folder before it does not. It's not necessary to create the logs/ directory as the LogStream class automatically creates it. Stream based logging You can write log files to TextWriter objects instances, such as Console.Out, by passing an TextWriter object in the constructor: config.AccessLogsStream = new LogStream(Console.Out); For every message written in the stream-based log, the TextWriter.Flush() method is called. Access log formatting You can customize the access log format by predefined variables. Consider the following line: config.AccessLogsFormat = \"%dd/%dmm/%dy %tH:%ti:%ts %tz %ls %ri %rs://%ra%rz%rq [%sc %sd] %lin -> %lou in %lmsms [%{user-agent}]\"; It will write an message like: 29/mar./2023 15:21:47 -0300 Executed ::1 http://localhost:5555/ \\[200 OK\\] 689B -> 707B in 84ms \\[Mozilla/5.0 (Windows NT 10.0; Win64; x64) Chrome/111.0.0.0 Safari/537.36\\] You can format your log file by the format described by the table: Variable Description Example %dd The current timestamp's day, in 00 format. 25 %dm The current timestamp's month, in 00 format. 03 %dmm The current timestamp's month, in abreviated name format. mar. %dmmm The current timestamp's month, in full name format. March %dy The current timestamp's year, in 0000 format. 2023 %th The current timestamp's hour, in 12-hours format. 03 %tH The current timestamp's hour, in 24-hours format. 15 %ti The current timestamp's minutes, in 00 format. 25 %ts The current timestamp's seconds, in 00 format. 32 %tm The current timestamp's millisecond, in 000 format. 633 %tz The current timezone difference, in +/- 0000 format. +0300, -0500, +0000 %ri The requesting user IP address (may be IPv4 or IPv6). 192.168.0.1 %rm The request method in upper case. GET %rs The requesting user URL scheme. https, http %ra The requesting user URL authority. my.contorso.com:8080 %rh The requesting user URL host. my.contorso.com %rp The requesting user URL port. 8080 %rz The requesting user URL absolute path. /index.html %rq The requesting user URL query string. ?foo=bar&aaa=bbb %sc The response status code, in 000 format. 404 %sd The response status description. Not Found %lin The incoming request content size, in an human readable form. 12,5kb %lou The outcoming response content size, in an human readable form. 65,8kb %lms The server processing time of the request and deliver of the response, in milliseconds format (000). 18 %{header} Gets the value of an HTTP header, where header is the header name, or an empty value if the header ins't present. This field is case-insensitive. %{user-agent} Rotating logs Tip In Sisk 0.15 and older, this function is only available with the Sisk.ServiceProvider package. In Sisk 0.16 and above, this function is implemented on it's core package. You can configure the HTTP server to rotate the log files to a compressed .gz file when they reach a certain size. The size is checked periodically by the limiar you define. config.AccessLogsStream = new LogStream(\"access.log\"); var rotater = new RotatingLogPolicy(config.AccessLogsStream); rotater.Configure(1024 * 1024, TimeSpan.FromHours(6)); The above code will check every six hours if the LogStream's file has reached it's 1MB limit. If so, the file is compressed to an .gz file and it then access.log is cleaned. During this process, writing to the file is locked until the file is compressed and cleaned. All lines that enter to be written in this period will be in a queue waiting for the end of compression. This function only works with file-based LogStreams. Error logging When a server is not throwing errors to the debugger, it forwards the errors to log writing when there are any. You can configure error writing with: config.ThrowExceptions = false; config.ErrorsLogsStream = new LogStream(\"error.log\"); This property will only write something to the log if the error is not captured by the callback or the Router.CallbackErrorHandler property. The error written by the server always writes the date and time, the request headers (not the body), the error trace, and the inner exception trace, if theres any. Other logging instances Your application can have zero or multiple LogStreams, there is no limit on how many log channels it can have. Therefore, it is possible to direct your application's log to a file other than the default AccessLog or ErrorLog. LogStream appMessages = new LogStream(\"messages.log\"); appMessages.WriteLine(\"Application started at {0}\", DateTime.Now); Extending LogStream You can extend the LogStream class to write custom formats, compatible with the current Sisk log engine. The example below allows to write colorful messages into the Console through Spectre.Console library: public class CustomLogStream : LogStream { protected override void WriteLineInternal(string line) { base.WriteLineInternal($\"[{DateTime.Now:g}] {line}\"); } } Another way to automatically write custom logs for each request/response is to create an HttpServerHandler. The example below is a little more complete. It writes the body of the request and response in JSON to the Console. It can be useful for debugging requests in general. This example makes use of ContextBag and HttpServerHandler. class Program { static async Task Main(string[] args) { var app = HttpServer.CreateBuilder(host => { host.UseListeningPort(5555); host.UseHandler<JsonMessageHandler>(); }); app.Router += new Route(RouteMethod.Any, \"/json\", request => { return new HttpResponse() .WithContent(JsonContent.Create(new { method = request.Method.Method, path = request.Path, specialMessage = \"Hello, world!!\" })); }); await app.StartAsync(); } } class JsonMessageHandler : HttpServerHandler { protected override void OnHttpRequestOpen(HttpRequest request) { if (request.Method != HttpMethod.Get && request.Headers[\"Content-Type\"]?.Contains(\"json\", StringComparison.InvariantCultureIgnoreCase) == true) { // At this point, the connection is open and the client has sent the header specifying // that the content is JSON.The line below reads the content and leaves it stored in the request. // // If the content is not read in the request action, the GC is likely to collect the content // after sending the response to the client, so the content may not be available after the response is closed. // _ = request.RawBody; // add hint in the context to tell that this request has an json body on it request.Bag.Add(\"IsJsonRequest\", true); } } protected override async void OnHttpRequestClose(HttpServerExecutionResult result) { string? requestJson = null, responseJson = null, responseMessage; if (result.Request.Bag.ContainsKey(\"IsJsonRequest\")) { // reformats the JSON using the CypherPotato.LightJson library var content = result.Request.Body; requestJson = JsonValue.Deserialize(content, new JsonOptions() { WriteIndented = true }).ToString(); } if (result.Response is { } response) { var content = response.Content; responseMessage = $\"{(int)response.Status} {HttpStatusInformation.GetStatusCodeDescription(response.Status)}\"; if (content is HttpContent httpContent && // check if the response is JSON httpContent.Headers.ContentType?.MediaType?.Contains(\"json\", StringComparison.InvariantCultureIgnoreCase) == true) { string json = await httpContent.ReadAsStringAsync(); responseJson = JsonValue.Deserialize(json, new JsonOptions() { WriteIndented = true }).ToString(); } } else { // gets the internal server handling status responseMessage = result.Status.ToString(); } StringBuilder outputMessage = new StringBuilder(); if (requestJson != null) { outputMessage.AppendLine(\"-----\"); outputMessage.AppendLine($\">>> {result.Request.Method} {result.Request.Path}\"); if (requestJson is not null) outputMessage.AppendLine(requestJson); } outputMessage.AppendLine($\"<<< {responseMessage}\"); if (responseJson is not null) outputMessage.AppendLine(responseJson); outputMessage.AppendLine(\"-----\"); await Console.Out.WriteLineAsync(outputMessage.ToString()); } }"
  },
  "docs/features/server-sent-events.html": {
    "href": "docs/features/server-sent-events.html",
    "title": "Server Sent Events | Sisk Framework",
    "keywords": "Server Sent Events Sisk supports sending messages through Server Sent Events out of the box. You can create disposable and persistent connections, get the connections during runtime and use them. This feature has some limitations imposed by browsers, such as sending only texts messages and not being able to permanently close a connection. A server-side closed connection will have a client periodically trying to reconnect every 5 seconds (3 for some browsers). These connections are useful for sending events from the server to the client without having the client request the information every time. Creating an SSE connection A SSE connection works like a regular HTTP request, but instead of sending a response and immediately closing the connection, the connection is kept open to send messages. Calling the HttpRequest.GetEventSource() method, the request is put in a waiting state while the SSE instance is created. r += new Route(RouteMethod.Get, \"/\", (req) => { var sse = req.GetEventSource(); sse.Send(\"Hello, world!\"); return sse.Close(); }); In the above code, we create an SSE connection and send a \"Hello, world\" message, then we close the SSE connection from the server side. Note When closing a server-side connection, by default the client will try to connect again at that end and the connection will be restarted, executing the method again, forever. It's common to forward a termination message from the server whenever the connection is closed from the server to prevent the client from trying to reconnect again. Appending headers If you need to send headers, you can use the HttpRequestEventSource.AppendHeader method before sending any messages. r += new Route(RouteMethod.Get, \"/\", (req) => { var sse = req.GetEventSource(); sse.AppendHeader(\"Header-Key\", \"Header-value\"); sse.Send(\"Hello!\"); return sse.Close(); }); Note that it is necessary to send the headers before sending any messages. Wait-For-Fail connections Connections are normally terminated when the server is no longer able to send messages due to an possible client-side disconnection. With that, the connection is automatically terminated and the instance of the class is discarded. Even with a reconnection, the instance of the class will not work, as it is linked to the previous connection. In some situations, you may need this connection later and you don't want to manage it via the callback method of the route. For this, we can identify the SSE connections with an identifier and get them using it later, even outside the callback of the route. In addition, we mark the connection with WaitForFail so as not to terminate the route and terminate the connection automatically. An SSE connection in KeepAlive will wait for a send error (caused by disconnection) to resume method execution. It is also possible to set a Timeout for this. After the time, if no message has been sent, the connection is terminated and execution resumes. r += new Route(RouteMethod.Get, \"/\", (req) => { var sse = req.GetEventSource(\"my-index-connection\"); sse.WaitForFail(TimeSpan.FromSeconds(15)); // wait for 15 seconds without any message before terminating the connection return sse.Close(); }); The above method will create the connection, handle it and wait for a disconnection or error. HttpRequestEventSource? evs = server.EventSources.GetByIdentifier(\"my-index-connection\"); if (evs != null) { // the connection is still alive evs.Send(\"Hello again!\"); } And the snippet above will try to look for the newly created connection, and if it exists, it will send a message to it. All active server connections that are identified will be available in the collection HttpServer.EventSources. This collection only stores active and identified connections. Closed connections are removed from the collection. Note It is important to note that keep alive has a limit established by components that may be connected to Sisk in an uncontrollable way, such as an web proxy, an HTTP kernel or a network driver, and they close idle connections after a certain period of time. Therefore, it is important to keep the connection open by sending periodic pings or extending the maximum time before the connection is closed. Read the next section to better understand sending periodic pings. Setup connections ping policy Ping Policy is an automated way of sending periodic messages to your client. This function allows the server to understand when the client has disconnected from that connection without having to keep the connection open indefinitely. [RouteGet(\"/sse\")] public HttpResponse Events(HttpRequest request) { var sse = request.GetEventSource(); sse.WithPing(ping => { ping.DataMessage = \"ping-message\"; ping.Interval = TimeSpan.FromSeconds(5); ping.Start(); }); sse.KeepAlive(); return sse.Close(); } In the code above, every 5 seconds, a new ping message will be sent to the client. This will keep the TCP connection alive and prevent it from being closed due to inactivity. Also, when a message fails to be sent, the connection is automatically closed, freeing up the resources used by the connection. Querying connections You can search for active connections using a predicate on the connection identifier, to be able to broadcast, for example. HttpRequestEventSource[] evs = server.EventSources.Find(es => es.StartsWith(\"my-connection-\")); foreach (HttpRequestEventSource e in evs) { e.Send(\"Broadcasting to all event sources that starts with 'my-connection-'\"); } You can also use the All method to get all active SSE connections."
  },
  "docs/features/websockets.html": {
    "href": "docs/features/websockets.html",
    "title": "Web Sockets | Sisk Framework",
    "keywords": "Web Sockets Sisk supports web sockets as well, such as receiving and sending messages to their client. This feature works fine in most browsers, but in Sisk it is still experimental. Please, if you find any bugs, report it on github. Accepting and receiving messages asynchronously The example below shows how websocket works in practice, with an example of opening a connection, receiving a message and displaying it in the console. All messages received by WebSocket are received in bytes, so you will have to decode them upon receipt. By default, messages are fragmented into chunks and the last piece is sent as the final packet of the message. You can configure the packet size with the WebSocketBufferSize flag. This buffering is the same for sending and receiving messages. static ListeningHost BuildLhA() { Router r = new Router(); r += new Route(RouteMethod.Get, \"/\", (req) => { var ws = req.GetWebSocket(); ws.OnReceive += (sender, msg) => { string msgText = Encoding.UTF8.GetString(msg.MessageBytes); Console.WriteLine(\"Received message: \" + msgText); // gets the HttpWebSocket context which received the message HttpWebSocket senderWebSocket = (HttpWebSocket)sender!; senderWebSocket.Send(\"Response!\"); }; ws.WaitForClose(); return ws.Close(); }); return new ListeningHost(\"localhost\", 5551, r); } Accepting and receiving messages synchronously The example below contains a way for you to use a synchronous websocket, without an asynchronous context, where you receive the messages, deal with them, and finish using the socket. static ListeningHost BuildLhA() { Router r = new Router(); r += new Route(RouteMethod.Get, \"/connect\", (req) => { var ws = req.GetWebSocket(); WebSocketMessage? msg; askName: ws.Send(\"What is your name?\"); msg = ws.WaitNext(); string? name = msg?.GetString(); if (string.IsNullOrEmpty(name)) { ws.Send(\"Please, insert your name!\"); goto askName; } askAge: ws.Send(\"And your age?\"); msg = ws.WaitNext(); if (!Int32.TryParse(msg?.GetString(), out int age)) { ws.Send(\"Please, insert an valid number\"); goto askAge; } ws.Send($\"You're {name}, and you are {age} old.\"); return ws.Close(); }); return new ListeningHost(\"localhost\", 5551, r); } Sending messages The Send method has three overloads, which allow you to send text, a byte array, or a byte span. All of them is chunked if the server's WebSocketBufferSize flag is greater than the total payload size. static ListeningHost BuildLhA() { Router r = new Router(); r += new Route(RouteMethod.Get, \"/\", (req) => { var ws = req.GetWebSocket(); byte[] myByteArrayContent = ...; ws.Send(\"Hello, world\"); // will be encoded as an UTF-8 byte array ws.Send(myByteArrayContent); return ws.Close(); }); return new ListeningHost(\"localhost\", 5551, r); } Waiting for websocket close The method WaitForClose() blocks the current call stack until the connection is terminated by either the client or the server. With this, the execution of the callback of the request will be blocked until the client or the server disconnects. You can also manually close the connection with the Close() method. This method returns an empty HttpResponse object, which is not sent to the client, but works as a return from the function where the HTTP request was received. static ListeningHost BuildLhA() { Router r = new Router(); r += new Route(RouteMethod.Get, \"/\", (req) => { var ws = req.GetWebSocket(); // wait for client close connection ws.WaitForClose(); // waits until no messages are exchanged in the 60 seconds // or until some party closes the connection ws.WaitForClose(TimeSpan.FromSeconds(60)); return ws.Close(); }); return new ListeningHost(\"localhost\", 5551, r); } Ping Policy Similar to how ping policy in Server Side Events works, you can also configure a ping policy to keep the TCP connection open if there is inactivity in it. ws.WithPing(ping => { ping.DataMessage = \"ping-message\"; ping.Interval = TimeSpan.FromSeconds(5); ping.Start(); });"
  },
  "docs/fundamentals/request-handlers.html": {
    "href": "docs/fundamentals/request-handlers.html",
    "title": "Request handling | Sisk Framework",
    "keywords": "Request handling Request handlers, also known as \"middlewares\", are functions that run before or after a request is executed on the router. They can be defined per route or per router. There are two types of request handlers: BeforeResponse: defines that the request handler will be executed before calling the router action. AfterResponse: defines that the request handler will be executed after calling the router action. Sending an HTTP response in this context will overwrite the router's action response. Both requests handlers can override the actual router callback function response. By the way, request handlers can be useful for validating a request, such as authentication, content, or any other information, such as storing information, logs, or other steps that can be performed before or after a response. This way, a request handler can interrupt all this execution and return a response before finishing the cycle, discarding everything else in the process. Example: let's assume that a user authentication request handler does not authenticate him. It will prevent the request lifecycle from being continued and will hang. If this happens in the request handler at position two, the third and onwards will not be evaluated. Creating an request handler To create a request handler, we can create a class that inherits the IRequestHandler interface, in this format: public class AuthenticateUserRequestHandler : IRequestHandler { public RequestHandlerExecutionMode ExecutionMode { get; init; } = RequestHandlerExecutionMode.BeforeResponse; public HttpResponse? Execute(HttpRequest request, HttpContext context) { if (request.Headers.Authorization != null) { // Returning null indicates that the request cycle can be continued return null; } else { // Returning an HttpResponse object indicates that this response will overwrite adjacent responses. return new HttpResponse(System.Net.HttpStatusCode.Unauthorized); } } } In the above example, we indicated that if the Authorization header is present in the request, it should continue and the next request handler or the router callback should be called, whichever comes next. If it's a request handler is executed after the response by their property ExecutionMode and return an non-null value, it will overwrite the router's response. Whenever a request handler returns null, it indicates that the request must continue and the next object must be called or the cycle must end with the router's response. Associating a request handler with a single route You can define one or more request handlers for a route. mainRouter.SetRoute(RouteMethod.Get, \"/\", IndexPage, \"\", new IRequestHandler[] { new AuthenticateUserRequestHandler(), // before request handler new ValidateJsonContentRequestHandler(), // before request handler // -- method IndexPage will be executed here new WriteToLogRequestHandler() // after request handler }); Or creating an Route object: Route indexRoute = new Route(RouteMethod.Get, \"/\", \"\", IndexPage, null); indexRoute.RequestHandlers = new IRequestHandler[] { new AuthenticateUserRequestHandler() }; mainRouter.SetRoute(indexRoute); Associating a request handler with a router You can define a global request handler that will runned on all routes on a router. mainRouter.GlobalRequestHandlers = new IRequestHandler[] { new AuthenticateUserRequestHandler() }; Associating a request handler with an attribute You can define a request handler on a method attribute along with a route attribute. public class MyController { [RouteGet(\"/\")] [RequestHandler<AuthenticateUserRequestHandler>] static HttpResponse Index(HttpRequest request) { return new HttpResponse() .WithContent(new StringContent(\"Hello world!\")); } } Note that it is necessary to pass the desired request handler type and not an object instance. That way, the request handler will be instantiated by the router parser. You can pass arguments in the class constructor with the ConstructorArguments property. Example: [RequestHandler<AuthenticateUserRequestHandler>(\"arg1\", 123, ...)] static HttpResponse Index(HttpRequest request) { HttpResponse res = new HttpResponse(); res.Content = new StringContent(\"Hello world!\"); return res; } You can also create your own attribute that implements RequestHandler: public class AuthenticateAttribute : RequestHandlerAttribute { public AuthenticateAttribute() : base(typeof(AuthenticateUserRequestHandler), ConstructorArguments = new object?[] { \"arg1\", 123, ... }) { ; } } And use it as: [Authenticate] static HttpResponse Index(HttpRequest request) { HttpResponse res = new HttpResponse(); res.Content = new StringContent(\"Hello world!\"); return res; } Bypassing an global request handler After defining a global request handler on a route, you can ignore this request handler on specific routes. var myRequestHandler = new AuthenticateUserRequestHandler(); mainRouter.GlobalRequestHandlers = new IRequestHandler[] { myRequestHandler }; mainRouter.SetRoute(new Route(RouteMethod.Get, \"/\", \"My route\", IndexPage, null) { BypassGlobalRequestHandlers = new IRequestHandler[] { myRequestHandler, // ok: the same instance of what is in the global request handlers new AuthenticateUserRequestHandler() // wrong: will not skip the global request handler } }); Note If you're bypassing a request handler you must use the same reference of what you instanced before to skip. Creating another request handler instance will not skip the global request handler since it's reference will change. Remember to use the same request handler reference used in both GlobalRequestHandlers and BypassGlobalRequestHandlers."
  },
  "docs/fundamentals/requests.html": {
    "href": "docs/fundamentals/requests.html",
    "title": "Requests | Sisk Framework",
    "keywords": "Requests Requests are structures that represent an HTTP request message. The HttpRequest object contains useful functions for handling HTTP messages throughout your application. An HTTP request is formed by the method, path, version, headers and body. In this document, we will teach you how to obtain each of these elements. Getting the request method To obtain the method of the received request, you can use the Method property: static HttpResponse Index(HttpRequest request) { HttpMethod requestMethod = request.Method; ... } This property returns the request's method represented by an HttpMethod object. Note Unlike route methods, this property does not serves the RouteMethod.Any item. Instead, it returns the real request method. Getting request url components You can get various component from a URL through certain properties of a request. For this example, let's consider the URL: http://localhost:5000/user/login?email=foo@bar.com Component name Description Component value Path Gets the request path. /user/login FullPath Gets the request path and the query string. /user/login?email=foo@bar.com FullUrl Gets the entire URL request string. http://localhost:5000/user/login?email=foo@bar.com Host Gets the request host. localhost Authority Gets the request host and port. localhost:5000 QueryString Gets the request query. ?email=foo@bar.com Query Gets the request query in a named value collection. {StringValueCollection object} IsSecure Determines if the request is using SSL (true) or not (false). false You can also opt by using the HttpRequest.Uri property, which includes everything above in one object. Getting the request body Some requests include body such as forms, files, or API transactions. You can get the body of a request from the property: // gets the request body as an string, using the request encoding as the encoder string body = request.Body; // or gets it in an byte array byte[] bodyBytes = request.RawBody; // or else, you can stream it. Stream requestStream = request.GetRequestStream(); It is also possible to determine if there is a body in the request and if it is loaded with the properties HasContents, which determines if the request has contents and IsContentAvailable which indicates that the HTTP server fully received the content from the remote point. It is not possible to read the request content through GetRequestStream more than once. If you read with this method, the values in RawBody and Body will also not be available. It's not necessary to dispose the request stream in the context of the request, as it is disposed at the end of the HTTP session in which it is created. Also, you can use HttpRequest.RequestEncoding property to get the best encoding to decode the request manually. The server has limits for reading the request content, which applies to both HttpRequest.Body and HttpRequest.RawBody. These properties copies the entire input stream to an local buffer of the same size of HttpRequest.ContentLength. A response with status 413 Content Too Large is returned to the client if the content sent is larger than HttpServerConfiguration.MaximumContentLength defined in the user configuration. Additionally, if there is no configured limit or if it is too large, the server will throw an OutOfMemoryException when the content sent by the client exceeds Int32.MaxValue (2 GB) and if the content is attempted to be accessed through one of the properties mentioned above. You can still deal with the content through streaming. Note Sisk follows the RFC 9110 \"HTTP Semantics\", which doens't allow certain requests methods to have body. These requests will immediately drop an 400 (Bad Request) with the ContentServedOnIllegalMethod status. Requests with bodies are not allowed in methods GET, OPTIONS, HEAD and TRACE. You can read the RFC 9910 here. You can disable this feature by turning ThrowContentOnNonSemanticMethods to false. Getting the request context The HTTP Context is an exclusive Sisk object that stores HTTP server, route, router and request handler information. You can use it to be able to organize yourself in an environment where these objects are difficult to organize. The RequestBag object contains stored information that is passed from an request handler to another point, and can be consumed at the final destination. This object can also be used by request handlers that run after the route callback. Tip This property is also acessible by HttpRequest.Bag property. public class AuthenticateUserRequestHandler : IRequestHandler { public string Identifier { get; init; } = Guid.NewGuid().ToString(); public RequestHandlerExecutionMode ExecutionMode { get; init; } = RequestHandlerExecutionMode.BeforeResponse; public HttpResponse? Execute(HttpRequest request, HttpContext context) { if (request.Headers[\"Authorization\"] != null) { context.RequestBag.Add(\"AuthenticatedUser\", \"Bob\"); return null; } else { return new HttpResponse(System.Net.HttpStatusCode.Unauthorized); } } } The above request handler will define AuthenticatedUser in the request bag, and can be consumed later in the final callback: public class MyController { [Route(RouteMethod.Get, \"/\")] [RequestHandler(typeof(AuthenticateUserRequestHandler))] static HttpResponse Index(HttpRequest request) { HttpResponse res = new HttpResponse(); string authUser = request.Context.RequestBag[\"AuthenticatedUser\"]; res.Content = new StringContent($\"Hello, {authUser}!\"); return res; } } You can also use the Bag.Set() and Bag.Get() helper methods to get or set objects by their type singletons. public class Authenticate : RequestHandler { public override HttpResponse? Execute(HttpRequest request, HttpContext context) { request.Bag.Set<User>(authUser); } } [RouteGet(\"/\")] [RequestHandler<Authenticate>] public static HttpResponse Test(HttpRequest request) { var user = request.Bag.Get<User>(); } Getting form data You can get the values of a form data in an NameValueCollection with the example below: static HttpResponse Index(HttpRequest request) { var form = request.GetFormContent(); string? username = form[\"username\"]; string? password = form[\"password\"]; if (AttempLogin(username, password) == true) { ... } } Getting multipart form data Sisk's HTTP request lets you get uploaded multipart contents, such as a files, form fields, or any binary content. static HttpResponse Index(HttpRequest request) { // the following method reads the entire request input into an // array of MultipartObjects var multipartFormDataObjects = request.GetMultipartFormContent(); foreach (MultipartObject uploadedObject in multipartFormDataObjects) { // The name of the file provided by Multipart form data. // Null is returned if the object is not a file. Console.WriteLine(\"File name : \" + uploadedObject.Filename); // The multipart form data object field name. Console.WriteLine(\"Field name : \" + uploadedObject.Name); // The multipart form data content length. Console.WriteLine(\"Content length : \" + uploadedObject.ContentLength); // Determine the image format based in the file header for each // known content type. If the content ins't an recognized common file // format, this method below will return MultipartObjectCommonFormat.Unknown Console.WriteLine(\"Common format : \" + uploadedObject.GetCommonFileFormat()); } } You can read more about Sisk Multipart form objects and it's methods, properties and functionalities. Server-sent events support Sisk supports Server-sent events, which allows sending chunks as an stream and keeping the connection between the server and the client alive. Calling the HttpRequest.GetEventSource method will put the HttpRequest in it's listener state. From this, the context of this HTTP request will not expect an HttpResponse as it will overlap the packets sent by server side events. After sending all packets, the callback must return the Close method, which will send the final response to the server and indicate that the streaming has ended. It's not possible to predict what the total length of all packets that will be sent, so it is not possible to determine the end of the connection with Content-Length header. By most browsers defaults, server-side events does not support sending HTTP headers or methods other than the GET method. Therefore, be careful when using request handlers with event-source requests that require specific headers in the request, as it probably they ins't going to have them. Also, most browsers restart streams if the EventSource.close method ins't called on the client side after receiving all the packets, causing infinite additional processing on the server side. To avoid this kind of problem, it's common to send an final packet indicating that the event source has finished sending all packets. The example below shows how the browser can communicate with the server that supports Server-side events. <html> <body> <b>Fruits:</b> <ul></ul> </body> <script> const evtSource = new EventSource('/event-source'); const eventList = document.querySelector('ul'); evtSource.onmessage = (e) => { const newElement = document.createElement(\"li\"); newElement.textContent = `message: ${e.data}`; eventList.appendChild(newElement); if (e.data == \"Tomato\") { evtSource.close(); } } </script> </html> And progressively send the messages to the client: public class MyController { [Route(RouteMethod.Get, \"/event-source\")] static HttpResponse ServerEventsResponse(HttpRequest request) { var serverEvents = request.GetEventSource(); string[] fruits = new[] { \"Apple\", \"Banana\", \"Watermelon\", \"Tomato\" }; foreach (string fruit in fruits) { serverEvents.Send(fruit); Thread.Sleep(1500); } return serverEvents.Close(); } } When running this code, we expect a result similar to this: Resolving proxied IPs and hosts Sisk can be used with proxies, and therefore IP addresses can be replaced by the proxy endpoint in the transaction from a client to the proxy. You can define your own resolvers in Sisk with forwarding resolvers. Headers encoding Header encoding can be a problem for some implementations. On Windows, UTF-8 headers are not supported, so ASCII is used. Sisk has a built-in encoding converter, which can be useful for decoding incorrectly encoded headers. This operation is costly and disabled by default, but can be enabled under the NormalizeHeadersEncodings flag."
  },
  "docs/fundamentals/responses.html": {
    "href": "docs/fundamentals/responses.html",
    "title": "Responses | Sisk Framework",
    "keywords": "Responses Responses represent objects that are HTTP responses to HTTP requests. They are sent by the server to the client as an indication of the request for a resource, page, document, file or other object. An HTTP response is formed up of status, headers and content. In this document, we will teach you how to architect HTTP responses with Sisk. Setting an HTTP status The HTTP status list is the same since HTTP/1.0, and Sisk supports all of them. HttpResponse res = new HttpResponse(); res.Status = System.Net.HttpStatusCode.Accepted; // 202 Or with Fluent Syntax: new HttpResponse() .WithStatus(200) // or .WithStatus(HttpStatusCode.Ok) // or .WithStatus(HttpStatusInformation.Ok); You can see the full list of available HttpStatusCode here. You can also provide your own status code by using the HttpStatusInformation structure. Body and content-type Sisk supports native .NET content objects to send body in responses. You can use the StringContent class to send a JSON response for example: HttpResponse res = new HttpResponse(); res.Content = new StringContent(myJson, Encoding.UTF8, \"application/json\"); The server will always attempt to calculate the Content-Length from what you have defined in the content if you haven't explicitly defined it in a header. If the server cannot implicitly obtain the Content-Length header from the response content, the response will be sent with Chunked-Encoding. You can also stream the response by sending a StreamContent or using the method GetResponseStream. Response headers You can add, edit or remove headers you're sending in the response. The example below shows how to send an redirect response to the client. HttpResponse res = new HttpResponse(); res.Status = HttpStatusCode.Moved; res.Headers.Add(HttpKnownHeaderNames.Location, \"/login\"); Or with Fluent Syntax: new HttpResponse(301) .WithHeader(\"Location\", \"/login\"); When you use the Add method of HttpHeaderCollection, you are adding a header to the request without altering the ones already sent. The Set method replaces the headers with the same name with the instructed value. The indexer of HttpHeaderCollection internally calls the Set method to replace the headers. Sending cookies Sisk has methods that facilitate the definition of cookies in the client. Cookies set by this method are already URL encoded and fit the RFC-6265 standard. HttpResponse res = new HttpResponse(); res.SetCookie(\"cookie-name\", \"cookie-value\"); Or with Fluent Syntax: new HttpResponse(301) .WithCookie(\"cookie-name\", \"cookie-value\", expiresAt: DateTime.Now.Add(TimeSpan.FromDays(7))); There are other more complete versions of the same method. Chunked responses You can set the transfer encoding to chunked to send large responses. HttpResponse res = new HttpResponse(); res.SendChunked = true; When using chunked-encoding, the Content-Length header is automatically omitted. Response stream Response streams are an managed way that allow you to send responses in a segmented way. It's a lower level operation than using HttpResponse objects, as they require you to send the headers and content manually, and then close the connection. This example opens an read-only stream for the file, copies the stream to the response output stream and doens't loads the entire file in the memory. This can be useful to serving medium or big files. // gets the response output stream using var fileStream = File.OpenRead(\"my-big-file.zip\"); var responseStream = request.GetResponseStream(); // sets the response encoding to use chunked-encoding // also you shouldn't send content-length header when using // chunked encoding responseStream.SendChunked = true; responseStream.SetStatus(200); responseStream.SetHeader(HttpKnownHeaderNames.ContentType, contentType); // copies the file stream to the response output stream fileStream.CopyTo(responseStream.ResponseStream); // closes the stream return responseStream.Close(); GZip, Deflate and Brotli compression You can send responses with compressed content in Sisk with compressing HTTP contents. Firstly, encapsulate your HttpContent object within one of the compressors below to send the compressed response to the client. router.MapGet(\"/hello.html\", request => { string myHtml = \"...\"; return new HttpResponse () { Content = new GZipContent(new HtmlContent(myHtml)), // or Content = new BrotliContent(new HtmlContent(myHtml)), // or Content = new DeflateContent(new HtmlContent(myHtml)), }; }); You can also use these compressed contents with streams. router.MapGet(\"/archive.zip\", request => { // do not apply \"using\" here. the HttpServer will discard your content // after sending the response. var archive = File.OpenRead(\"/path/to/big-file.zip\"); return new HttpResponse () { Content = new GZipContent(archive) } }); The Content-Encoding headers are automatically set when using these contents. Implicit response types Since version 0.15, you can use other return types besides HttpResponse, but it is necessary to configure the router how it will handle each type of object. The concept is to always return a reference type and turn it into a valid HttpResponse object. Routes that return HttpResponse do not undergo any conversion. Value types (structures) cannot be used as a return type because they are not compatible with the RouterCallback, so they must be wrapped in a ValueResult to be able to be used in handlers. Consider the following example from a router module not using HttpResponse in the return type: [RoutePrefix(\"/users\")] public class UsersController : RouterModule { public List<User> Users = new List<User>(); [RouteGet] public IEnumerable<User> Index(HttpRequest request) { return Users.ToArray(); } [RouteGet(\"<id>\")] public User View(HttpRequest request) { int id = request.Query[\"id\"].GetInteger(); User dUser = Users.First(u => u.Id == id); return dUser; } [RoutePost] public ValueResult<bool> Create(HttpRequest request) { User fromBody = JsonSerializer.Deserialize<User>(request.Body)!; Users.Add(fromBody); return true; } } With that, now it is necessary to define in the router how it will deal with each type of object. Objects are always the first argument of the handler and the output type must be a valid HttpResponse. Also, the output objects of a route should never be null. For ValueResult types it is not necessary to indicate that the input object is a ValueResult and only T, since ValueResult is an object reflected from its original component. The association of types does not compare what was registered with the type of the object returned from the router callback. Instead, it checks whether the type of the router result is assignable to the registered type. Registering a handler of type Object will fallback to all previously unvalidated types. The inserting order of the value handlers also matters, so registering an Object handler will ignore all other type-specific handlers. Always register specific value handlers first to ensure order. Router r = new Router(); r.SetObject(new UsersController()); r.RegisterValueHandler<bool>(bolVal => { HttpResponse res = new HttpResponse(); res.Status = (bool)bolVal ? HttpStatusCode.OK : HttpStatusCode.BadRequest; return res; }); r.RegisterValueHandler<IEnumerable>(enumerableValue => { return new HttpResponse(); // do something with enumerableValue here }); // registering an value handler of object must be the last // value handler which will be used as an fallback r.RegisterValueHandler<object>(fallback => { HttpResponse res = new HttpResponse(); res.Status = HttpStatusCode.OK; res.Content = JsonContent.Create(fallback); return res; });"
  },
  "docs/fundamentals/routing.html": {
    "href": "docs/fundamentals/routing.html",
    "title": "Routing | Sisk Framework",
    "keywords": "Routing The Router is the first step in building the server. It is responsible for housing Route objects, which are endpoints that map URLs and their methods to actions executed by the server. Each action is responsible for receiving a request and delivering a response to the client. The routes are pairs of path expressions (\"path pattern\") and the HTTP method that they can listen to. When a request is made to the server, it will attempt to find a route that matches the received request, then it will call the action of that route and deliver the resulting response to the client. There are multiple ways to define routes in Sisk: they can be static, dynamic or auto-scanned, defined by attributes, or directly in the Router object. Router mainRouter = new Router(); // maps the GET / route into the following action mainRouter.MapGet(\"/\", request => { return new HttpResponse(\"Hello, world!\"); }); To understand what a route is capable of doing, we need to understand what a request is capable of doing. An HttpRequest will contain everything you need. Sisk also includes some extra features that speed up the overral development. For every action received by the server, a delegate of type RouteAction will be called. This delegate contains an parameter holding an HttpRequest with all the necessary information about the request received by the server. The resulting object from this delegate must be an HttpResponse or an object that maps to it through implicit response types. Matching routes When a request is received by the HTTP server, Sisk searches for a route that satisfies the expression of the path received by the request. The expression is always tested between the route and the request path, without considering the query string. This test does not have priority and is exclusive to a single route. When no route is matched with that request, the Router.NotFoundErrorHandler response is returned to the client. When the path pattern is matched, but the HTTP method is mismatched, the Router.MethodNotAllowedErrorHandler response is sent back to the client. Sisk checks for the possibility of route collisions to avoid these problems. When defining routes, Sisk will look for possible routes that might collide with the route being defined. This test includes checking the path and the method that the route is set to accept. Creating routes using path patterns You can define routes using various SetRoute methods. // SetRoute way mainRouter.SetRoute(RouteMethod.Get, \"/hey/<name>\", (request) => { string name = request.RouteParameters[\"name\"].GetString(); return new HttpResponse($\"Hello, {name}\"); }); // Map* way mainRouter.MapGet(\"/form\", (request) => { var formData = request.GetFormData(); return new HttpResponse(); // empty 200 ok }); // Route.* helper methods mainRouter += Route.Get(\"/image.png\", (request) => { var imageStream = File.OpenRead(\"image.png\"); return new HttpResponse() { // the StreamContent inner // stream is disposed after sending // the response. Content = new StreamContent(imageStream) }; }); // multiple parameters mainRouter.MapGet(\"/hey/<name>/surname/<surname>\", (request) => { string name = request.RouteParameters[\"name\"].GetString(); string surname = request.RouteParameters[\"surname\"].GetString(); return new HttpResponse($\"Hello, {name} {surname}!\"); }); The RouteParameters property of HttpResponse contains all the information about the path variables of the received request. Every path received by the server is normalized before the path pattern test is executed, following these rules: All empty segments are removed from the path, eg: ////foo//bar becomes /foo/bar. Path matching is case-sensitive, unless Router.MatchRoutesIgnoreCase is set to true. The Query and RouteParameters properties of HttpRequest return a StringValueCollection object, where each indexed property returns a non-null StringValue, which can be used as an option/monad to convert its raw value into a managed object. The example below reads the route parameter \"id\" and obtains a Guid from it. If the parameter is not a valid Guid, an exception is thrown, and a 500 error is returned to the client if the server is not handling Router.CallbackErrorHandler. mainRouter.SetRoute(RouteMethod.Get, \"/user/<id>\", (request) => { Guid id = request.RouteParameters[\"id\"].GetGuid(); }); Note Paths have their trailing / ignored in both request and route path, that is, if you try to access a route defined as /index/page you'll be able to access using /index/page/ too. You can also force URLs to terminate with / enabling the ForceTrailingSlash flag. Creating routes using class instances You can also define routes dynamically using reflection with the attribute RouteAttribute. This way, the instance of a class in which its methods implement this attribute will have their routes defined in the target router. For a method to be defined as a route, it must be marked with a RouteAttribute, such as the attribute itself or a RouteGetAttribute. The method can be static, instance, public, or private. When the method SetObject(type) or SetObject<TType>() is used, instance methods are ignored. public class MyController { // will match GET / [RouteGet] HttpResponse Index(HttpRequest request) { HttpResponse res = new HttpResponse(); res.Content = new StringContent(\"Index!\"); return res; } // static methods works too [RouteGet(\"/hello\")] static HttpResponse Hello(HttpRequest request) { HttpResponse res = new HttpResponse(); res.Content = new StringContent(\"Hello world!\"); return res; } } The line below will define both the Index and Hello methods of MyController as routes, as both are marked as routes, and an instance of the class has been provided, not its type. If its type had been provided instead of an instance, only the static methods would be defined. var myController = new MyController(); mainRouter.SetObject(myController); Since Sisk version 0.16, it is possible to enable AutoScan, which will search for user-defined classes that implement RouterModule and will automatically associate it with the router. This is not supported with AOT compilation. mainRouter.AutoScanModules<ApiController>(); The above instruction will search for all types which implements ApiController but not the type itself. The two optional parameters indicate how the method will search for these types. The first argument implies the Assembly where the types will be searched and the second indicates the way in which the types will be defined. Regex routes Instead of using the default HTTP path matching methods, you can mark a route to be interpreted with Regex. Route indexRoute = new Route(RouteMethod.Get, @\"\\/[a-z]+\\/\", \"My route\", IndexPage, null); indexRoute.UseRegex = true; mainRouter.SetRoute(indexRoute); Or with RegexRoute class: RegexRoute indexRoute = new RegexRoute(RouteMethod.Get, @\"\\/[a-z]+\\/\", request => { return new HttpResponse(\"hello, world\"); }); mainRouter.SetRoute(indexRoute); You can also capture groups from the regex pattern into the Request.Query contents: [RegexRoute(RouteMethod.Get, @\"/uploads/(?<filename>.*\\.(jpeg|jpg|png))\")] static HttpResponse RegexRoute(HttpRequest request) { string filename = request.Query[\"filename\"].GetString(); return new HttpResponse().WithContent($\"Acessing file {filename}\"); } Any method routes You can define a route to be matched only by its path and skip the HTTP method. This can be useful for you to do method validation inside the route callback. // will match / on any HTTP method mainRouter.SetRoute(RouteMethod.Any, \"/\", callbackFunction); Any path routes Any path routes test for any path received by the HTTP server, subject to the route method being tested. If the route method is RouteMethod.Any and the route uses Route.AnyPath in its path expression, this route will listen to all requests from the HTTP server, and no other routes can be defined. // the following route will match all POST requests mainRouter.SetRoute(RouteMethod.Post, Route.AnyPath, callbackFunction); Ignore case route matching By default, the interpretation of routes with requests are case-sensitive. To make it ignore case, enable this option: mainRouter.MatchRoutesIgnoreCase = true; This will also enable the option RegexOptions.IgnoreCase for routes where it's regex-matching. Not Found (404) callback handler You can create a custom callback for when a request doesn't match any known routes. mainRouter.NotFoundErrorHandler = () => { return new HttpResponse(404) { // Since v0.14 Content = new HtmlContent(\"<h1>Not found</h1>\") // older versions Content = new StringContent(\"<h1>Not found</h1>\", Encoding.UTF8, \"text/html\") }; }; Method not allowed (405) callback handler You can also create a custom callback for when a request matches it's path, but doens't match the method. mainRouter.MethodNotAllowedErrorHandler = (context) => { return new HttpResponse(405) { Content = new StringContent($\"Method not allowed for this route.\") }; }; Internal error handler Route callbacks can throw errors during server execution. If not handled correctly, the overall functioning of the HTTP server can be terminated. The router has a callback for when a route callback fails and prevents service interruption. This method is only reacheable when ThrowExceptions is set to false. mainRouter.CallbackErrorHandler = (ex, context) => { return new HttpResponse(500) { Content = new StringContent($\"Error: {ex.Message}\") }; };"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started with Sisk | Sisk Framework",
    "keywords": "Getting Started with Sisk Sisk can run in any .NET environment. In this guide, we will teach you how to create a Sisk application using .NET. If you haven't installed it yet, please download the SDK from here. In this tutorial, we will cover how to create a project structure, receive a request, obtain a URL parameter, and send a response. This guide will focus on building a simple server using C#. You can also use your favorite programming language. Note You may be interested in a quickstart project. Check this repository for more information. Creating a Project Let's name our project \"My Sisk Application.\" Once you have .NET set up, you can create your project with the following command: dotnet new console -n my-sisk-application Next, navigate to your project directory and install Sisk using the .NET utility tool: cd my-sisk-application dotnet add package Sisk.HttpServer You can find additional ways to install Sisk in your project here. Now, let's create an instance of our HTTP server. For this example, we will configure it to listen on port 5000. Building the HTTP Server Sisk allows you to build your application step by step manually, as it routes to the HttpServer object. However, this may not be very convenient for most projects. Therefore, we can use the builder method, which makes it easier to get our app up and running. class Program { static async Task Main(string[] args) { using var app = HttpServer.CreateBuilder() .UseListeningPort(\"http://localhost:5000/\") .Build(); app.Router.MapGet(\"/\", request => { return new HttpResponse() { Status = 200, Content = new StringContent(\"Hello, world!\") }; }); await app.StartAsync(); } } It's important to understand each vital component of Sisk. Later in this document, you will learn more about how Sisk works. Manual (advanced) setup You can learn how each Sisk mechanism works in this section of the documentation, which explains the behavior and relationships between the HttpServer, Router, ListeningPort, and other components."
  },
  "docs/installing.html": {
    "href": "docs/installing.html",
    "title": "Installing | Sisk Framework",
    "keywords": "Installing You can install Sisk through Nuget, dotnet cli or another options. You can easily setup your Sisk environment by running this command in your developer console: Warning Newest versions of Sisk are compatible with .NET 8 and soon .NET 9. Legacy versions of Sisk for .NET 6 and .NET 7 will be maintained until November 30, 2024, receiving only security patches and fixes under the \"legacy\" branch. Please, update your projects using Sisk to .NET 8. dotnet add package Sisk.HttpServer This command will install the latest version of Sisk in your project."
  },
  "docs/native-aot.html": {
    "href": "docs/native-aot.html",
    "title": "Native AOT support | Sisk Framework",
    "keywords": "Native AOT support In the .NET 7, Native AOT was introduced, a .NET compilation mode that allows you to export ready binaries on any supported platform, without requiring the .NET runtime to be installed on the target machine. With Native AOT, your code is compiled for native code and already contains everything it needs to be executed. Sisk has been experimenting with the feature since version 0.9.1, which improves support for Native AOT with features to define dynamic routes by application without afecting the compilation with warning messages. Sisk uses reflection to obtain the methods that will be defined from types and objects. In addition, Sisk uses reflection for attributes such as RequestHandlerAttribute, which are initialized from a type. To function properly, AOT compilation uses trimming, where dynamic types should be specified what will be used in the final assembly. Considering the example below, it is a route that calls a RequestHandler. [Route(RouteMethod.Get, \"/\", LogMode = LogOutput.None)] [RequestHandler(typeof(MyRequestHandler))] static HttpResponse IndexPage(HttpRequest request) { HttpResponse htmlResponse = new HttpResponse(); htmlResponse.Content = new StringContent(\"Hello, world!\", System.Text.Encoding.UTF8, \"text/plain\"); return htmlResponse; } This RequestHandler is dynamically invoked during the runtime, and this invocation must be segmented, and this segmentation must be explicitly. To better understand what the compiler will consider from MyRequestHandler should be kept in the final compilation is: Public properties; Public and private fields; Public and private constructors; Public and private methods; Everything you have in a RequestHandler that is not mentioned above will be removed by the compiler. Remembering that all other components, classes and packages that you use in your application should be compatible with AOT Trimming, or your code will not function as expected. By the way, Sisk will not leave you if they want to build something where performance is a priority. You can read more about Native AOT and how it works in the official Microsoft Documentation."
  },
  "docs/pt-br/advanced/forwarding-resolvers.html": {
    "href": "docs/pt-br/advanced/forwarding-resolvers.html",
    "title": "Forwarding Resolvers | Sisk Framework",
    "keywords": "Forwarding Resolvers Um Forwarding Resolver é um auxiliar que ajuda a decodificar informações que identificam o cliente por meio de uma solicitação, proxy, CDN ou balanceadores de carga. Quando seu serviço Sisk é executado por meio de um proxy inverso ou avançado, o endereço IP, o host e o protocolo do cliente podem ser diferentes da solicitação original, pois é um encaminhamento de um serviço para outro. Essa funcionalidade do Sisk permite que você controle e resolva essas informações antes de trabalhar com a solicitação. Esses proxies geralmente fornecem cabeçalhos úteis para identificar seu cliente. Atualmente, com a classe ForwardingResolver, é possível resolver o endereço IP do cliente, o host e o protocolo HTTP usado. Após a versão 1.0 do Sisk, o servidor não possui mais uma implementação padrão para decodificar esses cabeçalhos por motivos de segurança que variam de serviço para serviço. Por exemplo, o cabeçalho X-Forwarded-For inclui informações sobre os endereços IP que encaminharam a solicitação. Este cabeçalho é usado por proxies para transportar uma cadeia de informações para o serviço final e inclui o IP de todos os proxies usados, incluindo o endereço real do cliente. O problema é: às vezes é desafiador identificar o IP remoto do cliente e não há uma regra específica para identificar este cabeçalho. É altamente recomendável ler a documentação dos cabeçalhos que você está prestes a implementar abaixo: Leia sobre o cabeçalho X-Forwarded-For aqui. Leia sobre o cabeçalho X-Forwarded-Host aqui. Leia sobre o cabeçalho X-Forwarded-Proto aqui. A classe ForwardingResolver Esta classe possui três métodos virtuais que permitem a implementação mais adequada para cada serviço. Cada método é responsável por resolver informações da solicitação por meio de um proxy: o endereço IP do cliente, o host da solicitação e o protocolo de segurança usado. Por padrão, o Sisk sempre usará as informações da solicitação original, sem resolver nenhum cabeçalho. O exemplo abaixo mostra como essa implementação pode ser usada. Este exemplo resolve o endereço IP do cliente através do cabeçalho X-Forwarded-For e lança um erro quando mais de um IP foi encaminhado na solicitação. [!IMPORTANTE] Não use este exemplo em código de produção. Verifique sempre se a implementação é apropriada para uso. Leia a documentação do cabeçalho antes de implementá-lo. class Program { static void Main(string[] args) { using var host = HttpServer.CreateBuilder() .UseForwardingResolver<Resolver>() .UseListeningPort(5555) .Build(); host.Router.SetRoute(RouteMethod.Any, Route.AnyPath, request => new HttpResponse(\"Hello, world!!!\")); host.Start(); } class Resolver : ForwardingResolver { public override IPAddress OnResolveClientAddress(HttpRequest request, IPEndPoint connectingEndpoint) { string? forwardedFor = request.Headers.XForwardedFor; if (forwardedFor is null) { throw new Exception(\"O cabeçalho X-Forwarded-For está faltando.\"); } string[] ipAddresses = forwardedFor.Split(','); if (ipAddresses.Length != 1) { throw new Exception(\"Número excessivo de endereços no cabeçalho X-Forwarded-For.\"); } return IPAddress.Parse(ipAddresses[0]); } } }"
  },
  "docs/pt-br/advanced/http-server-handlers.html": {
    "href": "docs/pt-br/advanced/http-server-handlers.html",
    "title": "Handlers de servidor HTTP | Sisk Framework",
    "keywords": "Handlers de servidor HTTP Na versão 0.16 do Sisk, introduzimos a classe HttpServerHandler, que visa estender o comportamento geral do Sisk e fornecer manipuladores de eventos adicionais ao Sisk, como lidar com solicitações HTTP, roteadores, bolsas de contexto e muito mais. A classe concentra eventos que ocorrem durante a vida útil do servidor HTTP inteiro e também de uma solicitação. O protocolo HTTP não possui sessões e, portanto, não é possível preservar informações de uma solicitação para outra. O Sisk, por enquanto, fornece uma maneira para você implementar sessões, contextos, conexões de banco de dados e outros provedores úteis para ajudar no seu trabalho. Consulte esta página para saber onde cada evento é acionado e qual é o seu propósito. Você também pode visualizar o ciclo de vida de uma solicitação HTTP para entender o que acontece com uma solicitação e onde os eventos são disparados. O servidor HTTP permite que você use vários manipuladores ao mesmo tempo. Cada chamada de evento é síncrona, ou seja, bloqueará a thread atual para cada solicitação ou contexto até que todos os manipuladores associados a essa função sejam executados e concluídos. Ao contrário dos RequestHandlers, eles não podem ser aplicados a alguns grupos de rotas ou rotas específicas. Em vez disso, eles são aplicados a todo o servidor HTTP. Você pode aplicar condições dentro do seu Http Server Handler. Além disso, singletons de cada HttpServerHandler são definidos para cada aplicativo Sisk, portanto, apenas uma instância por HttpServerHandler é definida. Um exemplo prático de uso do HttpServerHandler é descartar automaticamente uma conexão de banco de dados no final da solicitação. // DatabaseConnectionHandler.cs public class DatabaseConnectionHandler : HttpServerHandler { public override void OnHttpRequestClose(HttpServerExecutionResult result) { var requestBag = result.Request.Context.RequestBag; // verifica se a solicitação definiu um DbContext // em sua bolsa de contexto if (requestBag.IsSet<DbContext>()) { var db = requestBag.Get<DbContext>(); db.Dispose(); } } } public static class DatabaseConnectionHandlerExtensions { // permite que o usuário crie um dbcontext a partir de uma solicitação HTTP // e armazene-o em sua bolsa de contexto public static DbContext GetDbContext(this HttpRequest request) { var db = new DbContext(); return request.SetContextBag<DbContext>(db); } } Com o código acima, a extensão GetDbContext permite que uma conexão de contexto seja criada diretamente do objeto HttpRequest. Uma conexão não descartada pode causar problemas ao executar com o banco de dados, portanto, é encerrada em OnHttpRequestClose. Você pode registrar um manipulador em um servidor HTTP em seu construtor ou diretamente com HttpServer.RegisterHandler. // Program.cs class Program { static void Main(string[] args) { using var app = HttpServer.CreateBuilder() .UseHandler<DatabaseConnectionHandler>() .Build(); app.Router.SetObject(new UserController()); app.Start(); } } Com isso, a classe UsersController pode usar o contexto do banco de dados como: // UserController.cs [RoutePrefix(\"/users\")] public class UserController : ApiController { [RouteGet()] public async Task<HttpResponse> List(HttpRequest request) { var db = request.GetDbContext(); var users = db.Users.ToArray(); return JsonOk(users); } [RouteGet(\"<id>\")] public async Task<HttpResponse> View(HttpRequest request) { var db = request.GetDbContext(); var userId = request.GetQueryValue<int>(\"id\"); var user = db.Users.FirstOrDefault(u => u.Id == userId); return JsonOk(user); } [RoutePost] public async Task<HttpResponse> Create(HttpRequest request) { var db = request.GetDbContext(); var user = JsonSerializer.Deserialize<User>(request.Body); ArgumentNullException.ThrowIfNull(user); db.Users.Add(user); await db.SaveChangesAsync(); return JsonMessage(\"User added.\"); } } O código acima usa métodos como JsonOk e JsonMessage que são integrados ao ApiController, que é herdado de um RouterController: // ApiController.cs public class ApiController : RouterModule { public HttpResponse JsonOk(object value) { return new HttpResponse(200) .WithContent(JsonContent.Create(value, null, new JsonSerializerOptions() { PropertyNameCaseInsensitive = true })); } public HttpResponse JsonMessage(string message, int statusCode = 200) { return new HttpResponse(statusCode) .WithContent(JsonContent.Create(new { Message = message })); } } Os desenvolvedores podem implementar sessões, contextos e conexões de banco de dados usando esta classe. O código fornecido mostra um exemplo prático com o DatabaseConnectionHandler, automatizando o descarte da conexão do banco de dados no final de cada solicitação. A integração é simples, com manipuladores registrados durante a configuração do servidor. A classe HttpServerHandler oferece um conjunto poderoso de ferramentas para gerenciar recursos e estender o comportamento do Sisk em aplicações HTTP."
  },
  "docs/pt-br/advanced/manual-setup.html": {
    "href": "docs/pt-br/advanced/manual-setup.html",
    "title": "Configuração manual (avançado) | Sisk Framework",
    "keywords": "Configuração manual (avançado) Nesta seção, vamos criar nosso servidor HTTP sem nenhum padrão predefinido, de uma maneira completamente abstrata. Aqui, você pode construir manualmente como seu servidor HTTP funcionará. Cada ListeningHost possui um roteador, e um servidor HTTP pode ter vários ListeningHosts, cada um apontando para um host diferente em uma porta diferente. Primeiro, precisamos entender o conceito de solicitação/resposta. É bastante simples: para cada solicitação, deve haver uma resposta. O Sisk segue esse princípio também. Vamos criar um método que responda com uma mensagem \"Olá, Mundo!\" em HTML, especificando o código de status e cabeçalhos. // Program.cs using Sisk.Core.Http; using Sisk.Core.Routing; static HttpResponse IndexPage(HttpRequest request) { HttpResponse indexResponse = new HttpResponse { Status = System.Net.HttpStatusCode.OK, Content = new HtmlContent(@\" <html> <body> <h1>Olá, mundo!</h1> </body> </html> \") }; return indexResponse; } O próximo passo é associar esse método a uma rota HTTP. Roteadores Roteadores são abstrações de rotas de solicitação e servem como a ponte entre solicitações e respostas para o serviço. Roteadores gerenciam rotas de serviço, funções e erros. Um roteador pode ter várias rotas, e cada rota pode realizar diferentes operações naquele caminho, como executar uma função, servir uma página ou fornecer um recurso do servidor. Vamos criar nosso primeiro roteador e associar nosso método IndexPage ao caminho index. Router mainRouter = new Router(); // SetRoute associará todas as rotas index às nossas funções. mainRouter.SetRoute(RouteMethod.Get, \"/\", IndexPage); Agora nosso roteador pode receber solicitações e enviar respostas. No entanto, mainRouter não está vinculado a um host ou servidor, então ele não funcionará sozinho. O próximo passo é criar nosso ListeningHost. Hosts de Escuta e Portas Um ListeningHost pode hospedar um roteador e várias portas de escuta para o mesmo roteador. Um ListeningPort é um prefixo onde o servidor HTTP irá escutar. Aqui, podemos criar um ListeningHost que aponta para dois endpoints para nosso roteador: ListeningHost myHost = new ListeningHost { Router = new Router(), Ports = new ListeningPort[] { new ListeningPort(\"http://localhost:5000/\") } }; Agora nosso servidor HTTP irá escutar os endpoints especificados e redirecionar suas solicitações para nosso roteador. Configuração do Servidor A configuração do servidor é responsável por grande parte do comportamento do servidor HTTP em si. Nesta configuração, podemos associar ListeningHosts ao nosso servidor. HttpServerConfiguration config = new HttpServerConfiguration(); config.ListeningHosts.Add(myHost); // Adicione nosso ListeningHost a esta configuração do servidor Em seguida, podemos criar nosso servidor HTTP: HttpServer server = new HttpServer(config); server.Start(); // Inicia o servidor Console.ReadKey(); // Previne o encerramento da aplicação Agora podemos compilar nosso executável e executar nosso servidor HTTP com o comando: dotnet watch Em tempo de execução, abra seu navegador e navegue até o caminho do servidor, e você deve ver:"
  },
  "docs/pt-br/advanced/multi-host-setup.html": {
    "href": "docs/pt-br/advanced/multi-host-setup.html",
    "title": "Configuração de vários hosts | Sisk Framework",
    "keywords": "Configuração de vários hosts O Sisk Framework sempre suportou o uso de mais de um host por servidor, ou seja, um único servidor HTTP pode escutar em múltiplos portas e cada porta possui seu próprio roteador e seu próprio serviço em execução nela. Isso facilita a separação de responsabilidades e a gestão de serviços em um único servidor HTTP com o Sisk. O exemplo abaixo mostra a criação de dois ListeningHosts, cada um escutando em uma porta diferente, com roteadores e ações diferentes. Leia criação manual do seu aplicativo para entender os detalhes sobre essa abstração. static void Main(string[] args) { // criar dois hosts de escuta, cada um com seu próprio roteador e // escutando em sua própria porta // ListeningHost hostA = new ListeningHost(); hostA.Ports = [new ListeningPort(12000)]; hostA.Router = new Router(); hostA.Router.SetRoute(RouteMethod.Get, \"/\", request => new HttpResponse().WithContent(\"Olá do host A!\")); ListeningHost hostB = new ListeningHost(); hostB.Ports = [new ListeningPort(12001)]; hostB.Router = new Router(); hostB.Router.SetRoute(RouteMethod.Get, \"/\", request => new HttpResponse().WithContent(\"Olá do host B!\")); // criar uma configuração do servidor e adicionar ambos // os hosts de escuta nela // HttpServerConfiguration configuration = new HttpServerConfiguration(); configuration.ListeningHosts.Add(hostA); configuration.ListeningHosts.Add(hostB); // cria um servidor HTTP que usa a configuração especificada // HttpServer server = new HttpServer(configuration); // inicia o servidor server.Start(); Console.WriteLine(\"Tente acessar o host A em {0}\", server.ListeningPrefixes[0]); Console.WriteLine(\"Tente acessar o host B em {0}\", server.ListeningPrefixes[1]); Thread.Sleep(-1); }"
  },
  "docs/pt-br/advanced/request-lifecycle.html": {
    "href": "docs/pt-br/advanced/request-lifecycle.html",
    "title": "Clico de vida da requisição | Sisk Framework",
    "keywords": "Clico de vida da requisição Este diagrama explica o processo de vida de uma solicitação HTTP desde o momento em que chega ao servidor até ser entregue ao cliente."
  },
  "docs/pt-br/changelogs.html": {
    "href": "docs/pt-br/changelogs.html",
    "title": "Histórico de Versões | Sisk Framework",
    "keywords": "Histórico de Versões Todas as alterações feitas no Sisk são registradas no histórico de versões. Você pode visualizar os históricos de versões para todas as versões do Sisk aqui."
  },
  "docs/pt-br/deploying.html": {
    "href": "docs/pt-br/deploying.html",
    "title": "Implantação de aplicações Sisk | Sisk Framework",
    "keywords": "Implantação de aplicações Sisk O processo de implantação de um aplicativo Sisk consiste em publicar seu projeto em produção. Embora o processo seja relativamente simples, vale ressaltar detalhes que podem ser letais para a segurança e estabilidade da infraestrutura do deployment. Idealmente, você deve estar pronto para implantar seu aplicativo na nuvem, após realizar todos os testes possíveis para ter seu aplicativo pronto. Publicando seu aplicativo Publicar seu aplicativo ou serviço Sisk consiste em gerar binários prontos e otimizados para produção. Neste exemplo, compilaremos os binários para produção para serem executados em uma máquina que tenha o .NET Runtime instalado na máquina. Você precisará do .NET SDK instalado em sua máquina para compilar seu aplicativo e do .NET Runtime instalado no servidor de destino para executar seu aplicativo. Você pode aprender como instalar o .NET Runtime em seu servidor Linux aqui, Windows e Mac OS. Na pasta onde seu projeto está localizado, abra um terminal e use o comando .NET publish: dotnet publish -r linux-x64 -c Release Isso irá gerar seus binários dentro de bin/Release/publish/linux-x64. Note Se seu aplicativo estiver sendo executado usando o pacote Sisk.ServiceProvider, você deve copiar seu service-config.json para o servidor host junto com todos os binários gerados por dotnet publish. Você pode deixar o arquivo pré-configurado, com variáveis de ambiente, portas de escuta e hosts, e configurações adicionais do servidor. O próximo passo é levar esses arquivos para o servidor onde seu aplicativo será hospedado. Depois disso, dê permissões de execução para seu arquivo binário. Neste caso, vamos considerar que o nome do nosso projeto é \"meu-app\": cd /home/htdocs chmod +x meu-app ./meu-app Depois de executar seu aplicativo, verifique se ele produz alguma mensagem de erro. Se não produzir, significa que seu aplicativo está em execução. Neste ponto, provavelmente não será possível acessar seu aplicativo por rede externa fora do seu servidor, pois regras de acesso como Firewall não foram configuradas. Consideraremos isso nos próximos passos. Você deve ter o endereço do host virtual onde seu aplicativo está ouvindo. Isso é definido manualmente no aplicativo e depende de como você está instanciando seu serviço Sisk. Se você não estiver usando o pacote Sisk.ServiceProvider, você deve encontrá-lo onde definiu sua instância HttpServer: HttpServer server = HttpServer.Emit(5000, out HttpServerConfiguration config, out var host, out var router); // sisk deve escutar em http://localhost:5000/ Associando um ListeningHost manualmente: config.ListeningHosts.Add(new ListeningHost(\"https://localhost:5000/\", router)); Ou se você estiver usando o pacote Sisk.ServiceProvider, em seu service-config.json: { \"Server\": { }, \"ListeningHost\": { \"Ports\": [ \"http://localhost:5000/\" ] } } A partir daqui, podemos criar um proxy inverso para escutar seu serviço e tornar o tráfego disponível na rede aberta. Proximando seu aplicativo Proximar seu serviço significa não expor diretamente seu serviço Sisk a uma rede externa. Essa prática é muito comum para implantações de servidor porque: Permite associar um certificado SSL ao seu aplicativo; Cria regras de acesso antes de acessar o serviço e evita sobrecargas; Controle de largura de banda e limites de solicitações; Separação de balanceadores de carga para seu aplicativo; Previne danos à segurança de infraestruturas com falhas. Você pode servir seu aplicativo através de um proxy inverso como Nginx ou Apache, ou você pode usar um túnel http-over-dns como Cloudflared. Lembre-se também de resolver corretamente os cabeçalhos de encaminhamento do seu proxy para obter as informações do seu cliente, como endereço IP e host, através de resolvers de encaminhamento. O próximo passo após criar seu túnel, configuração do firewall e ter seu aplicativo em execução é criar um serviço para seu aplicativo. Note O uso de certificados SSL diretamente no serviço Sisk em sistemas operacionais não Windows não é possível. Este é um ponto da implementação do HttpListener, que é o módulo central para como o gerenciamento de fila HTTP é feito no Sisk, e essa implementação varia de sistema operacional para sistema operacional. Você pode usar SSL em seu serviço Sisk se associar um certificado ao host virtual com IIS. Para outros sistemas, o uso de um proxy inverso é altamente recomendado. Criando um serviço Criar um serviço fará com que seu aplicativo esteja sempre disponível, mesmo após reiniciar a instância do seu servidor ou uma falha irrecuperável. Neste tutorial simples, usaremos o conteúdo do tutorial anterior como um showcase para manter seu serviço sempre ativo. Acesse a pasta onde os arquivos de configuração do serviço estão localizados: cd /etc/systemd/system Crie seu arquivo meu-app.service e inclua o conteúdo: [Unit] Description=<descrição sobre seu aplicativo> [Service] # defina o usuário que iniciará o serviço User=<usuário que iniciará o serviço> # o ExecStart é não relativo ao WorkingDirectory. # defina-o como o caminho completo para o arquivo executável WorkingDirectory=/home/htdocs ExecStart=/home/htdocs/meu-app # defina o serviço para reiniciar sempre em caso de falha Restart=always RestartSec=3 [Install] WantedBy=multi-user.target Reinicie o módulo gerenciador de serviços: sudo systemctl daemon-reload Inicie seu novo serviço criado a partir do nome do arquivo que você definiu e verifique se eles estão em execução: sudo systemctl start meu-app sudo systemctl status meu-app Agora, se seu aplicativo estiver em execução (\"Active: active\"), habilite seu serviço para mantê-lo em execução após uma reinicialização do sistema: sudo systemctl enable meu-app Agora você está pronto para apresentar seu aplicativo Sisk a todos."
  },
  "docs/pt-br/extensions/basic-auth.html": {
    "href": "docs/pt-br/extensions/basic-auth.html",
    "title": "Autenticação Básica | Sisk Framework",
    "keywords": "Autenticação Básica O pacote Basic Auth adiciona um processador de solicitações capaz de lidar com o esquema de autenticação básica em seu aplicativo Sisk com pouca configuração e esforço. A autenticação HTTP básica é uma forma mínima de entrada de autenticação de solicitações por um ID de usuário e senha, onde a sessão é controlada exclusivamente pelo cliente e não há tokens de autenticação ou acesso. Leia mais sobre o esquema de autenticação básica na especificação MDN. Instalando Para começar, instale o pacote Sisk.BasicAuth em seu projeto: > dotnet add package Sisk.BasicAuth Você pode visualizar mais maneiras de instalá-lo em seu projeto no repositório Nuget. Criando seu manipulador de autenticação Você pode controlar o esquema de autenticação para um módulo inteiro ou para rotas individuais. Para isso, primeiro vamos escrever nosso primeiro manipulador de autenticação básica. No exemplo abaixo, uma conexão é feita com o banco de dados, verifica se o usuário existe e se a senha é válida e, em seguida, armazena o usuário na bolsa de contexto. public class UserAuthHandler : BasicAuthenticateRequestHandler { public UserAuthHandler() : base() { Realm = \"Para entrar nesta página, informe suas credenciais.\"; } public override HttpResponse? OnValidating(BasicAuthenticationCredentials credentials, HttpContext context) { DbContext db = new DbContext(); // neste caso, estamos usando o email como campo de ID de usuário, então vamos // procurar um usuário usando seu email. User? user = db.Users.FirstOrDefault(u => u.Email == credentials.UserId); if (user == null) { return base.CreateUnauthorizedResponse(\"Desculpe! Nenhum usuário foi encontrado por este email.\"); } // valida que a senha das credenciais é válida para este usuário. if (!user.ValidatePassword(credentials.Password)) { return base.CreateUnauthorizedResponse(\"Credenciais inválidas.\"); } // adiciona o usuário logado ao contexto HTTP // e continua a execução context.Bag.Add(\"loggedUser\", user); return null; } } Então, basta associar este manipulador de solicitações à nossa rota ou classe. public class UsersController { [RouteGet(\"/\")] [RequestHandler(typeof(UserAuthHandler))] public string Index(HttpRequest request) { User loggedUser = (User)request.Context.RequestBag[\"loggedUser\"]; return \"Olá, \" + loggedUser.Name + \"!\"; } } Ou usando a classe RouterModule: public class UsersController : RouterModule { public ClientModule() { // agora todas as rotas dentro desta classe serão tratadas por // UserAuthHandler. base.HasRequestHandler(new UserAuthHandler()); } [RouteGet(\"/\")] public string Index(HttpRequest request) { User loggedUser = (User)request.Context.RequestBag[\"loggedUser\"]; return \"Olá, \" + loggedUser.Name + \"!\"; } } Observações A principal responsabilidade da autenticação básica é realizada no lado do cliente. Armazenamento, controle de cache e criptografia são todos gerenciados localmente no cliente. O servidor apenas recebe as credenciais e valida se o acesso é permitido ou não. Observe que este método não é uma das soluções mais seguras porque coloca uma responsabilidade significativa no cliente, o que pode ser difícil de rastrear e manter a segurança de suas credenciais. Além disso, é essencial que as senhas sejam transmitidas em um contexto de conexão segura (SSL), pois elas não possuem nenhuma criptografia inerente. Uma breve interceptação nos cabeçalhos de uma solicitação pode expor as credenciais de acesso do seu usuário. Opte por soluções de autenticação mais robustas para aplicativos em produção e evite usar muitos componentes prontos para uso, pois eles podem não se adaptar às necessidades do seu projeto e acabar expondo-o a riscos de segurança."
  },
  "docs/pt-br/extensions/ini-configuration.html": {
    "href": "docs/pt-br/extensions/ini-configuration.html",
    "title": "Fornecedor de configuração INI | Sisk Framework",
    "keywords": "Fornecedor de configuração INI O Sisk possui um método para obter configurações de inicialização além do JSON. Na verdade, qualquer pipeline que implemente IConfigurationReader pode ser usado com PortableConfigurationBuilder.WithConfigurationPipeline, lendo a configuração do servidor de qualquer tipo de arquivo. O pacote Sisk.IniConfiguration fornece um leitor de arquivos INI baseados em stream que não lança exceções para erros de sintaxe comuns e possui uma sintaxe de configuração simples. Este pacote pode ser usado fora do framework Sisk, oferecendo flexibilidade para projetos que exigem um leitor de documentos INI eficiente. Instalando Para instalar o pacote, você pode começar com: $ dotnet add package Sisk.IniConfiguration e usá-lo em seu código como mostrado no exemplo abaixo: class Program { static HttpServerHostContext Host = null!; static void Main(string[] args) { Host = HttpServer.CreateBuilder() .UsePortableConfiguration(config => { config.WithConfigFile(\"app.ini\", createIfDontExists: true); // adiciona o IniConfigurationPipeline ao leitor de configuração config.WithConfigurationPipeline<IniConfigurationPipeline>(); }) .UseRouter(r => { r.MapGet(\"/\", SayHello); }) .Build(); Host.Start(); } static HttpResponse SayHello(HttpRequest request) { string? name = Host.Parameters[\"name\"] ?? \"world\"; return new HttpResponse($\"Hello, {name}!\"); } } O código acima procurará por um arquivo app.ini no diretório atual do processo (CurrentDirectory). O arquivo INI parece este: [Server] # Múltiplas endereços de escuta são suportados Listen = http://localhost:5552/ Listen = http://localhost:5553/ ThrowExceptions = false AccessLogsStream = console [Cors] AllowMethods = GET, POST AllowHeaders = Content-Type, Authorization AllowOrigin = * [Parameters] Name = \"Kanye West\" Sabor INI e sintaxe Sabor de implementação atual: Nomes de propriedades e seções são insensíveis a maiúsculas e minúsculas. Nomes de propriedades e valores são recortados. Os valores podem ser entre aspas simples ou duplas. As aspas podem ter quebras de linha dentro delas. Comentários são suportados com # e ;. Também são permitidos comentários de trailling. As propriedades podem ter vários valores. Em detalhes, a documentação para o \"sabor\" do parser INI usado no Sisk está disponível no GitHub. Usando o seguinte código ini como exemplo: One = 1 Value = this is an value Another value = \"this value has an line break on it\" ; the code below has some colors [some section] Color = Red Color = Blue Color = Yellow ; do not use yellow Analise-o com: // analisa o texto ini da string IniDocument doc = IniDocument.FromString(iniText); // obtém um valor string? one = doc.Global.GetOne(\"one\"); string? anotherValue = doc.Global.GetOne(\"another value\"); // obtém vários valores string[]? colors = doc.GetSection(\"some section\")?.GetMany(\"color\"); Parâmetros de configuração Seção e nome Permitir vários valores Descrição Server.Listen Sim Os endereços/portos de escuta do servidor. Server.Encoding Não A codificação padrão do servidor. Server.MaximumContentLength Não O tamanho máximo de conteúdo do servidor em bytes. Server.IncludeRequestIdHeader Não Especifica se o servidor HTTP deve enviar o cabeçalho X-Request-Id. Server.ThrowExceptions Não Especifica se exceções não tratadas devem ser lançadas. Server.AccessLogsStream Não Especifica o fluxo de saída do log de acesso. Server.ErrorsLogsStream Não Especifica o fluxo de saída do log de erros. Cors.AllowMethods Não Especifica o valor do cabeçalho CORS Allow-Methods. Cors.AllowHeaders Não Especifica o valor do cabeçalho CORS Allow-Headers. Cors.AllowOrigins Não Especifica múltiplos cabeçalhos Allow-Origin, separados por vírgulas. AllowOrigins para mais informações. Cors.AllowOrigin Não Especifica um cabeçalho Allow-Origin. Cors.ExposeHeaders Não Especifica o valor do cabeçalho CORS Expose-Headers. Cors.AllowCredentials Não Especifica o valor do cabeçalho CORS Allow-Credentials. Cors.MaxAge Não Especifica o valor do cabeçalho CORS Max-Age."
  },
  "docs/pt-br/extensions/json-rpc.html": {
    "href": "docs/pt-br/extensions/json-rpc.html",
    "title": "Sisk + JSON-RPC | Sisk Framework",
    "keywords": "Sisk + JSON-RPC Sisk possui um módulo experimental de uma API JSON-RPC 2.0, o que possibilita criar aplicações ainda mais simples. Essa extensão implementa extritamente a interface de transporte JSON-RPC 2.0, e oferece transporte via requisições HTTP GET, POST e também web-sockets com Sisk. Você pode instalar a extensão pelo Nuget com o comando abaixo. Note que, em versões experimentais/betas, deverá ser ativado a opção de buscar por pacotes em pré-lançamento pelo Visual Studio. dotnet add package Sisk.JsonRpc Interface de transporte O JSON-RPC é um protocolo de execução remota de procedimentos (RDP) sem estado, assíncrono, e utiliza o JSON para comunicação unilateral dos dados. Uma requisição JSON-RPC é normalmente identificada por um ID, e uma resposta é entregue pelo mesmo ID que foi enviado na requisição. Nem todas as requisições são necessárias de resposta, o que são chamadas de \"notificações\". Na especificação do JSON-RPC 2.0 é explicado com detalhes como o transporte funciona. Este transporte é agnóstico de onde será usado. O Sisk implementa esse protocolo através do HTTP, seguindo as conformidades do JSON-RPC over HTTP, que suporta parcialmente requisições GET, mas completamente requisições POST. Também é suportado o uso de web-sockets, o que provê uma comunicação assíncrona de mensagens. Uma requisição JSON-RPC é parecida com: { \"jsonrpc\": \"2.0\", \"method\": \"Sum\", \"params\": [1, 2, 4], \"id\": 1 } E uma resposta, quando bem-sucedida, é semelhante: { \"jsonrpc\": \"2.0\", \"result\": 7, \"id\": 1 } Métodos JSON-RPC O exemplo a seguir mostra como criar uma API JSON-RPC usando o Sisk. Uma classe de operações matemáticas realiza as operações remotas e entrega a resposta serializada ao cliente. using var app = HttpServer.CreateBuilder(port: 5555) .UseJsonRPC((sender, args) => { // add all methods tagged with WebMethod to the JSON-RPC handler args.Handler.Methods.AddMethodsFromType(new MathOperations()); // maps the /service route to handle JSON-RPC POST and GET requests args.Router.MapPost(\"/service\", args.Handler.Transport.HttpPost); args.Router.MapGet(\"/service\", args.Handler.Transport.HttpGet); // creates an websocket handler on GET /ws args.Router.MapGet(\"/ws\", request => { var ws = request.GetWebSocket(); ws.OnReceive += args.Handler.Transport.WebSocket; ws.WaitForClose(timeout: TimeSpan.FromSeconds(30)); return ws.Close(); }); }) .Build(); await app.StartAsync(); public class MathOperations { [WebMethod] public float Sum(float a, float b) { return a + b; } [WebMethod] public double Sqrt(float a) { return Math.Sqrt(a); } } O exemplo acima irá mapear os métodos Sum e Sqrt para o handler JSON-RPC, e estes métodos ficarão disponíveis no GET /service, POST /service e GET /ws. O nome dos métodos não são sensíveis a caso. Os parâmetros dos métodos são deserializados automaticamente para seus tipos específicos. Usar uma requisição com parâmetros nomeados também é suportado. A serialização JSON é feita pela biblioteca LightJson. Quando um tipo não é corretamente deserializado, você poderá criar um conversor JSON específico para aquele tipo e associar ele em seu JsonSerializerOptions posteriormente. Você também pode obter o objeto $.params cru da requisição JSON-RPC diretamente no seu método. [WebMethod] public float Sum(JsonArray|JsonObject @params) { ... } Para isso ocorrer, @params deve ser o único parâmetro no seu método, com exatamente o nome params (em C#, o @ é necessário para escapar o nome deste parâmetro). A deserialização dos parâmetros ocorre tanto para objetos nomeados ou para arrays posicionais. Por exemplo, o método abaixo pode ser chamado remotamente por ambas requisições: [WebMethod] public float AddUserToStore(string apiKey, User user, UserStore store) { ... } Por um objeto em params não é necessário seguir a ordem dos parâmetros: { \"jsonrpc\": \"2.0\", \"method\": \"AddUserToStore\", \"params\": { \"apiKey\": \"1234567890\", \"store\": { \"name\": \"My Store\" }, \"user\": { \"name\": \"John Doe\", \"email\": \"john@example.com\" } }, \"id\": 1 } Por array é necessário seguir a ordem dos parâmetros. { \"jsonrpc\": \"2.0\", \"method\": \"AddUserToStore\", \"params\": [ \"1234567890\", { \"name\": \"John Doe\", \"email\": \"john@example.com\" }, { \"name\": \"My Store\" } ], \"id\": 1 } Personalizando o serializer Você pode personalizar o serializador JSON na propriedade JsonRpcHandler.JsonSerializerOptions. Nessa propriedade, você pode ativar o uso de JSON5 para deserialização de mensagens. Por mais que não é conformidade com o JSON-RPC 2.0, JSON5 é uma extensão do JSON que permite uma escrita mais humanizada e legível. using var host = HttpServer.CreateBuilder ( 5556 ) .UseJsonRPC ( ( o, e ) => { // usa um comparador de nomes sanitizado. esse comparador compara apenas letras // e dígitos em um nome, e descarta outros símbolos. ex: // foo_bar10 == FooBar10 e.Handler.JsonSerializerOptions.PropertyNameComparer = new JsonSanitizedComparer (); // habilita JSON5 para o interpretador JSON. mesmo ativando isso, JSON plano ainda é permitido e.Handler.JsonSerializerOptions.SerializationFlags = LightJson.Serialization.JsonSerializationFlags.Json5; // mapeia a rota POST /service para o handler JSON RPC e.Router.MapPost ( \"/service\", e.Handler.Transport.HttpPost ); } ) .Build (); host.Start ();"
  },
  "docs/pt-br/extensions/service-providers.html": {
    "href": "docs/pt-br/extensions/service-providers.html",
    "title": "Service Providers | Sisk Framework",
    "keywords": "Service Providers Service Providers é uma forma de portar sua aplicação Sisk para diferentes ambientes com um arquivo de configuração portátil. Este recurso possibilita alterar funcionamento de portas, parâmetros e demais opções do servidor sem ter que alterar o código do aplicativo para cada ambiente. Este módulo depende da sintaxe de construção do Sisk e pode ser configurada através do método UsePortableConfiguration. Um provedor de configuração é implementado com IConfigurationProvider, o que provê um leitor de configurações e pode receber qualquer implementação. Por padrão, o Sisk fornece um leitor de configurações em JSON, mas também existe um pacote para arquivos INI. Você também pode criar seu próprio provedor de configurações e registrar com: using var app = HttpServer.CreateBuilder() .UsePortableConfiguration(config => { config.WithConfigReader<MyConfigurationReader>(); }) .Build(); Como mencionado anteriormente, o provedor padrão é de um arquivo JSON. Por padrão, o nome do arquivo buscado é service-config.json, e é buscado na pasta atual (Current Directory) do processo em execução, e não do diretório do executável. Você pode optar em alterar o nome do arquivo, bem como onde o Sisk deve procurar pelo arquivo de configuração, com: using Sisk.Core.Http; using Sisk.Core.Http.Hosting; using var app = HttpServer.CreateBuilder() .UsePortableConfiguration(config => { config.WithConfigFile(\"config.toml\", createIfDontExists: true, lookupDirectories: ConfigurationFileLookupDirectory.CurrentDirectory | ConfigurationFileLookupDirectory.AppDirectory); }) .Build(); O código acima irá procurar o arquivo config.toml na pasta atual do processo em execução. Se não encontrado o arquivo, irá então buscar no diretório de onde o executável está localizado. Caso o arquivo não exista, o parâmetro createIfDontExists é honrado, criando o arquivo, sem nenhum conteúdo, no último caminho testado (com base em lookupDirectories), e um erro é lançado no console, impedindo a inicialização do aplicativo. Tip Você pode olhar no código fonte do leitor de configurações de arquivos INI e no de JSON para entender como um IConfigurationProvider é implementado. Lendo configurações de um arquivo JSON Por padrão, o Sisk fornece um provedor de configuração que lê configurações em um arquivo JSON. Este arquivo segue uma estrutura fixa e é composto pelos parâmetros: { \"Server\": { \"DefaultEncoding\": \"UTF-8\", \"ThrowExceptions\": true, \"IncludeRequestIdHeader\": true }, \"ListeningHost\": { \"Label\": \"My sisk application\", \"Ports\": [ \"http://localhost:80/\", \"https://localhost:443/\", // Configuration files also supports comments ], \"CrossOriginResourceSharingPolicy\": { \"AllowOrigin\": \"*\", \"AllowOrigins\": [ \"*\" ], // new on 0.14 \"AllowMethods\": [ \"*\" ], \"AllowHeaders\": [ \"*\" ], \"MaxAge\": 3600 }, \"Parameters\": { \"MySqlConnection\": \"server=localhost;user=root;\" } } } Os parâmetros criados a partir de um arquivo de configurações pode ser acessado no construtor do servidor: using var app = HttpServer.CreateBuilder() .UsePortableConfiguration(config => { config.WithParameters(paramCollection => { string databaseConnection = paramCollection.GetValueOrThrow(\"MySqlConnection\"); }); }) .Build(); Cada leitor de configurações fornece uma forma de ler os parâmetros de inicialização do servidor. Algumas propriedades são indicadas a ficarem no ambiente do processo ao invés de serem definidas no arquivo de configuração, como por exemplo, dados sensíveis de API, chaves de API, etc. Estrutura de arquivo de configuração O arquivo de configuração JSON é composto pelas propriedades: Property Mandatory Description Server Required Represents the server itself with their settings. Server.AccessLogsStream Optional Default to console. Specifies the access log output stream. Can be an filename, null or console. Server.ErrorsLogsStream Optional Default to null. Specifies the error log output stream. Can be an filename, null or console. Server.MaximumContentLength Optional Default to 0. Specifies the maximum content length in bytes. Zero means infinite. Server.IncludeRequestIdHeader Optional Default to false. Specifies if the HTTP server should send the X-Request-Id header. Server.ThrowExceptions Optional Default to true. Specifies if unhandled exceptions should be thrown. Set to false when production and true when debugging. ListeningHost Required Represents the server listening host. ListeningHost.Label Optional Represents the application label. ListeningHost.Ports Required Represents an array of strings, matching the ListeningPort syntax. ListeningHost.CrossOriginResourceSharingPolicy Optional Setup the CORS headers for the application. ListeningHost.CrossOriginResourceSharingPolicy.AllowCredentials Optional Defaults to false. Specifies the Allow-Credentials header. ListeningHost.CrossOriginResourceSharingPolicy.ExposeHeaders Optional Defaults to null. This property expects an array of strings. Specifies the Expose-Headers header. ListeningHost.CrossOriginResourceSharingPolicy.AllowOrigin Optional Defaults to null. This property expects an string. Specifies the Allow-Origin header. ListeningHost.CrossOriginResourceSharingPolicy.AllowOrigins Optional Defaults to null. This property expects an array of strings. Specifies multiples Allow-Origin headers. See AllowOrigins for more information. ListeningHost.CrossOriginResourceSharingPolicy.AllowMethods Optional Defaults to null. This property expects an array of strings. Specifies the Allow-Methods header. ListeningHost.CrossOriginResourceSharingPolicy.AllowHeaders Optional Defaults to null. This property expects an array of strings. Specifies the Allow-Headers header. ListeningHost.CrossOriginResourceSharingPolicy.MaxAge Optional Defaults to null. This property expects an interger. Specifies the Max-Age header in seconds. ListeningHost.Parameters Optional Specifies the properties provided to the application setup method."
  },
  "docs/pt-br/extensions/ssl-proxy.html": {
    "href": "docs/pt-br/extensions/ssl-proxy.html",
    "title": "Proxy SSL | Sisk Framework",
    "keywords": "Proxy SSL Warning Este recurso é experimental e não deve ser usado em produção. Consulte este documento se quiser fazer o Sisk funcionar com SSL. O Proxy SSL do Sisk é um módulo que fornece uma conexão HTTPS para um ListeningHost no Sisk e roteia mensagens HTTPS para um contexto HTTP inseguro. O módulo foi construído para fornecer conexão SSL para um serviço que usa HttpListener para executar, que não suporta SSL. O proxy é executado dentro do mesmo aplicativo e escuta por mensagens HTTP/1.1, encaminhando-as para o Sisk no mesmo protocolo. Atualmente, esse recurso é altamente experimental e pode ser instável o suficiente para não ser usado em produção. No momento, o SslProxy suporta quase todos os recursos HTTP/1.1, como keep-alive, codificação chunked, websockets, etc. Para uma conexão aberta ao proxy SSL, uma conexão TCP é criada para o servidor de destino e o proxy é encaminhado para a conexão estabelecida. O SslProxy pode ser usado com HttpServer.CreateBuilder da seguinte forma: using var app = HttpServer.CreateBuilder(port: 5555) .UseRouter(r => { r.MapGet(\"/\", request => { return new HttpResponse(\"Hello, world!\"); }); }) // adicionar SSL ao projeto .UseSsl( sslListeningPort: 5567, new X509Certificate2(@\".\\ssl.pfx\", password: \"12345\") ) .Build(); app.Start(); Você deve fornecer um certificado SSL válido para o proxy. Para garantir que o certificado seja aceito pelos navegadores, lembre-se de importá-lo no sistema operacional para que ele funcione corretamente."
  },
  "docs/pt-br/features/discard-syntax.html": {
    "href": "docs/pt-br/features/discard-syntax.html",
    "title": "Sintaxe de descarte | Sisk Framework",
    "keywords": "Sintaxe de descarte O servidor HTTP pode ser usado para escutar uma solicitação de retorno de uma ação, como autenticação OAuth, e pode ser descartado após receber essa solicitação. Isso pode ser útil em casos em que você precisa de uma ação em segundo plano, mas não deseja configurar um aplicativo HTTP inteiro para isso. O exemplo a seguir mostra como criar um servidor HTTP ouvindo na porta 5555 com CreateListener e aguardar o próximo contexto: using (var server = HttpServer.CreateListener(5555)) { // aguardar a próxima solicitação HTTP var context = await server.WaitNextAsync(); Console.WriteLine($\"Caminho solicitado: {context.Request.Path}\"); } A função WaitNext aguarda o próximo contexto de um processamento de solicitação concluído. Uma vez que o resultado dessa operação é obtido, o servidor já tratou completamente a solicitação e enviou a resposta para o cliente."
  },
  "docs/pt-br/features/instancing.html": {
    "href": "docs/pt-br/features/instancing.html",
    "title": "Instanciando membros por solicitação | Sisk Framework",
    "keywords": "Instanciando membros por solicitação É comum dedicar membros e instâncias que duram por toda a vida de uma solicitação, como uma conexão com banco de dados, um usuário autenticado ou um token de sessão. Uma das possibilidades é através do HttpContext.RequestBag, que cria um dicionário que dura por toda a vida de uma solicitação. Este dicionário pode ser acessado por tratadores de solicitação e definir variáveis ​​durante toda a solicitação. Por exemplo, um tratador de solicitação que autentica um usuário define esse usuário dentro do HttpContext.RequestBag, e dentro da lógica da solicitação, esse usuário pode ser recuperado com HttpContext.RequestBag.Get<User>(). Aqui está um exemplo: public class AuthenticateUser : IRequestHandler { public RequestHandlerExecutionMode ExecutionMode { get; init; } = RequestHandlerExecutionMode.BeforeResponse; public HttpResponse? Execute(HttpRequest request, HttpContext context) { User authenticatedUser = AuthenticateUser(request); context.RequestBag.Set(authenticatedUser); return null; // avançar para o próximo tratador de solicitação ou lógica da solicitação } } [RouteGet(\"/hello\")] [RequestHandler<AuthenticateUser>] public static HttpResponse SayHello(HttpRequest request) { var authenticatedUser = request.Bag.Get<User>(); return new HttpResponse() { Content = new StringContent($\"Olá {authenticatedUser.Name}!\") }; } Este é um exemplo preliminar dessa operação. A instância de User foi criada dentro do tratador de solicitação dedicado à autenticação, e todas as rotas que usam esse tratador de solicitação terão a garantia de que haverá um User em sua instância de HttpContext.RequestBag. É possível definir lógica para obter instâncias quando não definidas anteriormente no RequestBag através de métodos como GetOrAdd ou GetOrAddAsync. Desde a versão 1.3, a propriedade estática HttpContext.Current foi introduzida, permitindo o acesso ao HttpContext atualmente em execução do contexto da solicitação. Isso permite expor membros do HttpContext fora do contexto da solicitação atual e definir instâncias em objetos de rota. O exemplo abaixo define um controlador que possui membros comumente acessados pelo contexto de uma solicitação. public abstract class Controller : RouterModule { public DbContext Database { get { // criar um DbContext ou obter o existente return HttpContext.Current.RequestBag.GetOrAdd(() => new DbContext()); } } // a linha seguinte lançará uma exceção se a propriedade for acessada quando o User não // estiver definido no bag da solicitação public User AuthenticatedUser { get => HttpContext.Current.RequestBag.Get<User>(); } // Expor a instância HttpRequest também é suportado public HttpRequest Request { get => HttpContext.Current.Request; } } E definir tipos que herdam do controlador: [RoutePrefix(\"/api/posts\")] public class PostsController : Controller { [RouteGet] public IEnumerable<Blog> ListPosts() { return Database.Posts .Where(post => post.AuthorId == AuthenticatedUser.Id) .ToList(); } [RouteGet(\"<id>\")] public Post GetPost() { int blogId = Request.RouteParameters[\"id\"].GetInteger(); Post? post = Database.Posts .FirstOrDefault(post => post.Id == blogId && post.AuthorId == AuthenticatedUser.Id); return post ?? new HttpResponse(404); } } Para o exemplo acima, você precisará configurar um tratador de valor no seu roteador para que os objetos retornados pelo roteador sejam transformados em um HttpResponse válido. Observe que os métodos não têm um argumento HttpRequest request como presente em outros métodos. Isso ocorre porque, desde a versão 1.3, o roteador suporta dois tipos de delegados para roteamento de respostas: RouteAction, que é o delegado padrão que recebe um argumento HttpRequest, e ParameterlessRouteAction. O objeto HttpRequest ainda pode ser acessado por ambos os delegados através da propriedade Request do HttpContext estático no thread. No exemplo acima, definimos um objeto descartável, o DbContext, e precisamos garantir que todas as instâncias criadas em um DbContext sejam descartadas quando a sessão HTTP terminar. Para isso, podemos usar duas maneiras de alcançar isso. Uma é criar um tratador de solicitação que é executado após a ação do roteador, e a outra maneira é através de um tratador de servidor personalizado. Para o primeiro método, podemos criar o tratador de solicitação inline diretamente no método OnSetup herdado de RouterModule: public abstract class Controller : RouterModule { ... protected override void OnSetup(Router parentRouter) { base.OnSetup(parentRouter); HasRequestHandler(RequestHandler.Create( execute: (req, ctx) => { // obter um DbContext definido no contexto do tratador de solicitação e // descartá-lo ctx.RequestBag.GetOrDefault<DbContext>()?.Dispose(); return null; }, executionMode: RequestHandlerExecutionMode.AfterResponse)); } } O método acima garantirá que o DbContext seja descartado quando a sessão HTTP for finalizada. Você pode fazer isso para mais membros que precisam ser descartados no final de uma resposta. Para o segundo método, você pode criar um tratador de servidor personalizado que descartará o DbContext quando a sessão HTTP for finalizada. public class ObjectDisposerHandler : HttpServerHandler { protected override void OnHttpRequestClose(HttpServerExecutionResult result) { result.Context.RequestBag.GetOrDefault<DbContext>()?.Dispose(); } } E usá-lo no seu construtor: using var host = HttpServer.CreateBuilder() .UseHandler<ObjectDisposerHandler>() .Build(); Esta é uma maneira de lidar com a limpeza de código e manter as dependências de uma solicitação separadas pelo tipo de módulo que será usado, reduzindo a quantidade de código duplicado dentro de cada ação de um roteador. É uma prática semelhante ao que a injeção de dependência é usada em frameworks como ASP.NET."
  },
  "docs/pt-br/features/logging.html": {
    "href": "docs/pt-br/features/logging.html",
    "title": "Log | Sisk Framework",
    "keywords": "Log Você pode configurar o Sisk para escrever logs de acesso e erros automaticamente. É possível definir rotação de logs, extensões e frequência. A classe LogStream fornece uma maneira assíncrona de escrever logs e mantê-los em uma fila de escrita aguarda. Neste artigo, mostraremos como configurar o log para seu aplicativo. Logs de acesso baseados em arquivo Logs para arquivos abrem o arquivo, escrevem o texto da linha e, em seguida, fecham o arquivo para cada linha escrita. Este procedimento foi adotado para manter a responsividade de escrita nos logs. config.AccessLogsStream = new LogStream(\"logs/access.log\"); O código acima escreverá todas as solicitações recebidas no arquivo logs/access.log. Observe que o arquivo é criado automaticamente se não existir, mas a pasta anterior não. Não é necessário criar o diretório logs/ pois a classe LogStream o cria automaticamente. Logamento baseado em stream Você pode escrever arquivos de log para instâncias de objetos TextWriter, como Console.Out, passando um objeto TextWriter no construtor: config.AccessLogsStream = new LogStream(Console.Out); Para cada mensagem escrita no log baseado em stream, o método TextWriter.Flush() é chamado. Formatação do log de acesso Você pode personalizar o formato do log de acesso usando variáveis predefinidas. Considere a seguinte linha: config.AccessLogsFormat = \"%dd/%dmm/%dy %tH:%ti:%ts %tz %ls %ri %rs://%ra%rz%rq [%sc %sd] %lin -> %lou in %lmsms [%{user-agent}]\"; Ele escreverá uma mensagem como: 29/mar./2023 15:21:47 -0300 Executed ::1 http://localhost:5555/ \\[200 OK\\] 689B -> 707B in 84ms \\[Mozilla/5.0 (Windows NT 10.0; Win64; x64) Chrome/111.0.0.0 Safari/537.36\\] Você pode formatar seu arquivo de log de acordo com a tabela descrita: Variável Descrição Exemplo %dd O dia do timestamp atual, no formato 00. 25 %dm O mês do timestamp atual, no formato 00. 03 %dmm O mês do timestamp atual, no formato abreviado. mar. %dmmm O mês do timestamp atual, no formato completo. Março %dy O ano do timestamp atual, no formato 0000. 2023 %th A hora atual do timestamp, no formato de 12 horas. 03 %tH A hora atual do timestamp, no formato de 24 horas. 15 %ti Os minutos atuais do timestamp, no formato 00. 25 %ts Os segundos atuais do timestamp, no formato 00. 32 %tm Os milissegundos atuais do timestamp, no formato 000. 633 %tz A diferença de fuso horário atual, no formato +/- 0000. +0300, -0500, +0000 %ri O endereço IP do usuário solicitante (pode ser IPv4 ou IPv6). 192.168.0.1 %rm O método de solicitação em maiúsculas. GET %rs O esquema do URL do usuário solicitante. https, http %ra A autoridade do URL do usuário solicitante. my.contorso.com:8080 %rh O host do URL do usuário solicitante. my.contorso.com %rp A porta do URL do usuário solicitante. 8080 %rz O caminho absoluto do URL do usuário solicitante. /index.html %rq A cadeia de consulta do URL do usuário solicitante. ?foo=bar&aaa=bbb %sc O código de status da resposta, no formato 000. 404 %sd A descrição do código de status da resposta. Não encontrado %lin O tamanho do conteúdo da solicitação entrante, em uma forma legível por humanos. 12,5kb %lou O tamanho do conteúdo da resposta saindo, em uma forma legível por humanos. 65,8kb %lms O tempo de processamento do servidor da solicitação e entrega da resposta, em milissegundos (000). 18 %{header} Obtém o valor de um cabeçalho HTTP, onde o cabeçalho é o nome do cabeçalho, ou um valor vazio se o cabeçalho não estiver presente. Este campo é insensível a maiúsculas e minúsculas. %{user-agent} Rotação de logs Tip Em Sisk 0.15 e versões anteriores, essa função está disponível apenas com o pacote Sisk.ServiceProvider. Em Sisk 0.16 e versões posteriores, essa função é implementada no pacote principal. Você pode configurar o servidor HTTP para rotar os arquivos de log para um arquivo .gz compactado quando eles atingirem um determinado tamanho. O tamanho é verificado periodicamente pelo limiar que você define. config.AccessLogsStream = new LogStream(\"access.log\"); var rotater = new RotatingLogPolicy(config.AccessLogsStream); rotater.Configure(1024 * 1024, TimeSpan.FromHours(6)); O código acima verificará a cada seis horas se o arquivo do LogStream tenha atingido o limite de 1 MB. Se sim, o arquivo é compactado para um arquivo .gz e, em seguida, access.log é limpo. Durante esse processo, a escrita no arquivo é bloqueada até que o arquivo seja compactado e limpo. Todas as linhas que entram para serem escritas neste período ficarão em uma fila aguardando o final da compactação. Essa função funciona apenas com LogStreams baseados em arquivos. Log de erros Quando um servidor não está lançando erros para o depurador, ele encaminha os erros para o log de escrita quando houver algum. Você pode configurar a escrita de erros com: config.ThrowExceptions = false; config.ErrorsLogsStream = new LogStream(\"error.log\"); Essa propriedade só escreverá algo no log se o erro não for capturado pelo callback ou pela propriedade Router.CallbackErrorHandler. O erro escrito pelo servidor sempre escreve a data e hora, os cabeçalhos da solicitação (não o corpo), o rastreamento de erros e o rastreamento de exceções internas, se houver. Outras instâncias de log Seu aplicativo pode ter zero ou várias LogStreams, não há limite para o número de canais de log que ele pode ter. Portanto, é possível direcionar o log do seu aplicativo para um arquivo diferente do log de acesso padrão ou do log de erros. LogStream appMessages = new LogStream(\"messages.log\"); appMessages.WriteLine(\"Application started at {0}\", DateTime.Now); Extensão de LogStream Você pode estender a classe LogStream para escrever formatos personalizados, compatíveis com o mecanismo de log atual do Sisk. O exemplo abaixo permite escrever mensagens coloridas no Console usando a biblioteca Spectre.Console. public class CustomLogStream : LogStream { protected override void WriteLineInternal(string line) { base.WriteLineInternal($\"[{DateTime.Now:g}] {line}\"); } } Outra maneira de escrever automaticamente logs personalizados para cada solicitação/resposta é criar um HttpServerHandler. O exemplo abaixo é um pouco mais completo. Ele escreve o corpo da solicitação e a resposta em JSON para o Console. Pode ser útil para depurar solicitações em geral. Este exemplo usa ContextBag e HttpServerHandler. class Program { static async Task Main(string[] args) { var app = HttpServer.CreateBuilder(host => { host.UseListeningPort(5555); host.UseHandler<JsonMessageHandler>(); }); app.Router += new Route(RouteMethod.Any, \"/json\", request => { return new HttpResponse() .WithContent(JsonContent.Create(new { method = request.Method.Method, path = request.Path, specialMessage = \"Hello, world!! \" })); }); await app.StartAsync(); } } class JsonMessageHandler : HttpServerHandler { protected override async void OnHttpRequestOpen(HttpRequest request) { if (request.Method != HttpMethod.Get && request.Headers[\"Content-Type\"]?.Contains(\"json\", StringComparison.InvariantCultureIgnoreCase) == true) { // Neste ponto, a conexão está aberta e o cliente enviou o cabeçalho especificando que o conteúdo é JSON. // O conteúdo é lido e armazenado na solicitação. // // Se o conteúdo não for lido na ação da solicitação, o GC provavelmente coletará o conteúdo após o envio da resposta para o cliente, então o conteúdo pode não estar disponível após o fechamento da resposta. // _ = request.RawBody; // adicionar uma dica no contexto para indicar que esta solicitação tem um corpo JSON. request.Bag.Add(\"IsJsonRequest\", true); } } protected override async void OnHttpRequestClose(HttpServerExecutionResult result) { string? requestJson = null, responseJson = null, responseMessage; if (result.Request.Bag.ContainsKey(\"IsJsonRequest\")) { // reformatted the JSON using the CypherPotato.LightJson library var content = result.Request.Body; requestJson = JsonValue.Deserialize(content, new JsonOptions() { WriteIndented = true }).ToString(); } if (result.Response is { } response) { var content = response.Content; responseMessage = $\"{(int)response.Status {HttpStatusInformation.GetStatusCodeDescription(response.Status)}\"; if (content is HttpContent httpContent && // check if the response is JSON httpContent.Headers.ContentType?.MediaType?.Contains(\"json\", StringComparison.InvariantCultureIgnoreCase) == true) { string json = await httpContent.ReadAsStringAsync(); responseJson = JsonValue.Deserialize(json, new JsonOptions() { WriteIndented = true }).ToString(); } } else { // gets the internal server handling status responseMessage = result.Status.ToString(); } StringBuilder outputMessage = new StringBuilder(); if (requestJson is not null) { outputMessage.AppendLine(\"-----\"); outputMessage.AppendLine($\">>> {result.Request.Method} {result.Request.Path}\"); if (requestJson is not null) outputMessage.AppendLine(requestJson); } outputMessage.AppendLine(\"<<< {responseMessage}\"); if (responseJson is not null) outputMessage.AppendLine(responseJson); outputMessage.AppendLine(\"-----\"); await Console.Out.WriteLineAsync(outputMessage.ToString()); } }"
  },
  "docs/pt-br/features/server-sent-events.html": {
    "href": "docs/pt-br/features/server-sent-events.html",
    "title": "Eventos Server-Sent-Events | Sisk Framework",
    "keywords": "Eventos Server-Sent-Events O Sisk suporta o envio de mensagens através de Eventos Envio de Servidor (SSE) diretamente. Você pode criar conexões descartáveis e persistentes, obter as conexões durante a execução e usá-las. Este recurso possui algumas limitações impostas por navegadores, como o envio apenas de mensagens de texto e a impossibilidade de fechar permanentemente uma conexão. Uma conexão fechada do lado do servidor terá um cliente tentando reconectar periodicamente a cada 5 segundos (3 para alguns navegadores). Essas conexões são úteis para enviar eventos do servidor para o cliente sem que o cliente precise solicitar a informação a cada vez. Criando uma conexão SSE Uma conexão SSE funciona como uma solicitação HTTP regular, mas em vez de enviar uma resposta e fechar a conexão imediatamente, a conexão é mantida aberta para enviar mensagens. Ao chamar o método HttpRequest.GetEventSource(), a solicitação é colocada em estado de espera enquanto a instância SSE é criada. r += new Route(RouteMethod.Get, \"/\", (req) => { var sse = req.GetEventSource(); sse.Send(\"Olá, mundo!\"); return sse.Close(); }); No código acima, criamos uma conexão SSE e enviamos uma mensagem \"Olá, mundo!\", então fechamos a conexão SSE do lado do servidor. Note Ao fechar uma conexão do lado do servidor, por padrão o cliente tentará se reconectar e a conexão será reiniciada, executando o método novamente, para sempre. É comum encaminhar uma mensagem de término do servidor sempre que a conexão é fechada do lado do servidor para evitar que o cliente tente se reconectar novamente. Adicionando cabeçalhos Se você precisar enviar cabeçalhos, pode usar o método HttpRequestEventSource.AppendHeader antes de enviar qualquer mensagem. r += new Route(RouteMethod.Get, \"/\", (req) => { var sse = req.GetEventSource(); sse.AppendHeader(\"Header-Key\", \"Header-value\"); sse.Send(\"Olá!\"); return sse.Close(); }); Observe que é necessário enviar os cabeçalhos antes de enviar qualquer mensagem. Conexões Wait-For-Fail As conexões são normalmente terminadas quando o servidor não consegue mais enviar mensagens devido a uma possível desconexão do cliente. Com isso, a conexão é automaticamente encerrada e a instância da classe é descartada. Mesmo com uma reconexão, a instância da classe não funcionará, pois está vinculada à conexão anterior. Em algumas situações, você pode precisar dessa conexão posteriormente e não deseja gerenciá-la através do método de callback da rota. Para isso, podemos identificar as conexões SSE com um identificador e obtê-las usando-o posteriormente, mesmo fora do callback da rota. Além disso, marcamos a conexão com WaitForFail para não terminar a rota e terminar a conexão automaticamente. Uma conexão SSE em KeepAlive aguardará um erro de envio (causado por desconexão) para recomeçar a execução do método. Também é possível definir um Timeout para isso. Após o tempo, se nenhuma mensagem foi enviada, a conexão é encerrada e a execução é retomada. r += new Route(RouteMethod.Get, \"/\", (req) => { var sse = req.GetEventSource(\"my-index-connection\"); sse.WaitForFail(TimeSpan.FromSeconds(15)); // aguardar 15 segundos sem nenhuma mensagem antes de terminar a conexão return sse.Close(); }); O método acima criará a conexão, a manejará e aguardará uma desconexão ou erro. HttpRequestEventSource? evs = server.EventSources.GetByIdentifier(\"my-index-connection\"); if (evs != null) { // a conexão ainda está ativa evs.Send(\"Olá novamente!\"); } E o trecho acima tentará procurar a conexão recém-criada e, se ela existir, enviará uma mensagem para ela. Todas as conexões ativas do servidor que forem identificadas estarão disponíveis na coleção HttpServer.EventSources. Esta coleção armazena apenas conexões ativas e identificadas. Conexões fechadas são removidas da coleção. Note É importante notar que o keep alive possui um limite estabelecido por componentes que podem estar conectados ao Sisk de forma não controlada, como um proxy web, um kernel HTTP ou um driver de rede, e eles fecham conexões inativas após um determinado período de tempo. Portanto, é importante manter a conexão aberta enviando pings periódicos ou estendendo o tempo máximo antes que a conexão seja fechada. Leia a próxima seção para entender melhor o envio de pings periódicos. Configuração da política de ping de conexões A Política de Ping é uma maneira automatizada de enviar mensagens periódicas para seu cliente. Essa função permite que o servidor entenda quando o cliente se desconectou dessa conexão sem precisar manter a conexão aberta indefinidamente. [RouteGet(\"/sse\")] public HttpResponse Events(HttpRequest request) { var sse = request.GetEventSource(); sse.WithPing(ping => { ping.DataMessage = \"ping-message\"; ping.Interval = TimeSpan.FromSeconds(5); ping.Start(); }); sse.KeepAlive(); return sse.Close(); } No código acima, a cada 5 segundos, uma nova mensagem de ping será enviada para o cliente. Isso manterá a conexão TCP ativa e impedirá que ela seja fechada devido à inatividade. Além disso, quando uma mensagem falha em ser enviada, a conexão é automaticamente fechada, liberando os recursos usados pela conexão. Consultando conexões Você pode pesquisar conexões ativas usando um predicado no identificador da conexão, para poder transmitir, por exemplo. HttpRequestEventSource[] evs = server.EventSources.Find(es => es.StartsWith(\"my-connection-\")); foreach (HttpRequestEventSource e in evs) { e.Send(\"Transmissão para todos os eventos que começam com 'my-connection-'\"); } Você também pode usar o método All para obter todas as conexões SSE ativas."
  },
  "docs/pt-br/features/websockets.html": {
    "href": "docs/pt-br/features/websockets.html",
    "title": "WebSockets | Sisk Framework",
    "keywords": "WebSockets O Sisk suporta websockets, como receber e enviar mensagens para seus clientes. Este recurso funciona bem na maioria dos navegadores, mas no Sisk ainda está em fase experimental. Por favor, se encontrar algum bug, denuncie-o no github. Aceitando e recebendo mensagens assincronamente O exemplo abaixo mostra como o websocket funciona na prática, com um exemplo de abertura de uma conexão, recebimento de uma mensagem e exibição na console. Todas as mensagens recebidas pelo WebSocket são recebidas em bytes, então você terá que decodificá-las após o recebimento. Por padrão, as mensagens são fragmentadas em pedaços e o último pedaço é enviado como o pacote final da mensagem. Você pode configurar o tamanho do pacote com a bandeira WebSocketBufferSize. Este buffer é o mesmo para enviar e receber mensagens. static ListeningHost BuildLhA() { Router r = new Router(); r += new Route(RouteMethod.Get, \"/\", (req) => { var ws = req.GetWebSocket(); ws.OnReceive += (sender, msg) => { string msgText = Encoding.UTF8.GetString(msg.MessageBytes); Console.WriteLine(\"Mensagem recebida: \" + msgText); // obtém o contexto HttpWebSocket que recebeu a mensagem HttpWebSocket senderWebSocket = (HttpWebSocket)sender!; senderWebSocket.Send(\"Resposta!\"); }; ws.WaitForClose(); return ws.Close(); }); return new ListeningHost(\"localhost\", 5551, r); } Aceitando e recebendo mensagens sincronicamente O exemplo abaixo contém uma maneira de você usar um websocket síncrono, sem um contexto assíncrono, onde você recebe as mensagens, lida com elas e finaliza o uso do socket. static ListeningHost BuildLhA() { Router r = new Router(); r += new Route(RouteMethod.Get, \"/connect\", (req) => { var ws = req.GetWebSocket(); WebSocketMessage? msg; askName: ws.Send(\"Qual é o seu nome?\"); msg = ws.WaitNext(); string? name = msg?.GetString(); if (string.IsNullOrEmpty(name)) { ws.Send(\"Por favor, insira seu nome!\"); goto askName; } askAge: ws.Send(\"E sua idade?\"); msg = ws.WaitNext(); if (!Int32.TryParse(msg?.GetString(), out int age)) { ws.Send(\"Por favor, insira um número válido\"); goto askAge; } ws.Send($\"Você é {name}, e você tem {age} anos.\"); return ws.Close(); }); return new ListeningHost(\"localhost\", 5551, r); } Envio de mensagens O método Send possui três sobrecargas, que permitem enviar texto, uma matriz de bytes ou um intervalo de bytes. Todos eles são fragmentados se a bandeira WebSocketBufferSize do servidor for maior que o tamanho total da carga útil. static ListeningHost BuildLhA() { Router r = new Router(); r += new Route(RouteMethod.Get, \"/\", (req) => { var ws = req.GetWebSocket(); byte[] myByteArrayContent = ...; ws.Send(\"Olá, mundo\"); // será codificado como uma matriz de bytes UTF-8 ws.Send(myByteArrayContent); return ws.Close(); }); return new ListeningHost(\"localhost\", 5551, r); } Aguardando o fechamento do websocket O método WaitForClose() bloqueia a pilha de chamadas atuais até que a conexão seja encerrada por qualquer um dos lados (cliente ou servidor). Com isso, a execução do callback da solicitação será bloqueada até que o cliente ou o servidor se desconecte. Você também pode fechar a conexão manualmente com o método Close(). Este método retorna um objeto HttpResponse vazio, que não é enviado para o cliente, mas funciona como um retorno da função onde a solicitação HTTP foi recebida. static ListeningHost BuildLhA() { Router r = new Router(); r += new Route(RouteMethod.Get, \"/\", (req) => { var ws = req.GetWebSocket(); // aguarda o fechamento da conexão do cliente ws.WaitForClose(); // aguarda até que não haja mais mensagens trocadas nos 60 segundos // ou até que alguma parte feche a conexão ws.WaitForClose(TimeSpan.FromSeconds(60)); return ws.Close(); }); return new ListeningHost(\"localhost\", 5551, r); } Política de Ping Similar ao funcionamento da política de ping em Eventos do Servidor, você também pode configurar uma política de ping para manter a conexão TCP aberta se houver inatividade nela. ws.WithPing(ping => { ping.DataMessage = \"ping-message\"; ping.Interval = TimeSpan.FromSeconds(5); ping.Start(); });"
  },
  "docs/pt-br/fundamentals/request-handlers.html": {
    "href": "docs/pt-br/fundamentals/request-handlers.html",
    "title": "Processamento de Requisições | Sisk Framework",
    "keywords": "Processamento de Requisições Os manipuladores de requisições, também conhecidos como \"middlewares\", são funções que são executadas antes ou depois de uma requisição ser processada pelo roteador. Eles podem ser definidos por rota ou por roteador. Existem dois tipos de manipuladores de requisições: BeforeResponse: define que o manipulador de requisição será executado antes de chamar a ação do roteador. AfterResponse: define que o manipulador de requisição será executado após chamar a ação do roteador. O envio de uma resposta HTTP neste contexto sobrescreverá a resposta da ação do roteador. Ambos os manipuladores de requisições podem sobrescrever a resposta da função de callback do roteador. Aliás, manipuladores de requisições podem ser úteis para validar uma requisição, como autenticação, conteúdo ou qualquer outra informação, como armazenar informações, logs ou outras etapas que podem ser realizadas antes ou depois de uma resposta. Desta forma, um manipulador de requisição pode interromper toda essa execução e retornar uma resposta antes de terminar o ciclo, descartando tudo mais no processo. Exemplo: suponha que um manipulador de requisição de autenticação de usuário não o autentique. Ele impedirá que o ciclo de vida da requisição seja continuado e ficará pendente. Se isso acontecer no manipulador de requisição na posição dois, o terceiro e os seguintes não serão avaliados. Criando um manipulador de requisição Para criar um manipulador de requisição, podemos criar uma classe que herda a interface IRequestHandler, no seguinte formato: public class AuthenticateUserRequestHandler : IRequestHandler { public RequestHandlerExecutionMode ExecutionMode { get; init; } = RequestHandlerExecutionMode.BeforeResponse; public HttpResponse? Execute(HttpRequest request, HttpContext context) { if (request.Headers.Authorization != null) { // Retornando null indica que o ciclo de requisição pode ser continuado return null; } else { // Retornando um objeto HttpResponse indica que esta resposta sobrescreverá respostas adjacentes. return new HttpResponse(System.Net.HttpStatusCode.Unauthorized); } } } No exemplo acima, indicamos que se o cabeçalho Authorization estiver presente na requisição, ele deve continuar e o próximo manipulador de requisição ou a callback do roteador deve ser chamada, seja qual for a próxima. Se um manipulador de requisição é executado após a resposta por sua propriedade ExecutionMode e retornar um valor não nulo, ele sobrescreverá a resposta do roteador. Sempre que um manipulador de requisição retorna null, indica que a requisição deve continuar e o próximo objeto deve ser chamado ou o ciclo deve terminar com a resposta do roteador. Associando um manipulador de requisição a uma única rota Você pode definir um ou mais manipuladores de requisição para uma rota. mainRouter.SetRoute(RouteMethod.Get, \"/\", IndexPage, \"\", new IRequestHandler[] { new AuthenticateUserRequestHandler(), // manipulador de requisição antes new ValidateJsonContentRequestHandler(), // manipulador de requisição antes // -- método IndexPage será executado aqui new WriteToLogRequestHandler() // manipulador de requisição depois }); Ou criando um objeto Route: Route indexRoute = new Route(RouteMethod.Get, \"/\", \"\", IndexPage, null); indexRoute.RequestHandlers = new IRequestHandler[] { new AuthenticateUserRequestHandler() }; mainRouter.SetRoute(indexRoute); Associando um manipulador de requisição a um roteador Você pode definir um manipulador de requisição global que será executado em todas as rotas de um roteador. mainRouter.GlobalRequestHandlers = new IRequestHandler[] { new AuthenticateUserRequestHandler() }; Associando um manipulador de requisição a um atributo Você pode definir um manipulador de requisição em um atributo de método junto com um atributo de rota. public class MyController { [RouteGet(\"/\")] [RequestHandler<AuthenticateUserRequestHandler>] static HttpResponse Index(HttpRequest request) { return new HttpResponse() .WithContent(new StringContent(\"Hello world!\")); } } Observe que é necessário passar o tipo de manipulador de requisição desejado e não uma instância de objeto. Dessa forma, o manipulador de requisição será instanciado pelo parser do roteador. Você pode passar argumentos no construtor com a propriedade ConstructorArguments. Exemplo: [RequestHandler<AuthenticateUserRequestHandler>(\"arg1\", 123, ...)] static HttpResponse Index(HttpRequest request) { HttpResponse res = new HttpResponse(); res.Content = new StringContent(\"Hello world!\"); return res; } Você também pode criar seu próprio atributo que implementa RequestHandler: public class AuthenticateAttribute : RequestHandlerAttribute { public AuthenticateAttribute() : base(typeof(AuthenticateUserRequestHandler), ConstructorArguments = new object?[] { \"arg1\", 123, ... }) { ; } } E usá-lo como: [Authenticate] static HttpResponse Index(HttpRequest request) { HttpResponse res = new HttpResponse(); res.Content = new StringContent(\"Hello world!\"); return res; } Ignorando um manipulador de requisição global Depois de definir um manipulador de requisição global em uma rota, você pode ignorá-lo em rotas específicas. var myRequestHandler = new AuthenticateUserRequestHandler(); mainRouter.GlobalRequestHandlers = new IRequestHandler[] { myRequestHandler }; mainRouter.SetRoute(new Route(RouteMethod.Get, \"/\", \"My route\", IndexPage, null) { BypassGlobalRequestHandlers = new IRequestHandler[] { myRequestHandler, // ok: a mesma instância do que está nos manipuladores de requisição globais new AuthenticateUserRequestHandler() // errado: não ignorará o manipulador de requisição global } }); Note Se você estiver ignorando um manipulador de requisição, deve usar a mesma referência do que você instanciou antes para ignorá-lo. Criar outra instância de manipulador de requisição não ignorará o manipulador de requisição global, pois a referência será alterada. Lembre-se de usar a mesma referência de manipulador de requisição usada tanto em GlobalRequestHandlers quanto em BypassGlobalRequestHandlers."
  },
  "docs/pt-br/fundamentals/requests.html": {
    "href": "docs/pt-br/fundamentals/requests.html",
    "title": "Requisições | Sisk Framework",
    "keywords": "Requisições Solicitações são estruturas que representam uma mensagem de solicitação HTTP. O objeto HttpRequest contém funções úteis para lidar com mensagens HTTP em todo o seu aplicativo. Uma solicitação HTTP é formada pelo método, caminho, versão, cabeçalhos e corpo. Neste documento, ensinaremos como obter cada um desses elementos. Obtendo o método da solicitação Para obter o método da solicitação recebida, você pode usar a propriedade Method: static HttpResponse Index(HttpRequest request) { HttpMethod requestMethod = request.Method; ... } Esta propriedade retorna o método da solicitação representado por um objeto HttpMethod. Note Ao contrário dos métodos de rota, esta propriedade não serve o item RouteMethod.Any. Em vez disso, ele retorna o verdadeiro método da solicitação. Obtendo os componentes do URL da solicitação Você pode obter vários componentes de um URL através de certas propriedades de uma solicitação. Para este exemplo, vamos considerar o URL: http://localhost:5000/user/login?email=foo@bar.com Nome do componente Descrição Valor do componente Path Obtém o caminho da solicitação. /user/login FullPath Obtém o caminho da solicitação e a string de consulta. /user/login?email=foo@bar.com FullUrl Obtém a string completa da solicitação HTTP. http://localhost:5000/user/login?email=foo@bar.com Host Obtém o host da solicitação. localhost Authority Obtém o host e a porta da solicitação. localhost:5000 QueryString Obtém a consulta da solicitação. ?email=foo@bar.com Query Obtém a consulta da solicitação em uma coleção de valores nomeados. {StringValueCollection object} IsSecure Determina se a solicitação está usando SSL (true) ou não (false). false Você também pode optar por usar a propriedade HttpRequest.Uri, que inclui tudo acima em um único objeto. Obtendo o corpo da solicitação Algumas solicitações incluem um corpo, como formulários, arquivos ou transações de API. Você pode obter o corpo de uma solicitação a partir da propriedade: // obtém o corpo da solicitação como uma string, usando o codificador de solicitação como o codificador string body = request.Body; // ou obtém como um array de bytes byte[] bodyBytes = request.RawBody; // ou, caso contrário, você pode transmiti-lo. Stream requestStream = request.GetRequestStream(); Também é possível determinar se há um corpo na solicitação e se ele foi carregado com as propriedades HasContents, que determina se a solicitação possui conteúdo e IsContentAvailable, que indica que o servidor HTTP recebeu completamente o conteúdo do ponto remoto. Não é possível ler o conteúdo da solicitação através de GetRequestStream mais de uma vez. Se você ler com este método, os valores em RawBody e Body também não estarão disponíveis. Não é necessário descartar o fluxo de solicitação no contexto da solicitação HTTP, pois ele é descartado no final da sessão HTTP em que é criado. Você também pode usar a propriedade HttpRequest.RequestEncoding para obter o melhor codificador para decodificar a solicitação manualmente. O servidor tem limites para ler o conteúdo da solicitação, o que se aplica a ambos HttpRequest.Body e HttpRequest.RawBody. Essas propriedades copiam todo o fluxo de entrada para um buffer local do mesmo tamanho de HttpRequest.ContentLength. Uma resposta com status 413 Content Too Large é retornada ao cliente se o conteúdo enviado for maior que HttpServerConfiguration.MaximumContentLength definido na configuração do usuário. Além disso, se não houver um limite configurado ou se for muito grande, o servidor lançará uma exceção OutOfMemoryException quando o conteúdo enviado pelo cliente exceder Int32.MaxValue (2 GB) e se o conteúdo for tentado ser acessado através de uma das propriedades mencionadas acima. Você ainda pode lidar com o conteúdo através de streaming. Note Sisk segue a RFC 9110 \"HTTP Semantics\", que não permite que certos métodos de solicitação tenham corpo. Essas solicitações descartarão imediatamente um 400 (Bad Request) com o status ContentServedOnIllegalMethod. Você pode desabilitar esse recurso definindo ThrowContentOnNonSemanticMethods para false. Obtendo o contexto da solicitação O HTTP Context é um objeto exclusivo do Sisk que armazena informações do servidor HTTP, rota, roteador e manipulador de solicitação. Você pode usá-lo para se organizar em um ambiente onde esses objetos são difíceis de organizar. O objeto RequestBag contém informações armazenadas que são passadas de um manipulador de solicitação para outro ponto, e pode ser consumido no destino final. Este objeto também pode ser usado por manipuladores de solicitação que executam após o callback da rota. Tip Esta propriedade também é acessível por HttpRequest.Bag propriedade. public class AuthenticateUserRequestHandler : IRequestHandler { public string Identifier { get; init; } = Guid.NewGuid().ToString(); public RequestHandlerExecutionMode ExecutionMode { get; init; } = RequestHandlerExecutionMode.BeforeResponse; public HttpResponse? Execute(HttpRequest request, HttpContext context) { if (request.Headers[\"Authorization\"] != null) { context.RequestBag.Add(\"AuthenticatedUser\", \"Bob\"); return null; } else { return new HttpResponse(System.Net.HttpStatusCode.Unauthorized); } } } public class MyController { [Route(RouteMethod.Get, \"/\") [RequestHandler(typeof(AuthenticateUserRequestHandler)) static HttpResponse Index(HttpRequest request) { var authUser = request.Context.RequestBag[\"AuthenticatedUser\"]; res.Content = new StringContent($\"Hello, {authUser}! return res; } } You can also use the Bag.Set() and Bag.Get() helper methods to get or set objects by their type singletons. public class Authenticate : RequestHandler public override HttpResponse? Execute(HttpRequest request, HttpContext context) { request.Bag.Set<User>(authUser); } [RouteGet(\"/\") [RequestHandler<Authenticate> public static HttpResponse Test(HttpRequest request) { var user = request.Bag.Get<User>. } ## Obtendo dados do formulário You can get the values of a form data in a [NameValueCollection](https://learn.microsoft. ```cs static HttpResponse Index(HttpRequest request) var form = request.GetFormContent(); string? username = form[\"username\"]; string? password = form[\"password\"]; if (AttempLogin(username, password) == true { ... } ## Obtendo dados de formulário multipart Sisk's HTTP request lets you get uploaded multipart contents, such as a files, form fields, or any binary content. ```cs static HttpResponse Index(HttpRequest request) var multipartFormDataObjects = request.GetMultipartFormContent(); foreach (MultipartObject uploadedObject in multipartFormDataObjects { Console.WriteLine(\"File name : \" + uploadedObject.Filename); Console.WriteLine(\"Field name : \" + uploadedObject.Name); Console.WriteLine(\"Content length : \" + uploadedObject.ContentLength); Console.WriteLine(\"Common format : \" + uploadedObject.GetCommonFileFormat()); } ## Suporte de eventos do servidor Sisk supports Server-side events, which allows sending chunks as an stream and keeping the connection between the server and the client alive. public class MyController [Route(RouteMethod.Get, \"/event-source static HttpResponse ServerEventsResponse(HttpRequest request) var serverEvents = request.GetEventSource(); string[] fruits = new[] { \"Apple\", \"Banana\", \"Watermelon\", \"Tomato foreach (fruit in fruits serverEvents.Send(fruit); Thread.Sleep(15000"
  },
  "docs/pt-br/fundamentals/responses.html": {
    "href": "docs/pt-br/fundamentals/responses.html",
    "title": "| Sisk Framework",
    "keywords": "Respostas representam objetos que são respostas HTTP para solicitações HTTP. Elas são enviadas pelo servidor para o cliente como uma indicação da solicitação de um recurso, página, documento, arquivo ou outro objeto. Uma resposta HTTP é formada por status, cabeçalhos e conteúdo. Neste documento, ensinaremos como arquitetar respostas HTTP com o Sisk. Definindo um status HTTP A lista de status HTTP é a mesma desde HTTP/1.0, e o Sisk suporta todos eles. HttpResponse res = new HttpResponse(); res.Status = System.Net.HttpStatusCode.Accepted; // 202 Ou com Sintaxe Fluente: new HttpResponse() .WithStatus(200) // ou .WithStatus(HttpStatusCode.Ok) // ou .WithStatus(HttpStatusInformation.Ok); Você pode ver a lista completa de códigos de status HttpStatusCode disponíveis aqui. Você também pode fornecer seu próprio código de status usando a estrutura HttpStatusInformation. Corpo e tipo de conteúdo O Sisk suporta objetos de conteúdo .NET nativos para enviar o corpo em respostas. Você pode usar a classe StringContent para enviar uma resposta JSON, por exemplo: HttpResponse res = new HttpResponse(); res.Content = new StringContent(myJson, Encoding.UTF8, \"application/json\"); O servidor sempre tentará calcular o Content-Length com base no que você definiu no conteúdo, se você não tiver definido explicitamente em um cabeçalho. Se o servidor não conseguir obter implicitamente o cabeçalho Content-Length do conteúdo da resposta, a resposta será enviada com Chunked-Encoding. Você também pode transmitir a resposta enviando um StreamContent ou usando o método GetResponseStream. Cabeçalhos de resposta Você pode adicionar, editar ou remover cabeçalhos que está enviando na resposta. O exemplo abaixo mostra como enviar uma resposta de redirecionamento para o cliente. HttpResponse res = new HttpResponse(); res.Status = HttpStatusCode.Moved; res.Headers.Add(HttpKnownHeaderNames.Location, \"/login\"); Ou com Sintaxe Fluente: new HttpResponse(301) .WithHeader(\"Location\", \"/login\"); Quando você usa o método Add de HttpHeaderCollection, você está adicionando um cabeçalho à solicitação sem alterar os que já foram enviados. O método Set substitui os cabeçalhos com o mesmo nome pelo valor instruído. O índice de HttpHeaderCollection chama internamente o método Set para substituir os cabeçalhos. Envio de cookies O Sisk possui métodos que facilitam a definição de cookies no cliente. Cookies definidos por este método já estão codificados em URL e atendem ao padrão RFC-6265. HttpResponse res = new HttpResponse(); res.SetCookie(\"cookie-name\", \"cookie-value\"); Ou com Sintaxe Fluente: new HttpResponse(301) .WithCookie(\"cookie-name\", \"cookie-value\", expiresAt: DateTime.Now.Add(TimeSpan.FromDays(7))); Existem outras versões mais completas do mesmo método. Respostas chunked Você pode definir a codificação de transferência como chunked para enviar respostas grandes. HttpResponse res = new HttpResponse(); res.SendChunked = true; Ao usar chunked-encoding, o cabeçalho Content-Length é omitido automaticamente. Stream de resposta Os streams de resposta são uma maneira gerenciada que permite enviar respostas de forma segmentada. É uma operação de nível inferior do que usar objetos HttpResponse, pois exige que você envie os cabeçalhos e o conteúdo manualmente e, em seguida, feche a conexão. Este exemplo abre um stream de leitura para o arquivo, copia o stream para o stream de saída da resposta e não carrega o arquivo inteiro na memória. Isso pode ser útil para servir arquivos médios ou grandes. // abre o stream de resposta para o arquivo using var fileStream = File.OpenRead(\"my-big-file.zip\"); var responseStream = request.GetResponseStream(); // define a codificação de resposta para usar chunked-encoding // também você não deve enviar o cabeçalho Content-Length quando usar // chunked encoding responseStream.SendChunked = true; responseStream.SetStatus(200); responseStream.SetHeader(HttpKnownHeaderNames.ContentType, contentType); // copia o stream do arquivo para o stream de saída da resposta fileStream.CopyTo(responseStream.ResponseStream); // fecha o stream return responseStream.Close(); Compressão GZip, Deflate e Brotli Você pode enviar respostas com conteúdo compactado no Sisk com compressão de conteúdo HTTP. Primeiro, encapsule seu objeto HttpContent dentro de um dos compactadores abaixo para enviar a resposta compactada ao cliente. router.MapGet(\"/hello.html\", request => { string myHtml = \"...\"; return new HttpResponse () { Content = new GZipContent(new HtmlContent(myHtml)), // ou Content = new BrotliContent(new HtmlContent(myHtml)), // ou Content = new DeflateContent(new HtmlContent(myHtml)), }; }); Você também pode usar esses conteúdos compactados com streams. router.MapGet(\"/archive.zip\", request => { // não aplique \"using\" aqui. o HttpServer descartará seu conteúdo // após enviar a resposta. var archive = File.OpenRead(\"/path/to/big-file.zip\"); return new HttpResponse () { Content = new GZipContent(archive) } }); Os cabeçalhos Content-Encoding são definidos automaticamente ao usar esses conteúdos. Tipos de resposta implícitos Desde a versão 0.15, você pode usar outros tipos de retorno além de HttpResponse, mas é necessário configurar o roteador como ele irá lidar com cada tipo de objeto. O conceito é sempre retornar um tipo de referência e transformá-lo em um objeto HttpResponse válido. Rotas que retornam HttpResponse não passam por nenhuma conversão. Tipos de valor (estruturas) não podem ser usados como tipo de retorno porque não são compatíveis com o RouterCallback, portanto, devem ser envoltos em um ValueResult para poderem ser usados em manipuladores. Considere o seguinte exemplo de um módulo de roteador que não usa HttpResponse no tipo de retorno: [RoutePrefix(\"/users\")] public class UsersController : RouterModule { public List<User> Users = new List<User>(); [RouteGet] public IEnumerable<User> Index(HttpRequest request) { return Users.ToArray(); } [RouteGet(\"<id>\")] public User View(HttpRequest request) { int id = request.Query[\"id\"].GetInteger(); User dUser = Users.First(u => u.Id == id); return dUser; } [RoutePost] public ValueResult<bool> Create(HttpRequest request) { User fromBody = JsonSerializer.Deserialize<User>(request.Body)!; Users.Add(fromBody); return true; } } Com isso, agora é necessário definir no roteador como ele irá lidar com cada tipo de objeto. Os objetos são sempre o primeiro argumento do manipulador e o tipo de saída deve ser um HttpResponse válido. Além disso, os objetos de saída de uma rota nunca devem ser nulos. Para tipos ValueResult não é necessário indicar que o objeto de entrada é um ValueResult e apenas T, pois ValueResult é um objeto refletido do seu componente original. A associação de tipos não compara o que foi registrado com o tipo do objeto retornado pelo callback do roteador. Em vez disso, verifica se o tipo do resultado do roteador é atribuível ao tipo registrado. Registrar um manipulador de tipo Object será usado como fallback para todos os tipos de objeto previamente não validados. A ordem de inserção dos manipuladores de valor também importa, então registrar um manipulador Object último garantirá que ele ignore todos os outros manipuladores específicos de tipo. Sempre registre manipuladores de valor específicos primeiro para garantir a ordem. Router r = new Router(); r.SetObject(new UsersController()); r.RegisterValueHandler<bool>(bolVal => { HttpResponse res = new HttpResponse(); res.Status = (bool)bolVal ? HttpStatusCode.OK : HttpStatusCode.BadRequest; return res; }); r.RegisterValueHandler<IEnumerable>(enumerableValue => { return new HttpResponse(); // faça algo com enumerableValue aqui }); // registrar um manipulador de valor de object deve ser o último // manipulador de valor que será usado como fallback r.RegisterValueHandler<object>(fallback => { HttpResponse res = new HttpResponse(); res.Status = HttpStatusCode.OK; res.Content = JsonContent.Create(fallback); return res; });"
  },
  "docs/pt-br/fundamentals/routing.html": {
    "href": "docs/pt-br/fundamentals/routing.html",
    "title": "Roteamento | Sisk Framework",
    "keywords": "Roteamento O Roteador é o primeiro passo na construção do servidor. Ele é responsável por abrigar objetos Rota, que são pontos de extremidade que mapeiam URLs e seus métodos para ações executadas pelo servidor. Cada ação é responsável por receber uma solicitação e entregar uma resposta ao cliente. As rotas são pares de expressões de caminho (\"padrão de caminho\") e o método HTTP que elas podem escutar. Quando uma solicitação é feita ao servidor, ele tentará encontrar uma rota que corresponda à solicitação recebida, em seguida, chamará a ação dessa rota e entregará a resposta resultante ao cliente. Existem várias maneiras de definir rotas no Sisk: elas podem ser estáticas, dinâmicas ou auto-procuradas, definidas por atributos ou diretamente no objeto Roteador. Router roteadorPrincipal = new Router(); // mapeia o GET / para a seguinte ação roteadorPrincipal.MapGet(\"/\", request => { return new HttpResponse(\"Olá, mundo!\"); }); Para entender o que uma rota é capaz de fazer, precisamos entender o que uma solicitação é capaz de fazer. Um HttpRequest conterá tudo o que você precisa. O Sisk também inclui alguns recursos extras que aceleram o desenvolvimento geral. Para cada ação recebida pelo servidor, um delegado do tipo RouteAction será chamado. Este delegado contém um parâmetro que contém um HttpRequest com todas as informações necessárias sobre a solicitação recebida pelo servidor. O objeto resultante deste delegado deve ser um HttpResponse ou um objeto que mapeia para ele através de tipos de resposta implícitos. Correspondência de rotas Quando uma solicitação é recebida pelo servidor HTTP, o Sisk procura uma rota que satisfaça a expressão do caminho recebida na solicitação. A expressão é sempre testada entre a rota e o caminho da solicitação, sem considerar a string de consulta. Este teste não tem prioridade e é exclusivo para uma única rota. Quando nenhuma rota é correspondida àquela solicitação, a resposta Router.NotFoundErrorHandler é retornada ao cliente. Quando o padrão de caminho é correspondido, mas o método HTTP não corresponde, a resposta Router.MethodNotAllowedErrorHandler é enviada de volta ao cliente. O Sisk verifica a possibilidade de colisões de rotas para evitar esses problemas. Ao definir rotas, o Sisk procurará por possíveis rotas que possam colidir com a rota sendo definida. Este teste inclui verificar o caminho e o método que a rota está definida para aceitar. Criando rotas usando padrões de caminho Você pode definir rotas usando vários métodos SetRoute. // SetRoute way roteadorPrincipal.SetRoute(RouteMethod.Get, \"/hey/<name>\", (request) => { string nome = request.RouteParameters[\"name\"].GetString(); return new HttpResponse($\"Olá, {nome}\"); }); // Map* way roteadorPrincipal.MapGet(\"/form\", (request) => { var formData = request.GetFormData(); return new HttpResponse(); // empty 200 ok }); // Route.* helper methods roteadorPrincipal += Route.Get(\"/image.png\", (request) => { var imageStream = File.OpenRead(\"image.png\"); return new HttpResponse() { // o StreamContent inner // stream é descartado após o envio // da resposta. Content = new StreamContent(imageStream) }; }); // múltiplos parâmetros roteadorPrincipal.MapGet(\"/hey/<name>/surname/<surname>\", (request) => { string nome = request.RouteParameters[\"name\"].GetString(); string sobrenome = request.RouteParameters[\"surname\"].GetString(); return new HttpResponse($\"Olá, {nome} {sobrenome}!\"); }); A propriedade RouteParameters do HttpResponse contém todas as informações sobre as variáveis de caminho da solicitação recebida. Cada caminho recebido pelo servidor é normalizado antes de ser executado o teste do padrão de caminho, seguindo estas regras: Todos os segmentos vazios são removidos do caminho, por exemplo: ////foo//bar se torna /foo/bar. A correspondência de caminho é sensível a maiúsculas e minúsculas, a menos que Router.MatchRoutesIgnoreCase seja definido como true. As propriedades Query e RouteParameters do HttpRequest retornam um objeto StringValueCollection, onde cada propriedade indexada retorna um StringValue não nulo, que pode ser usado como uma opção/monada para converter seu valor bruto em um objeto gerenciado. O exemplo abaixo lê o parâmetro de rota \"id\" e obtém um Guid a partir dele. Se o parâmetro não for um Guid válido, uma exceção é lançada e um erro 500 é retornado ao cliente se o servidor não estiver lidando com Router.CallbackErrorHandler. roteadorPrincipal.SetRoute(RouteMethod.Get, \"/user/<id>\", (request) => { Guid id = request.RouteParameters[\"id\"].GetGuid(); }); [!NOTA] Caminhos têm seu / final ignorado tanto na solicitação quanto no caminho da rota, ou seja, se você tentar acessar uma rota definida como /index/page, poderá acessá-la usando /index/page/ também. Você também pode forçar URLs a terminarem com / habilitando a bandeira ForceTrailingSlash. Criando rotas usando instâncias de classe Você também pode definir rotas dinamicamente usando reflexão com o atributo RouteAttribute. Dessa forma, a instância de uma classe em que seus métodos implementam este atributo terá suas rotas definidas no roteador alvo. Para que um método seja definido como uma rota, ele deve ser marcado com um RouteAttribute, como o próprio atributo ou um RouteGetAttribute. O método pode ser estático, instância, público ou privado. Quando o método SetObject(type) ou SetObject<TType>() é usado, métodos de instância são ignorados. public class MyController { // corresponderá ao GET / [RouteGet] HttpResponse Index(HttpRequest request) { HttpResponse res = new HttpResponse(); res.Content = new StringContent(\"Index!\"); return res; } // métodos estáticos também funcionam [RouteGet(\"/hello\")] static HttpResponse Hello(HttpRequest request) { HttpResponse res = new HttpResponse(); res.Content = new StringContent(\"Hello world!\"); return res; } } A linha abaixo definirá tanto o método Index quanto o método Hello da classe MyController como rotas, pois ambos são marcados como rotas e uma instância da classe foi fornecida, não o tipo da classe. Se o tipo da classe tivesse sido fornecido em vez de uma instância, apenas os métodos estáticos seriam definidos. var controladorMeu = new MyController(); mainRouter.SetObject(controladorMeu); Desde a versão 0.16 do Sisk, é possível habilitar AutoScan, que procurará por tipos definidos pelo usuário que implementam RouterModule e associará automaticamente o tipo ao roteador. Isso não é suportado com compilação AOT. mainRouter.AutoScanModules<ApiController>(); O exemplo acima irá procurar por todos os tipos que implementam ApiController mas não o tipo em si. Os dois parâmetros opcionais indicam como o método irá procurar por esses tipos. O primeiro argumento implica o Assembly onde os tipos serão pesquisados e o segundo indica a forma como os tipos serão definidos. Rotas Regex Em vez de usar os métodos padrão de correspondência de caminho HTTP, você pode marcar uma rota para ser interpretada com Regex. Route routeIndex = new Route(RouteMethod.Get, @\"\\/[a-z]+/\", \"My route\", IndexPage, null); routeIndex.UseRegex = true; mainRouter.SetRoute(routeIndex); Ou com a classe RegexRoute RegexRoute routeIndex = new RegexRoute(RouteMethod.Get, @\"/uploads/(?<filename>.*\\.(jpeg|jpg|png)\", request => { string filename = request.Query[\"filename\"].GetString(); return new HttpResponse($\"Acessing file {filename}\"); }); mainRouter.SetRoute(routeIndex); You can also capture groups from the regex pattern into the Request.Query contents: Rotas de qualquer método Você pode definir uma rota para ser correspondente apenas pelo caminho e ignorar o método HTTP. Isso pode ser útil para você fazer a validação de método dentro do callback da rota. // will match / on any HTTP method mainRouter.SetRoute(RouteMethod.Any, \"/\", callbackFunction); Rotas de qualquer caminho Rotas de qualquer caminho testam para qualquer caminho recebido pelo servidor HTTP. Se o método da rota for RouteMethod.Any e a rota usar Route.AnyPath em sua expressão de caminho, essa rota corresponderá a todas as solicitações do servidor HTTP, e nenhuma outra rota pode ser definida. // the following route will match all POST requests mainRouter.SetRoute(RouteMethod.Post, Route.AnyPath, callbackFunction); Ignorar o caso da correspondência de rota Por padrão, a interpretação de rotas com solicitações são sensíveis a maiúsculas e minúsculas. Para fazer a correspondência ignorar o caso, habilite essa opção. mainRouter.MatchRoutesIgnoreCase = true; This will also enable the option RegexOptions.IgnoreCase for routes where it's regex-matching. Handler de erro interno Callbacks de rota podem lançar erros durante a execução do servidor. Se não forem tratados corretamente, o funcionamento geral do servidor HTTP pode ser interrompido. O roteador tem um callback para quando um callback de rota falha e previne a interrupção do serviço. Este método é apenas acessível quando ThrowExceptions é definido como false. mainRouter.CallbackErrorHandler = (ex, context => { return new HttpResponse(500) return new HttpResponse(500)"
  },
  "docs/pt-br/getting-started.html": {
    "href": "docs/pt-br/getting-started.html",
    "title": "Começando com o Sisk | Sisk Framework",
    "keywords": "Começando com o Sisk O Sisk pode ser executado em qualquer ambiente .NET. Neste guia, ensinaremos como criar um aplicativo Sisk usando .NET. Se você ainda não o instalou, faça o download do SDK de aqui. Neste tutorial, vamos cobrir como criar uma estrutura de projeto, receber uma solicitação, obter um parâmetro de URL e enviar uma resposta. Este guia focará na construção de um servidor simples usando C#. Você também pode usar sua linguagem de programação favorita. Note Você pode estar interessado em um projeto rápido. Verifique este repositório para mais informações. Criando um Projeto Vamos nomear nosso projeto \"Meu Aplicativo Sisk\". Depois de configurar o .NET, você pode criar seu projeto com o seguinte comando: dotnet new console -n meu-sisk-application Em seguida, navegue até o diretório do seu projeto e instale o Sisk usando a ferramenta utilitária .NET: cd meu-sisk-application dotnet add package Sisk.HttpServer Você pode encontrar outras maneiras de instalar o Sisk em seu projeto aqui. Agora, vamos criar uma instância do nosso servidor HTTP. Para este exemplo, vamos configurá-lo para escutar na porta 5000. Construindo o Servidor HTTP O Sisk permite que você construa seu aplicativo passo a passo manualmente, pois ele roteia para o objeto HttpServer. No entanto, isso pode não ser muito conveniente para a maioria dos projetos. Portanto, podemos usar o método de construção, o que torna mais fácil colocar nosso aplicativo em funcionamento. class Program { static async Task Main(string[] args) { using var app = HttpServer.CreateBuilder() .UseListeningPort(\"http://localhost:5000/\") .Build(); app.Router.MapGet(\"/\", request => { return new HttpResponse() { Status = 200, Content = new StringContent(\"Olá, mundo!\") }; }); await app.StartAsync(); } } É importante entender cada componente vital do Sisk. Mais tarde neste documento, você aprenderá mais sobre como o Sisk funciona. Configuração manual (avançada) Você pode aprender como cada mecanismo do Sisk funciona em esta seção da documentação, que explica o comportamento e as relações entre o HttpServer, Router, ListeningPort e outros componentes."
  },
  "docs/pt-br/installing.html": {
    "href": "docs/pt-br/installing.html",
    "title": "Instalando | Sisk Framework",
    "keywords": "Instalando Você pode instalar o Sisk através do Nuget, dotnet cli ou outras opções. Você pode configurar facilmente seu ambiente Sisk executando este comando em seu console de desenvolvedor: Warning Versões mais recentes do Sisk são compatíveis com .NET 8 e em breve .NET 9. Versões antigas do Sisk para .NET 6 e .NET 7 serão mantidas até 30 de novembro de 2024, recebendo apenas patches de segurança e correções no ramo \"legacy\". Por favor, atualize seus projetos usando o Sisk para .NET 8. dotnet add package Sisk.HttpServer Este comando instalará a versão mais recente do Sisk no seu projeto."
  },
  "docs/pt-br/native-aot.html": {
    "href": "docs/pt-br/native-aot.html",
    "title": "Suporte com AOT | Sisk Framework",
    "keywords": "Suporte com AOT Na .NET 7, foi introduzido o Native AOT, um modo de compilação .NET que permite exportar binários prontos para qualquer plataforma suportada, sem exigir que o runtime .NET seja instalado na máquina de destino. Com o Native AOT, seu código é compilado para código nativo e já contém tudo o que precisa para ser executado. O Sisk tem experimentado o recurso desde a versão 0.9.1, que melhora o suporte para Native AOT com recursos para definir rotas dinâmicas por aplicativo sem afetar a compilação com mensagens de aviso. O Sisk usa reflexão para obter os métodos que serão definidos a partir de tipos e objetos. Além disso, o Sisk usa reflexão para atributos como RequestHandlerAttribute, que são inicializados a partir de um tipo. Para funcionar corretamente, a compilação AOT usa o trimming, onde os tipos dinâmicos devem especificar o que será usado na montagem final. Considerando o exemplo abaixo, é uma rota que chama um RequestHandler. [Route(RouteMethod.Get, \"/\", LogMode = LogOutput.None)] [RequestHandler(typeof(MyRequestHandler))] static HttpResponse IndexPage(HttpRequest request) { HttpResponse htmlResponse = new HttpResponse(); htmlResponse.Content = new StringContent(\"Hello, world!\", System.Text.Encoding.UTF8, \"text/plain\"); return htmlResponse; } Este RequestHandler é invocado dinamicamente durante a execução, e essa invocação deve ser segmentada e essa segmentação deve ser explícita. Para entender melhor o que o compilador considerará de MyRequestHandler deve ser mantido na compilação final é: Propriedades públicas; Campos públicos e privados; Construtor público e privado; Métodos públicos e privados; Tudo o que você tiver em um RequestHandler que não seja mencionado acima será removido pelo compilador. Lembre-se de que todos os outros componentes, classes e pacotes que você usar em seu aplicativo devem ser compatíveis com o AOT Trimming, ou seu código não funcionará como esperado. A propósito, o Sisk não vai te deixar na mão se você quiser construir algo onde o desempenho é uma prioridade. Você pode ler mais sobre o Native AOT e como ele funciona na documentação oficial da Microsoft."
  },
  "docs/pt-br/registering-namespace.html": {
    "href": "docs/pt-br/registering-namespace.html",
    "title": "Configurando reservas de namespace no Windows | Sisk Framework",
    "keywords": "Configurando reservas de namespace no Windows O Sisk funciona com a interface de rede HttpListener, que vincula um host virtual ao sistema para ouvir solicitações. No Windows, essa vinculação é um pouco restritiva, permitindo apenas localhost como host válido. Ao tentar ouvir em outro host, um erro de acesso negado é lançado no servidor. Este tutorial explica como conceder autorização para ouvir em qualquer host que você desejar no sistema. @echo off :: insira o prefixo aqui, sem espaços ou aspas SET PREFIX= SET DOMAIN=%ComputerName%\\%USERNAME% netsh http add urlacl url=%PREFIX% user=%DOMAIN% pause Onde em PREFIX, está o prefixo (\"Host de Escutar->Porta\") que seu servidor irá escutar. Ele deve ser formatado com o esquema de URL, host, porta e uma barra no final, exemplo: SET PREFIX=http://my-application.example.test/ Para que você possa ser ouvido em seu aplicativo através de: class Program { static async Task Main(string[] args) { using var app = HttpServer.CreateBuilder() .UseListeningPort(\"http://my-application.example.test/\") .Build(); app.Router.MapGet(\"/\", request => { return new HttpResponse() { Status = 200, Content = new StringContent(\"Hello, world!\") }; }); await app.StartAsync(); } }"
  },
  "docs/pt-br/ssl.html": {
    "href": "docs/pt-br/ssl.html",
    "title": "Trabalhando com SSL | Sisk Framework",
    "keywords": "Trabalhando com SSL Trabalhar com SSL para desenvolvimento pode ser necessário quando se trabalha em contextos que exigem segurança, como a maioria dos cenários de desenvolvimento web. O Sisk opera em cima do HttpListener, que não suporta HTTPS nativo, apenas HTTP. No entanto, existem soluções alternativas que permitem trabalhar com SSL no Sisk. Veja-as abaixo: Através do IIS no Windows Disponível em: Windows Esforço: médio Se você estiver no Windows, pode usar o IIS para habilitar SSL no seu servidor HTTP. Para que isso funcione, é recomendável que você siga este tutorial com antecedência se quiser que seu aplicativo esteja ouvindo em um host diferente de \"localhost\". Para que isso funcione, você deve instalar o IIS através dos recursos do Windows. O IIS está disponível gratuitamente para usuários do Windows e Windows Server. Para configurar o SSL em seu aplicativo, tenha o certificado SSL pronto, mesmo que seja autoassinado. Em seguida, você pode ver como configurar o SSL no IIS 7 ou superior. Através do mitmproxy Disponível em: Linux, macOS, Windows Esforço: fácil mitmproxy é uma ferramenta de proxy de interceptação que permite que desenvolvedores e testadores de segurança inspecionem, modifiquem e registrem o tráfego HTTP e HTTPS entre um cliente (como um navegador web) e um servidor. Você pode usar a utilitário mitmdump para iniciar um proxy SSL reversa entre seu cliente e seu aplicativo Sisk. Primeiro, instale o mitmprxy em sua máquina. Inicie seu aplicativo Sisk. Para este exemplo, usaremos a porta 8000 como a porta HTTP não segura. Inicie o servidor mitmproxy para ouvir a porta segura na 8001: mitmdump --mode reverse:http://localhost:8000/ -p 8001 E você está pronto para começar! Você já pode acessar seu aplicativo através de https://localhost:8001/. Seu aplicativo não precisa estar em execução para você iniciar mitmdump. Através do pacote Sisk.SslProxy Disponível em: Linux, macOS, Windows Esforço: fácil O pacote Sisk.SslProxy é uma maneira simples de habilitar SSL no seu aplicativo Sisk. No entanto, é um pacote extremamente experimental. Pode ser instável trabalhar com este pacote, mas você pode fazer parte da pequena porcentagem de pessoas que contribuirão para tornar este pacote viável e estável. Para começar, você pode instalar o pacote Sisk.SslProxy com: dotnet add package Sisk.SslProxy Note Você deve habilitar \"Habilitar pacotes pré-lançamento\" no Gerenciador de Pacotes do Visual Studio para instalar o Sisk.SslProxy. Novamente, é um projeto experimental, então nem pense em colocá-lo em produção. No momento, o Sisk.SslProxy pode lidar com a maioria dos recursos HTTP/1.1, incluindo HTTP Continue, Chunked-Encoding, WebSockets e SSE. Leia mais sobre o SslProxy aqui."
  },
  "docs/registering-namespace.html": {
    "href": "docs/registering-namespace.html",
    "title": "Configuring namespace reservations on Windows | Sisk Framework",
    "keywords": "Configuring namespace reservations on Windows Sisk works with the HttpListener network interface, which binds a virtual host to the system to listen for requests. On Windows, this binding is a bit restrictive, only allowing localhost to be bound as a valid host. When attempting to listen to another host, an access denied error is thrown on the server. This tutorial explains how to grant authorization to listen on any host you want on the system. @echo off :: insert prefix here, without spaces or quotes SET PREFIX= SET DOMAIN=%ComputerName%\\%USERNAME% netsh http add urlacl url=%PREFIX% user=%DOMAIN% pause Where in PREFIX, is the prefix (\"Listening Host->Port\") that your server will listen to. It must be formatted with the URL scheme, host, port and a slash at the end, example: SET PREFIX=http://my-application.example.test/ So that you can be listened in your application through: class Program { static async Task Main(string[] args) { using var app = HttpServer.CreateBuilder() .UseListeningPort(\"http://my-application.example.test/\") .Build(); app.Router.MapGet(\"/\", request => { return new HttpResponse() { Status = 200, Content = new StringContent(\"Hello, world!\") }; }); await app.StartAsync(); } }"
  },
  "docs/ru/advanced/forwarding-resolvers.html": {
    "href": "docs/ru/advanced/forwarding-resolvers.html",
    "title": "Перенаправление Резолверы | Sisk Framework",
    "keywords": "Перенаправление Резолверы Перенаправляющий резолвер - это помощник, который помогает декодировать информацию, которая идентифицирует клиента через запрос, прокси, CDN или балансировщики нагрузки. Когда ваш сервис Sisk работает через обратный или прямой прокси, IP-адрес, хост и протокол клиента могут отличаться от исходного запроса, так как это перенаправление от одной службы к другой. Эта функциональность Sisk позволяет вам контролировать и разрешать эту информацию до работы с запросом. Эти прокси обычно предоставляют полезные заголовки для идентификации их клиента. В настоящее время с классом ForwardingResolver можно разрешить IP-адрес клиента, хост и используемый HTTP-протокол. После версии 1.0 Sisk сервер больше не имеет стандартной реализации для декодирования этих заголовков по соображениям безопасности, которые различаются для каждой службы. Например, заголовок X-Forwarded-For включает информацию об IP-адресах, которые перенаправили запрос. Этот заголовок используется прокси для передачи цепочки информации конечной службе и включает IP всех прокси, использованных, включая реальный адрес клиента. Проблема в том, что иногда бывает сложно идентифицировать удаленный IP-адрес клиента, и нет конкретного правила для идентификации этого заголовка. Очень рекомендуется прочитать документацию по заголовкам, которые вы собираетесь реализовать ниже: Прочитайте о заголовке X-Forwarded-For здесь. Прочитайте о заголовке X-Forwarded-Host здесь. Прочитайте о заголовке X-Forwarded-Proto здесь. Класс ForwardingResolver Этот класс имеет три виртуальных метода, которые позволяют реализовать наиболее подходящий вариант для каждой службы. Каждый метод отвечает за разрешение информации из запроса через прокси: IP-адрес клиента, хост запроса и используемый протокол безопасности. По умолчанию Sisk всегда будет использовать информацию из исходного запроса, не разрешая никаких заголовков. Ниже приведен пример того, как можно использовать эту реализацию. Этот пример разрешает IP-адрес клиента через заголовок X-Forwarded-For и выдает ошибку, если в запросе было перенаправлено более одного IP-адреса. Important Не используйте этот пример в коде для производства. Всегда проверяйте, является ли реализация подходящей для использования. Прочитайте документацию по заголовкам перед ее реализацией. class Program { static void Main(string[] args) { using var host = HttpServer.CreateBuilder() .UseForwardingResolver<Resolver>() .UseListeningPort(5555) .Build(); host.Router.SetRoute(RouteMethod.Any, Route.AnyPath, request => new HttpResponse(\"Hello, world!!!\")); host.Start(); } class Resolver : ForwardingResolver { public override IPAddress OnResolveClientAddress(HttpRequest request, IPEndPoint connectingEndpoint) { string? forwardedFor = request.Headers.XForwardedFor; if (forwardedFor is null) { throw new Exception(\"Заголовок X-Forwarded-For отсутствует.\"); } string[] ipAddresses = forwardedFor.Split(','); if (ipAddresses.Length != 1) { throw new Exception(\"Слишком много адресов в заголовке X-Forwarded-For.\"); } return IPAddress.Parse(ipAddresses[0]); } } }"
  },
  "docs/ru/advanced/http-server-handlers.html": {
    "href": "docs/ru/advanced/http-server-handlers.html",
    "title": "Обработчики HTTP-сервера | Sisk Framework",
    "keywords": "Обработчики HTTP-сервера В версии 0.16 Sisk был представлен класс HttpServerHandler, который призван расширить общие возможности Sisk и предоставить дополнительные обработчики событий Sisk, такие как обработка HTTP-запросов, маршрутизаторов, контекстных мешков и многое другое. Класс концентрирует события, которые происходят в течение жизненного цикла всего HTTP-сервера и отдельного запроса. Протокол HTTP не имеет сессий, и поэтому невозможно сохранять информацию из одного запроса в другой. Sisk на данный момент предоставляет способ для вас реализовать сессии, контексты, подключения к базе данных и другие полезные провайдеры, чтобы помочь в вашей работе. Для того чтобы узнать, где вызывается каждое событие и для чего оно предназначено, обратитесь к этой странице (/api/Sisk.Core.Http.Handlers.HttpServerHandler). Вы также можете просмотреть жизненный цикл HTTP-запроса (/v1/advanced/request-lifecycle), чтобы понять, что происходит с запросом и где вызываются события. HTTP-сервер позволяет использовать несколько обработчиков одновременно. Каждый вызов события синхронный, то есть он заблокирует текущий поток для каждого запроса или контекста до тех пор, пока не будут выполнены и завершены все обработчики, связанные с этой функцией. В отличие от RequestHandlers, их нельзя применять к определенным группам маршрутов или конкретным маршрутам. Вместо этого они применяются ко всему HTTP-серверу. Вы можете применять условия в своем Http Server Handler. Кроме того, для каждого приложения Sisk определяются сингletons каждого HttpServerHandler, поэтому для каждого HttpServerHandler определяется только один экземпляр. Практический пример использования HttpServerHandler - автоматическое освобождение подключения к базе данных в конце запроса. // DatabaseConnectionHandler.cs public class DatabaseConnectionHandler : HttpServerHandler { public override void OnHttpRequestClose(HttpServerExecutionResult result) { var requestBag = result.Request.Context.RequestBag; // проверяет, определен ли в запросе DbContext if (requestBag.IsSet<DbContext>()) { var db = requestBag.Get<DbContext>(); db.Dispose(); } } } public static class DatabaseConnectionHandlerExtensions { // позволяет пользователю создать DbContext из HTTP-запроса // и сохранить его в его контекстном мешке public static DbContext GetDbContext(this HttpRequest request) { var db = new DbContext(); return request.SetContextBag<DbContext>(db); } } С приведенным выше кодом расширение GetDbContext позволяет создавать контекст подключения непосредственно из объекта HttpRequest. Необработанное подключение может вызвать проблемы при работе с базой данных, поэтому оно завершается в OnHttpRequestClose. Вы можете зарегистрировать обработчик на HTTP-сервере в своем билдере или непосредственно с помощью HttpServer.RegisterHandler. // Program.cs class Program { static void Main(string[] args) { using var app = HttpServer.CreateBuilder() .UseHandler<DatabaseConnectionHandler>() .Build(); app.Router.SetObject(new UserController()); app.Start(); } } С этим UsersController может использовать контекст базы данных следующим образом: // UserController.cs [RoutePrefix(\"/users\")] public class UserController : ApiController { [RouteGet()] public async Task<HttpResponse> List(HttpRequest request) { var db = request.GetDbContext(); var users = db.Users.ToArray(); return JsonOk(users); } [RouteGet(\"<id>\")] public async Task<HttpResponse> View(HttpRequest request) { var db = request.GetDbContext(); var userId = request.GetQueryValue<int>(\"id\"); var user = db.Users.FirstOrDefault(u => u.Id == userId); return JsonOk(user); } [RoutePost] public async Task<HttpResponse> Create(HttpRequest request) { var db = request.GetDbContext(); var user = JsonSerializer.Deserialize<User>(request.Body); ArgumentNullException.ThrowIfNull(user); db.Users.Add(user); await db.SaveChangesAsync(); return JsonMessage(\"User added.\"); } } Код выше использует методы JsonOk и JsonMessage, которые встроены в ApiController, который наследуется от RouterController: // ApiController.cs public class ApiController : RouterModule { public HttpResponse JsonOk(object value) { return new HttpResponse(200) .WithContent(JsonContent.Create(value, null, new JsonSerializerOptions() { PropertyNameCaseInsensitive = true })); } public HttpResponse JsonMessage(string message, int statusCode = 200) { return new HttpResponse(statusCode) .WithContent(JsonContent.Create(new { Message = message })); } } Разработчики могут реализовать сессии, контексты и подключения к базе данных с помощью этого класса. Предоставленный код демонстрирует практический пример с DatabaseConnectionHandler, автоматизируя освобождение подключения к базе данных в конце каждого запроса. Интеграция проста, обработчики регистрируются во время настройки сервера. Класс HttpServerHandler предоставляет мощный набор инструментов для управления ресурсами и расширения поведения Sisk в HTTP-приложениях."
  },
  "docs/ru/advanced/manual-setup.html": {
    "href": "docs/ru/advanced/manual-setup.html",
    "title": "Руководство (упрощенный) | Sisk Framework",
    "keywords": "Руководство (упрощенный) В этом разделе мы создадим наш HTTP-сервер без каких-либо предварительно определенных стандартов, совершенно абстрактно. Здесь вы можете вручную построить, как будет функционировать ваш HTTP-сервер. У каждого ListeningHost есть маршрутизатор, и HTTP-сервер может иметь несколько ListeningHosts, каждый из которых указывает на другой хост на другом порту. Сначала нам нужно понять концепцию запроса/ответа. Она довольно проста: на каждый запрос должен быть ответ. Sisk также следует этому принципу. Давайте создадим метод, который отвечает сообщением \"Привет, мир!\" в формате HTML, указав код состояния и заголовки. // Program.cs using Sisk.Core.Http; using Sisk.Core.Routing; static HttpResponse IndexPage(HttpRequest request) { HttpResponse indexResponse = new HttpResponse { Status = System.Net.HttpStatusCode.OK, Content = new HtmlContent(@\" <html> <body> <h1>Привет, мир!</h1> </body> </html> \") }; return indexResponse; } Следующим шагом является связывание этого метода с маршрутом HTTP. Маршрутизаторы Маршрутизаторы - это абстракции маршрутов запросов и служат мостом между запросами и ответами для службы. Маршрутизаторы управляют маршрутами службы, функциями и ошибками. Маршрутизатор может иметь несколько маршрутов, и каждый маршрут может выполнять различные операции на этом пути, например, выполнять функцию, отображать страницу или предоставлять ресурс с сервера. Создадим наш первый маршрутизатор и свяжем наш метод IndexPage с путем индекса. Router mainRouter = new Router(); // SetRoute свяжет все маршруты индекса с нашим методом. mainRouter.SetRoute(RouteMethod.Get, \"/\", IndexPage); Теперь наш маршрутизатор может получать запросы и отправлять ответы. Однако mainRouter не привязан к хосту или серверу, поэтому он не будет работать самостоятельно. Следующим шагом является создание нашего ListeningHost. Слушатели и порты ListeningHost может размещать маршрутизатор и несколько портов прослушивания для одного и того же маршрутизатора. ListeningPort - это префикс, по которому HTTP-сервер будет прослушивать. Здесь мы можем создать ListeningHost, который указывает на два конечных пункта для нашего маршрутизатора: ListeningHost myHost = new ListeningHost { Router = new Router(), Ports = new ListeningPort[] { new ListeningPort(\"http://localhost:5000/\") } }; Теперь наш HTTP-сервер будет прослушивать указанные конечные точки и перенаправлять свои запросы на наш маршрутизатор. Настройка сервера Настройка сервера отвечает за большую часть поведения самого HTTP-сервера. В этой конфигурации мы можем связать ListeningHosts с нашим сервером. HttpServerConfiguration config = new HttpServerConfiguration(); config.ListeningHosts.Add(myHost); // Добавляем наш ListeningHost в эту конфигурацию сервера Затем мы можем создать наш HTTP-сервер: HttpServer server = new HttpServer(config); server.Start(); // Запускаем сервер Console.ReadKey(); // Предотвращает завершение работы приложения Теперь мы можем скомпилировать наше исполняемое приложение и запустить наш HTTP-сервер с помощью команды: dotnet watch Во время выполнения откройте браузер и перейдите по адресу сервера, и вы увидите:"
  },
  "docs/ru/advanced/multi-host-setup.html": {
    "href": "docs/ru/advanced/multi-host-setup.html",
    "title": "Множественные прослушивающие хосты на сервере | Sisk Framework",
    "keywords": "Множественные прослушивающие хосты на сервере Фреймворк Sisk всегда поддерживал использование более одного хоста на сервере, то есть одинокий HTTP-сервер может прослушивать несколько портов, и каждый порт имеет свой собственный роутер и свою собственную службу. Таким образом, легко разделять обязанности и управлять службами на одиночном HTTP-сервере с помощью Sisk. Пример ниже демонстрирует создание двух прослушивающих хостов, каждый из которых прослушивает другой порт, с разными роутерами и действиями. Подробнее об этой абстракции можно узнать в разделе ручное создание вашего приложения. static void Main(string[] args) { // создаем два прослушивающих хоста, каждый из которых имеет свой роутер и // прослушивает свой собственный порт // ListeningHost hostA = new ListeningHost(); hostA.Ports = [new ListeningPort(12000)]; hostA.Router = new Router(); hostA.Router.SetRoute(RouteMethod.Get, \"/\", request => new HttpResponse().WithContent(\"Привет от хоста A!\")); ListeningHost hostB = new ListeningHost(); hostB.Ports = [new ListeningPort(12001)]; hostB.Router = new Router(); hostB.Router.SetRoute(RouteMethod.Get, \"/\", request => new HttpResponse().WithContent(\"Привет от хоста B!\")); // создаем конфигурацию сервера и добавляем оба // прослушивающих хоста на него // HttpServerConfiguration configuration = new HttpServerConfiguration(); configuration.ListeningHosts.Add(hostA); configuration.ListeningHosts.Add(hostB); // создаем HTTP-сервер, который использует указанную // конфигурацию // HttpServer server = new HttpServer(configuration); // запускаем сервер server.Start(); Console.WriteLine(\"Попробуйте обратиться к хосту A по адресу {0}\", server.ListeningPrefixes[0]); Console.WriteLine(\"Попробуйте обратиться к хосту B по адресу {0}\", server.ListeningPrefixes[1]); Thread.Sleep(-1); }"
  },
  "docs/ru/advanced/request-lifecycle.html": {
    "href": "docs/ru/advanced/request-lifecycle.html",
    "title": "Жизненный цикл запроса | Sisk Framework",
    "keywords": "Жизненный цикл запроса Эта диаграмма объясняет жизненный цикл HTTP-запроса с момента его поступления на сервер до момента его доставки клиенту."
  },
  "docs/ru/changelogs.html": {
    "href": "docs/ru/changelogs.html",
    "title": "Журналы изменений | Sisk Framework",
    "keywords": "Журналы изменений Каждое изменение, внесенное в Sisk, записывается в журнал изменений. Вы можете просмотреть журналы изменений для всех версий Sisk здесь."
  },
  "docs/ru/deploying.html": {
    "href": "docs/ru/deploying.html",
    "title": "Развертывание | Sisk Framework",
    "keywords": "Развертывание Процесс развертывания приложения Sisk состоит в публикации вашего проекта в production. Хотя процесс относительно прост, стоит отметить детали, которые могут быть фатальными для безопасности и стабильности инфраструктуры развертывания. В идеале вы должны быть готовы развернуть свое приложение в облако после проведения всех возможных тестов, чтобы убедиться, что оно готово к работе. Публикация вашего приложения Публикация вашего приложения или службы Sisk заключается в создании готовых и оптимизированных для production бинарных файлов. В этом примере мы скомпилируем бинарные файлы для production, чтобы они работали на машине, на которой установлен .NET Runtime. Вам понадобится .NET SDK, установленный на вашей машине, чтобы построить ваше приложение, и .NET Runtime, установленный на целевом сервере, чтобы запустить ваше приложение. Вы можете узнать, как установить .NET Runtime на вашем сервере Linux здесь, Windows и Mac OS. В папке, где находится ваш проект, откройте терминал и используйте команду .NET publish: dotnet publish -r linux-x64 -c Release Это создаст ваши бинарные файлы внутри bin/Release/publish/linux-x64. Note Если ваше приложение работает с помощью пакета Sisk.ServiceProvider, вам следует скопировать ваш service-config.json на хост-сервер вместе со всеми сгенерированными dotnet publish бинарными файлами. Вы можете оставить файл предварительно настроенным с переменными среды, портами прослушивания, хостами и дополнительными конфигурациями сервера. Следующим шагом является перемещение этих файлов на сервер, где будет размещено ваше приложение. После этого предоставьте исполняемые права вашему бинарному файлу. В этом случае, предположим, что имя вашего проекта - \"my-app\": cd /home/htdocs chmod +x my-app ./my-app После запуска вашего приложения проверьте, не выдает ли оно каких-либо сообщений об ошибках. Если ошибок нет, значит, ваше приложение запущено. На этом этапе, вероятно, будет невозможно получить доступ к вашему приложению извне вашего сервера, так как не были настроены правила доступа, такие как брандмауэр. Мы рассмотрим это на следующих этапах. У вас должен быть адрес виртуального хоста, на котором ваше приложение прослушивает. Это настраивается вручную в приложении и зависит от того, как вы создаете свою службу Sisk. Если вы не используете пакет Sisk.ServiceProvider, вы должны найти его там, где вы определили экземпляр HttpServer: HttpServer server = HttpServer.Emit(5000, out HttpServerConfiguration config, out var host, out var router); // sisk должен прослушивать по http://localhost:5000/ Ассоциирование ListeningHost вручную: config.ListeningHosts.Add(new ListeningHost(\"https://localhost:5000/\", router)); Или если вы используете пакет Sisk.ServiceProvider, в вашем service-config.json: { \"Server\": { }, \"ListeningHost\": { \"Ports\": [ \"http://localhost:5000/\" ] } } Из этого мы можем создать обратный прокси, который будет прослушивать вашу службу и делать трафик доступным через открытую сеть. Проксирование вашего приложения Проксирование вашей службы означает, что вы не будете напрямую открывать вашу службу Sisk для внешней сети. Эта практика очень распространена при развертывании серверов, потому что: Позволяет ассоциировать SSL-сертификат с вашим приложением; Создавать правила доступа перед доступом к службе и избегать перегрузок; Управлять пропускной способностью и ограничениями на запросы; Разделять балансировщики нагрузки для вашего приложения; Предотвращать нанесение ущерба безопасности инфраструктуре при сбое. Вы можете обслуживать ваше приложение через обратный прокси, такой как Nginx или Apache, или вы можете использовать туннель http-over-dns, такой как Cloudflared. Также не забудьте правильно разрешить заголовки перенаправления вашего прокси, чтобы получить информацию о клиенте, такую как IP-адрес и хост, через решатели перенаправления. Следующим шагом после создания вашего туннеля, настройки брандмауэра и запуска вашего приложения является создание службы для вашего приложения. Note Использование SSL-сертификатов непосредственно в службе Sisk на системах, отличных от Windows, невозможно. Это связано с реализацией HttpListener, которая является центральным модулем для того, как осуществляется управление очередию HTTP в Sisk, и эта реализация отличается в зависимости от операционной системы. Вы можете использовать SSL в службе Sisk, если вы ассоциируете сертификат с виртуальным хостом с помощью IIS. Для других систем настоятельно рекомендуется использовать обратный прокси. Создание службы Создание службы сделает ваше приложение всегда доступным, даже после перезапуска экземпляра сервера или непредвиденного сбоя. В этом простом руководстве мы будем использовать содержимое предыдущего руководства в качестве демонстрации, чтобы ваше приложение всегда было активным. Перейдите в папку, где находятся файлы конфигурации службы: cd /etc/systemd/system Создайте файл my-app.service и включите в него содержимое: [Unit] Description=<описание вашего приложения> [Service] # задайте пользователя, который запустит службу User=<пользователь, который запустит службу> # путь ExecStart не является относительным к WorkingDirectory. # задайте его как полный путь к исполняемому файлу WorkingDirectory=/home/htdocs ExecStart=/home/htdocs/my-app # задайте службу для автоматического перезапуска при сбое Restart=always RestartSec=3 [Install] WantedBy=multi-user.target Перезапустите модуль менеджера служб: sudo systemctl daemon-reload Запустите новую созданную службу по имени файла, который вы задали, и проверьте, работают ли они: sudo systemctl start my-app sudo systemctl status my-app Теперь, если ваше приложение запущено (\"Active: active\"), включите службу, чтобы она запускалась после перезагрузки системы: sudo systemctl enable my-app Теперь вы готовы представить ваше приложение Sisk всему миру."
  },
  "docs/ru/extensions/basic-auth.html": {
    "href": "docs/ru/extensions/basic-auth.html",
    "title": "Базовая аутентификация | Sisk Framework",
    "keywords": "Базовая аутентификация Пакет Basic Auth добавляет обработчик запросов, способный обрабатывать схему аутентификации по basic в вашем приложении Sisk с минимальной конфигурацией и усилиями. Базовая аутентификация HTTP - это минимальная форма ввода аутентификации запросов пользователем по идентификатору и паролю, где сеанс контролируется исключительно клиентом, и нет токенов аутентификации или доступа. Подробнее о схеме аутентификации Basic см. в спецификации MDN. Установка Чтобы начать, установите пакет Sisk.BasicAuth в свой проект: > dotnet add package Sisk.BasicAuth Более подробную информацию о том, как установить его в вашем проекте, см. в хранилище Nuget. Создание обработчика аутентификации Вы можете управлять схемой аутентификации для всего модуля или для отдельных маршрутов. Для этого сначала напишем наш первый обработчик базовой аутентификации. В примере ниже устанавливается соединение с базой данных, проверяется существование пользователя и действительность пароля, а затем пользователь сохраняется в контекстном мешке. public class UserAuthHandler : BasicAuthenticateRequestHandler { public UserAuthHandler() : base() { Realm = \"Чтобы войти на эту страницу, пожалуйста, укажите свои учетные данные.\"; } public override HttpResponse? OnValidating(BasicAuthenticationCredentials credentials, HttpContext context) { DbContext db = new DbContext(); // в этом случае мы используем адрес электронной почты в качестве поля идентификатора пользователя, поэтому мы будем искать пользователя по его адресу электронной почты. User? user = db.Users.FirstOrDefault(u => u.Email == credentials.UserId); if (user == null) { return base.CreateUnauthorizedResponse(\"Извините! Пользователь по этому адресу электронной почты не найден.\"); } // проверяет, что пароль учетных данных действителен для этого пользователя. if (!user.ValidatePassword(credentials.Password)) { return base.CreateUnauthorizedResponse(\"Неверные учетные данные.\"); } // добавляет залогинившегося пользователя в контекст HTTP // и продолжает выполнение context.Bag.Add(\"loggedUser\", user); return null; } } Поэтому просто свяжите этот обработчик запросов с нашим маршрутом или классом. public class UsersController { [RouteGet(\"/\")] [RequestHandler(typeof(UserAuthHandler))] public string Index(HttpRequest request) { User loggedUser = (User)request.Context.RequestBag[\"loggedUser\"]; return \"Привет, \" + loggedUser.Name + \"!\"; } } Или используя класс RouterModule: public class UsersController : RouterModule { public ClientModule() { // теперь все маршруты внутри этого класса будут обрабатываться // UserAuthHandler. base.HasRequestHandler(new UserAuthHandler()); } [RouteGet(\"/\")] public string Index(HttpRequest request) { User loggedUser = (User)request.Context.RequestBag[\"loggedUser\"]; return \"Привет, \" + loggedUser.Name + \"!\"; } } Примечания Основная ответственность за базовую аутентификацию выполняется на стороне клиента. Хранение, управление кэшем и шифрование выполняются локально на клиенте. Сервер только получает учетные данные и проверяет, разрешен ли доступ. Обратите внимание, что этот метод не является одним из самых безопасных, поскольку возлагает значительную ответственность на клиента, которое может быть трудно отслеживать и поддерживать безопасность его учетных данных. Кроме того, крайне важно, чтобы пароли передавались в защищенном контексте соединения (SSL), поскольку у них нет никакого встроенного шифрования. Краткое перехвата заголовков запроса может раскрыть учетные данные доступа вашего пользователя. Для приложений в production выбирайте более надежные решения для аутентификации и избегайте использования слишком большого количества готовых компонентов, поскольку они могут не адаптироваться к потребностям вашего проекта и привести к возникновению уязвимостей безопасности."
  },
  "docs/ru/extensions/ini-configuration.html": {
    "href": "docs/ru/extensions/ini-configuration.html",
    "title": "Провайдер конфигурации INI | Sisk Framework",
    "keywords": "Провайдер конфигурации INI Sisk предоставляет способ получения настроек запуска, отличных от JSON. Фактически, любой pipeline, реализующий IConfigurationReader, может использоваться с PortableConfigurationBuilder.WithConfigurationPipeline, считывая конфигурацию сервера из любого типа файла. Пакет Sisk.IniConfiguration предоставляет потокоориентированный читатель файлов INI, который не выбрасывает исключения для распространенных синтаксических ошибок и имеет простую синтаксис конфигурации. Этот пакет может использоваться вне фреймворка Sisk, предлагая гибкость для проектов, которым требуется эффективный читатель документа INI. Установка Для установки пакета можно начать с: $ dotnet add package Sisk.IniConfiguration и использовать его в своем коде, как показано в примере ниже: class Program { static HttpServerHostContext Host = null!; static void Main(string[] args) { Host = HttpServer.CreateBuilder() .UsePortableConfiguration(config => { config.WithConfigFile(\"app.ini\", createIfDontExists: true); // добавляет IniConfigurationPipeline к pipeline чтения конфигурации config.WithConfigurationPipeline<IniConfigurationPipeline>(); }) .UseRouter(r => { r.MapGet(\"/\", SayHello); }) .Build(); Host.Start(); } static HttpResponse SayHello(HttpRequest request) { string? name = Host.Parameters[\"name\"] ?? \"world\"; return new HttpResponse($\"Hello, {name}!\"); } } Код выше будет искать файл app.ini в текущей директории процесса (CurrentDirectory). Файл INI выглядит так: [Server] # Поддерживаются несколько адресов прослушивания Listen = http://localhost:5552/ Listen = http://localhost:5553/ ThrowExceptions = false AccessLogsStream = console [Cors] AllowMethods = GET, POST AllowHeaders = Content-Type, Authorization AllowOrigin = * [Parameters] Name = \"Kanye West\" Синтаксис и формат INI Текущий реализованный формат: Имена свойств и разделов нечувствительны к регистру. Имена свойств и значения отбрасываются. Значения могут быть заключены в одинарные или двойные кавычки. Кавычки могут содержать переносы строк. Комментарии поддерживаются с помощью # и ;. Также разрешены ** trailing comments**. Свойства могут иметь несколько значений. Более подробно документация по \"формату\" парсера INI, используемого в Sisk, доступна на GitHub. Используя следующий код INI в качестве примера: One = 1 Value = this is an value Another value = \"this value has an line break on it\" ; the code below has some colors [some section] Color = Red Color = Blue Color = Yellow ; do not use yellow Парсировать его с помощью: // парсить текст INI из строки IniDocument doc = IniDocument.FromString(iniText); // получить одно значение string? one = doc.Global.GetOne(\"one\"); string? anotherValue = doc.Global.GetOne(\"another value\"); // получить несколько значений string[]? colors = doc.GetSection(\"some section\")?.GetMany(\"color\"); Параметры конфигурации Раздел и имя Разрешены ли несколько значений Описание Server.Listen Да Адреса/порты прослушивания сервера. Server.Encoding Нет Кодировка по умолчанию сервера. Server.MaximumContentLength Нет Максимальный размер контента сервера в байтах. Server.IncludeRequestIdHeader Нет Указывает, должен ли HTTP-сервер отправлять заголовок X-Request-Id. Server.ThrowExceptions Нет Указывает, должны ли необработанные исключения выбрасываться. Server.AccessLogsStream Нет Указывает поток вывода журнала доступа. Server.ErrorsLogsStream Нет Указывает поток вывода журнала ошибок. Cors.AllowMethods Нет Указывает значение заголовка CORS Allow-Methods. Cors.AllowHeaders Нет Указывает значение заголовка CORS Allow-Headers. Cors.AllowOrigins Нет Указывает несколько заголовков Allow-Origin, разделенных запятыми. AllowOrigins для получения более подробной информации. Cors.AllowOrigin Нет Указывает один заголовок Allow-Origin. Cors.ExposeHeaders Нет Указывает значение заголовка CORS Expose-Headers. Cors.AllowCredentials Нет Указывает значение заголовка CORS Allow-Credentials. Cors.MaxAge Нет Указывает значение заголовка CORS Max-Age."
  },
  "docs/ru/extensions/json-rpc.html": {
    "href": "docs/ru/extensions/json-rpc.html",
    "title": "| Sisk Framework",
    "keywords": "Экспериментальный модуль Sisk имеет API JSON-RPC 2.0, который позволяет создавать еще более простые приложения. Это расширение строго реализует интерфейс транспорта JSON-RPC 2.0 и предлагает транспорт через HTTP GET, POST-запросы и также WebSocket с Sisk. Вы можете установить расширение с помощью Nuget с помощью следующей команды. Обратите внимание, что в экспериментальных/бета-версиях вам следует включить опцию поиска предварительных версий пакетов в Visual Studio. dotnet add package Sisk.JsonRpc Интерфейс транспорта JSON-RPC - это протокол асинхронного удаленного вызова процедуры (RDP), который использует JSON для односторонней передачи данных. Запрос JSON-RPC обычно идентифицируется ID, а ответ поставляется по тому же ID, который был отправлен в запросе. Не все запросы требуют ответа, которые называются \"уведомлениями\". Спецификация JSON-RPC 2.0 подробно объясняет, как работает транспорт. Этот транспорт независим от того, где он будет использоваться. Sisk реализует этот протокол через HTTP, следуя согласованностям JSON-RPC over HTTP, которые частично поддерживают GET-запросы, но полностью поддерживают POST-запросы. Также поддерживаются WebSocket, обеспечивающие асинхронную передачу сообщений. Запрос JSON-RPC похож на: { \"jsonrpc\": \"2.0\", \"method\": \"Sum\", \"params\": [1, 2, 4], \"id\": 1 } А успешный ответ похож на: { \"jsonrpc\": \"2.0\", \"result\": 7, \"id\": 1 } Методы JSON-RPC В следующем примере показано, как создать API JSON-RPC с использованием Sisk. Класс математических операций выполняет удаленные операции и доставляет сериализованный ответ клиенту. using var app = HttpServer.CreateBuilder(port: 5555) .UseJsonRPC((sender, args) => { // добавляем все методы, помеченные WebMethod, в обработчик JSON-RPC args.Handler.Methods.AddMethodsFromType(new MathOperations()); // связывает маршрут /service с обработчиком JSON-RPC для POST и GET-запросов args.Router.MapPost(\"/service\", args.Handler.Transport.HttpPost); args.Router.MapGet(\"/service\", args.Handler.Transport.HttpGet); // создает обработчик WebSocket на GET /ws args.Router.MapGet(\"/ws\", request => { var ws = request.GetWebSocket(); ws.OnReceive += args.Handler.Transport.WebSocket; ws.WaitForClose(timeout: TimeSpan.FromSeconds(30)); return ws.Close(); }); }) .Build(); await app.StartAsync(); public class MathOperations { [WebMethod] public float Sum(float a, float b) { return a + b; } [WebMethod] public double Sqrt(float a) { return Math.Sqrt(a); } } В приведенном выше примере методы Sum и Sqrt будут сопоставлены с обработчиком JSON-RPC, и эти методы будут доступны по GET /service, POST /service и GET /ws. Имена методов не чувствительны к регистру. Параметры метода автоматически десериализуются в их конкретные типы. Поддерживается использование запроса с именованными параметрами. Сериализация JSON выполняется библиотекой LightJson. При некорректной десериализации типа можно создать конкретный преобразователь JSON для этого типа и связать его с JsonSerializerOptions позже. Вы также можете получить объект $.params из запроса JSON-RPC непосредственно в своем методе. [WebMethod] public float Sum(JsonArray|JsonObject @params) { ... } Для этого @params должен быть единственным параметром в вашем методе с именем params (на C#, необходимо использовать @ для экранирования этого имени параметра). Десериализация параметров выполняется как для именованных объектов, так и для позиционных массивов. Например, следующий метод может быть вызван удаленно как с помощью запросов: [WebMethod] public float AddUserToStore(string apiKey, User user, UserStore store) { ... } Для массива необходимо соблюдать порядок параметров. { \"jsonrpc\": \"2.0\", \"method\": \"AddUserToStore\", \"params\": [ \"1234567890\", { \"name\": \"John Doe\", \"email\": \"john@example.com\" }, { \"name\": \"My Store\" } ], \"id\": 1 } Настройка сериализатора Вы можете настроить сериализатор JSON в свойстве JsonRpcHandler.JsonSerializerOptions. В этом свойстве можно включить использование JSON5 для десериализации сообщений. Хотя это не соответствует спецификации JSON-RPC 2.0, JSON5 является расширением JSON, которое позволяет писать более удобочитаемые и понятные тексты. using var host = HttpServer.CreateBuilder ( 5556 ) .UseJsonRPC ( ( o, e ) => { // использует компаратор имен, очищенный от символов e.Handler.JsonSerializerOptions.PropertyNameComparer = new JsonSanitizedComparer (); // включает JSON5 для интерпретатора JSON. даже при активации этого параметра, все равно разрешается использовать обычный JSON e.Handler.JsonSerializerOptions.SerializationFlags = LightJson.Serialization.JsonSerializationFlags.Json5; // связывает маршрут POST /service с обработчиком JSON-RPC e.Router.MapPost ( \"/service\", e.Handler.Transport.HttpPost ); } ) .Build (); host.Start ();"
  },
  "docs/ru/extensions/service-providers.html": {
    "href": "docs/ru/extensions/service-providers.html",
    "title": "Поставщики услуг | Sisk Framework",
    "keywords": "Поставщики услуг Поставщики услуг - это способ перенести ваше приложение Sisk в разные среды с помощью портативного файла конфигурации. Эта функция позволяет изменять порт сервера, параметры и другие опции без необходимости модификации кода приложения для каждой среды. Этот модуль зависит от синтаксиса построения Sisk и может быть настроен с помощью метода UsePortableConfiguration. Поставщик конфигурации реализуется с помощью IConfigurationProvider, который предоставляет читатель конфигурации и может принимать любую реализацию. По умолчанию Sisk предоставляет читатель конфигурации JSON, но также есть пакет для файлов INI. Вы также можете создать свой собственный поставщик конфигурации и зарегистрировать его с помощью: using var app = HttpServer.CreateBuilder() .UsePortableConfiguration(config => { config.WithConfigReader<MyConfigurationReader>(); }) .Build(); Как уже упоминалось ранее, по умолчанию используется поставщик JSON-файла. По умолчанию искомый файл называется service-config.json, и он ищется в текущем каталоге выполняемого процесса, а не в каталоге исполняемого файла. Вы можете изменить имя файла, а также то, где Sisk должен искать файл конфигурации, с помощью: using Sisk.Core.Http; using Sisk.Core.Http.Hosting; using var app = HttpServer.CreateBuilder() .UsePortableConfiguration(config => { config.WithConfigFile(\"config.toml\", createIfDontExists: true, lookupDirectories: ConfigurationFileLookupDirectory.CurrentDirectory | ConfigurationFileLookupDirectory.AppDirectory); }) .Build(); Код выше будет искать файл config.toml в текущем каталоге выполняемого процесса. Если файл не найден, он будет искать его в каталоге, где находится исполняемый файл. Если файл не существует, параметр createIfDontExists будет выполнен, создавая файл без содержимого в последнем протестированном пути (на основе lookupDirectories), и в консоли будет выброшено исключение, предотвращая инициализацию приложения. Tip Вы можете ознакомиться с исходным кодом читателя конфигурации INI и читателя конфигурации JSON, чтобы понять, как реализован IConfigurationProvider. Чтение конфигураций из JSON-файла По умолчанию Sisk предоставляет поставщик конфигурации, который считывает конфигурации из JSON-файла. Этот файл следует фиксированной структуре и состоит из следующих параметров: { \"Server\": { \"DefaultEncoding\": \"UTF-8\", \"ThrowExceptions\": true, \"IncludeRequestIdHeader\": true }, \"ListeningHost\": { \"Label\": \"My sisk application\", \"Ports\": [ \"http://localhost:80/\", \"https://localhost:443/\", // В JSON-файлах также поддерживаются комментарии ], \"CrossOriginResourceSharingPolicy\": { \"AllowOrigin\": \"*\", \"AllowOrigins\": [ \"*\" ], // новое с версии 0.14 \"AllowMethods\": [ \"*\" ], \"AllowHeaders\": [ \"*\" ], \"MaxAge\": 3600 }, \"Parameters\": { \"MySqlConnection\": \"server=localhost;user=root;\" } } } Параметры, созданные из файла конфигурации, можно получить в конструкторе сервера: using var app = HttpServer.CreateBuilder() .UsePortableConfiguration(config => { config.WithParameters(paramCollection => { string databaseConnection = paramCollection.GetValueOrThrow(\"MySqlConnection\"); }); }) .Build(); Каждый читатель конфигурации предоставляет способ чтения параметров инициализации сервера. Некоторые свойства указаны как находящиеся в окружении процесса, а не определенные в файле конфигурации, например, конфиденциальные данные API, ключи API и т. д. Структура файла конфигурации JSON-файл конфигурации состоит из следующих свойств: Свойство Обязательно Описание Server Да Представляет сам сервер со своими настройками. Server.AccessLogsStream Опционально По умолчанию равно console. Указывает поток вывода журнала доступа. Может быть именем файла, null или console. Server.ErrorsLogsStream Опционально По умолчанию равно null. Указывает поток вывода журнала ошибок. Может быть именем файла, null или console. Server.MaximumContentLength Опционально По умолчанию равно 0. Указывает максимальный размер контента в байтах. Ноль означает бесконечность. Server.IncludeRequestIdHeader Опционально По умолчанию равно false. Указывает, должен ли HTTP-сервер отправлять заголовок X-Request-Id. Server.ThrowExceptions Опционально По умолчанию равно true. Указывает, должны ли необработанные исключения быть брошены. Установите значение false при работе в режиме производства и true при отладке. ListeningHost Да Представляет хост, на котором слушает сервер. ListeningHost.Label Опционально Представляет метку приложения. ListeningHost.Ports Да Представляет массив строк, соответствующих синтаксису ListeningPort. ListeningHost.CrossOriginResourceSharingPolicy Опционально Настройка заголовков CORS для приложения. ListeningHost.CrossOriginResourceSharingPolicy.AllowCredentials Опционально По умолчанию равно false. Указывает заголовок Allow-Credentials. ListeningHost.CrossOriginResourceSharingPolicy.ExposeHeaders Опционально По умолчанию равно null. Это свойство ожидает массив строк. Указывает заголовок Expose-Headers. ListeningHost.CrossOriginResourceSharingPolicy.AllowOrigin Опционально По умолчанию равно null. Это свойство ожидает строку. Указывает заголовок Allow-Origin. ListeningHost.CrossOriginResourceSharingPolicy.AllowOrigins Опционально По умолчанию равно null. Это свойство ожидает массив строк. Указывает несколько заголовков Allow-Origin. См. AllowOrigins для получения более подробной информации. ListeningHost.CrossOriginResourceSharingPolicy.AllowMethods Опционально По умолчанию равно null. Это свойство ожидает массив строк. Указывает заголовок Allow-Methods. ListeningHost.CrossOriginResourceSharingPolicy.AllowHeaders Опционально По умолчанию равно null. Это свойство ожидает массив строк. Указывает заголовок Allow-Headers. ListeningHost.CrossOriginResourceSharingPolicy.MaxAge Опционально По умолчанию равно null. Это свойство ожидает целое число. Указывает заголовок Max-Age в секундах. ListeningHost.Parameters Опционально Указывает свойства, передаваемые в метод настройки приложения."
  },
  "docs/ru/extensions/ssl-proxy.html": {
    "href": "docs/ru/extensions/ssl-proxy.html",
    "title": "SSL Прокси | Sisk Framework",
    "keywords": "SSL Прокси Warning Эта функция экспериментальная и не должна использоваться в production. Обратитесь к этому документу, если хотите, чтобы Sisk работал с SSL. Модуль Sisk SSL Proxy предоставляет HTTPS-соединение для ListeningHost в Sisk и перенаправляет HTTPS-сообщения в небезопасный HTTP-контекст. Модуль был создан для предоставления SSL-соединения для службы, которая использует HttpListener для работы, которая не поддерживает SSL. Прокси работает в той же программе и прослушивает HTTP/1.1-сообщения, перенаправляя их по тому же протоколу в Sisk. В настоящее время эта функция является высокоэкспериментальной и может быть настолько нестабильной, что ее нельзя использовать в production. В настоящее время SslProxy поддерживает почти все функции HTTP/1.1, такие как keep-alive, chunked encoding, websockets и т. д. Для открытого соединения с SSL-прокси создается TCP-соединение с целевым сервером, а прокси перенаправляется на установленное соединение. SslProxy можно использовать с HttpServer.CreateBuilder следующим образом: using var app = HttpServer.CreateBuilder(port: 5555) .UseRouter(r => { r.MapGet(\"/\", request => { return new HttpResponse(\"Hello, world!\"); }); }) // добавить SSL в проект .UseSsl( sslListeningPort: 5567, new X509Certificate2(@\".\\ssl.pfx\", password: \"12345\") ) .Build(); app.Start(); Вам необходимо предоставить действительный SSL-сертификат для прокси. Чтобы убедиться, что сертификат принимается браузерами, не забудьте импортировать его в операционную систему, чтобы он работал правильно."
  },
  "docs/ru/features/discard-syntax.html": {
    "href": "docs/ru/features/discard-syntax.html",
    "title": "Синтаксис Discard | Sisk Framework",
    "keywords": "Синтаксис Discard HTTP-сервер можно использовать для прослушивания запроса обратного вызова от действия, например, аутентификации OAuth, и можно отказаться от него после получения этого запроса. Это может быть полезно в тех случаях, когда вам нужна фоновая задача, но вы не хотите настраивать для нее весь HTTP-приложение. В следующем примере показано, как создать прослушивающий HTTP-сервер на порту 5555 с помощью CreateListener и ожидать следующий контекст: using (var server = HttpServer.CreateListener(5555)) { // ожидание следующего HTTP-запроса var context = await server.WaitNextAsync(); Console.WriteLine($\"Запрошенный путь: {context.Request.Path}\"); } Функция WaitNext ожидает следующий контекст обработанного запроса. После получения результата этой операции сервер уже полностью обработал запрос и отправил ответ клиенту."
  },
  "docs/ru/features/instancing.html": {
    "href": "docs/ru/features/instancing.html",
    "title": "Создание экземпляров на запрос | Sisk Framework",
    "keywords": "Создание экземпляров на запрос Часто используются члены и экземпляры, которые существуют в течение всей жизни запроса, например, соединение с базой данных, аутентифицированный пользователь или токен сеанса. Одним из способов этого является использование HttpContext.RequestBag, которое создает словарь, существующий в течение всей жизни запроса. Этот словарь можно получить с помощью обработчиков запросов и определить переменные в течение всего запроса. Например, обработчик запроса, аутентифицирующий пользователя, устанавливает этого пользователя в HttpContext.RequestBag, и в логике запроса этот пользователь можно получить с помощью HttpContext.RequestBag.Get<User>(). Вот пример: public class AuthenticateUser : IRequestHandler { public RequestHandlerExecutionMode ExecutionMode { get; init; } = RequestHandlerExecutionMode.BeforeResponse; public HttpResponse? Execute(HttpRequest request, HttpContext context) { User authenticatedUser = AuthenticateUser(request); context.RequestBag.Set(authenticatedUser); return null; // перейти к следующему обработчику запроса или логике запроса } } [RouteGet(\"/hello\")] [RequestHandler<AuthenticateUser>] public static HttpResponse SayHello(HttpRequest request) { var authenticatedUser = request.Bag.Get<User>(); return new HttpResponse() { Content = new StringContent($\"Hello {authenticatedUser.Name}!\") }; } Это предварительный пример этой операции. Экземпляр User был создан в обработчике запроса, предназначенном для аутентификации, и все маршруты, использующие этот обработчик запроса, будут иметь гарантию, что в их экземпляре HttpContext.RequestBag будет User. Можно определить логику для получения экземпляров, если они не были ранее определены в RequestBag, с помощью методов, таких как GetOrAdd или GetOrAddAsync. С версии 1.3 была введена статическая свойство HttpContext.Current, позволяющая получить доступ к выполняющемуся в данный момент HttpContext контекста запроса. Это позволяет экспортировать члены HttpContext за пределами текущего запроса и определять экземпляры в объектах маршрутов. Ниже приведен пример, в котором определяется контроллер, имеющий члены, которые часто используются в контексте запроса. public abstract class Controller : RouterModule { public DbContext Database { get { // создать DbContext или получить существующий return HttpContext.Current.RequestBag.GetOrAdd(() => new DbContext()); } } // следующий ряд будет выбрасывать ошибку, если свойство будет обращаться к нему, когда пользователь не определен в запросе public User AuthenticatedUser { get => HttpContext.Current.RequestBag.Get<User>(); } // Экспортирование экземпляра HttpRequest также поддерживается public HttpRequest Request { get => HttpContext.Current.Request; } } И определение типов, наследующих от контроллера: [RoutePrefix(\"/api/posts\")] public class PostsController : Controller { [RouteGet] public IEnumerable<Blog> ListPosts() { return Database.Posts .Where(post => post.AuthorId == AuthenticatedUser.Id) .ToList(); } [RouteGet(\"<id>\")] public Post GetPost() { int blogId = Request.RouteParameters[\"id\"].GetInteger(); Post? post = Database.Posts .FirstOrDefault(post => post.Id == blogId && post.AuthorId == AuthenticatedUser.Id); return post ?? new HttpResponse(404); } } Для примера выше вам потребуется настроить обработчик значений в маршрутизаторе, чтобы объекты, возвращаемые маршрутизатором, преобразовывались в допустимый HttpResponse. Обратите внимание, что методы не имеют аргумента HttpRequest request, как в других методах. Это связано с тем, что с версии 1.3 маршрутизатор поддерживает два типа делегатов для маршрутизации ответов: RouteAction, который является по умолчанию делегатом, который получает аргумент HttpRequest, и ParameterlessRouteAction. Экземпляр HttpRequest все еще можно получить с помощью обоих делегатов через свойство Request статического HttpContext на потоке. В примере выше мы определили объект, который можно утилизировать, DbContext, и нам нужно убедиться, что все экземпляры, созданные в DbContext, будут утилизированы при завершении HTTP-сессии. Для этого мы можем использовать два способа. Первый - создать обработчик запроса, который выполняется после действия маршрутизатора, а второй - использовать пользовательский обработчик сервера. Для первого метода мы можем создать обработчик запроса inline непосредственно в методе OnSetup, унаследованном от RouterModule: public abstract class Controller : RouterModule { ... protected override void OnSetup(Router parentRouter) { base.OnSetup(parentRouter); HasRequestHandler(RequestHandler.Create( execute: (req, ctx) => { // получить один DbContext, определенный в контексте обработчика запроса, и утилизировать его ctx.RequestBag.GetOrDefault<DbContext>()?.Dispose(); return null; }, executionMode: RequestHandlerExecutionMode.AfterResponse)); } } Метод выше обеспечит утилизацию DbContext при завершении HTTP-сессии. Вы можете сделать это для более членов, которые должны быть утилизированы в конце ответа. Для второго метода вы можете создать пользовательский обработчик сервера, который утилизирует DbContext при завершении HTTP-сессии. public class ObjectDisposerHandler : HttpServerHandler { protected override void OnHttpRequestClose(HttpServerExecutionResult result) { result.Context.RequestBag.GetOrDefault<DbContext>()?.Dispose(); } } И использовать его в вашем билдере: using var host = HttpServer.CreateBuilder() .UseHandler<ObjectDisposerHandler>() .Build(); Это способ обработки очистки кода и разделения зависимостей запроса по типу модуля, который будет использоваться, что сокращает количество дублируемого кода в каждом действии маршрутизатора. Это практика, похожая на то, что используется в зависимостном впрыскивании в фреймворках, таких как ASP.NET."
  },
  "docs/ru/features/logging.html": {
    "href": "docs/ru/features/logging.html",
    "title": "Логирование | Sisk Framework",
    "keywords": "Логирование В Sisk можно настроить автоматическое запись в журналы доступа и ошибок. Можно определить ротацию логов, расширения и частоту. Класс LogStream предоставляет асинхронный способ записи логов и сохранения их в ожидающей очереди записи. В этой статье мы покажем вам, как настроить логирование для вашего приложения. Логи доступа на основе файлов Логи в файлы открывают файл, записывают строку текста и затем закрывают файл для каждой записанной строки. Эта процедура была принята для поддержания отзывчивости записи в журналах. config.AccessLogsStream = new LogStream(\"logs/access.log\"); В приведенном выше коде все входящие запросы будут записаны в файл logs/access.log. Обратите внимание, что файл создается автоматически, если он не существует, однако папка перед ним не создается. Не обязательно создавать каталог logs/, так как класс LogStream автоматически его создает. Логирование на основе потока Вы можете записывать файлы логов в объекты TextWriter, такие как Console.Out, передав объект TextWriter в конструктор: config.AccessLogsStream = new LogStream(Console.Out); Для каждой записи в потоке лога вызывается метод TextWriter.Flush(). Форматирование журнала доступа Вы можете настроить формат журнала доступа с помощью predefined переменных. Рассмотрите следующую строку: config.AccessLogsFormat = \"%dd/%dmm/%dy %tH:%ti:%ts %tz %ls %ri %rs://%ra%rz%rq [%sc %sd] %lin -> %lou in %lmsms [%{user-agent}]\"; Она запишет сообщение такого вида: 29/mar./2023 15:21:47 -0300 Executed ::1 http://localhost:5555/ \\[200 OK\\] 689B -> 707B in 84ms \\[Mozilla/5.0 (Windows NT 10.0; Win64; x64) Chrome/111.0.0.0 Safari/537.36\\] Вы можете отформатировать свой файл журнала, используя формат, описанный в таблице: Переменная Описание Пример %dd Текущая дата в формате 00 25 %dm Текущий месяц в формате 00 03 %dmm Текущий месяц в сокращенном формате mar. %dmmm Текущий месяц в полном формате Март %dy Текущий год в формате 0000 2023 %th Текущее время в формате 12 часов 03 %tH Текущее время в формате 24 часов 15 %ti Текущие минуты в формате 00 25 %ts Текущие секунды в формате 00 32 %tm Текущие миллисекунды в формате 000 633 %tz Текущая разница во времени в формате +/- 0000 +0300, -0500, +0000 %ri IP-адрес запрашивающего пользователя (может быть IPv4 или IPv6). 192.168.0.1 %rm Метод запроса в верхнем регистре. GET %rs Схема URL-адреса запрашивающего пользователя. https, http %ra Доменное имя URL-адреса запрашивающего пользователя. my.contorso.com:8080 %rh Хост URL-адреса запрашивающего пользователя. my.contorso.com %rp Порт URL-адреса запрашивающего пользователя. 8080 %rz Абсолютный путь URL-адреса запрашивающего пользователя. /index.html %rq Строка запроса URL-адреса запрашивающего пользователя. ?foo=bar&aaa=bbb %sc Код состояния ответа в формате 000. 404 %sd Описание кода состояния ответа. Не найдено %lin Размер входящего запроса в удобочитаемом виде. 12,5kb %lou Размер исходящего ответа в удобочитаемом виде. 65,8kb %lms Время обработки сервером запроса и отправки ответа в миллисекундах (000). 18 %{header} Получает значение заголовка HTTP, где header - это имя заголовка, или пустое значение, если заголовок не существует. Это поле нечувствительно к регистру. %{user-agent} Ротация логов Tip В Sisk 0.15 и более ранних версиях эта функция доступна только с пакетом Sisk.ServiceProvider. В Sisk 0.16 и более поздних версиях эта функция реализована в основном пакете. Вы можете настроить HTTP-сервер для вращения файлов логов в сжатый файл .gz, когда они достигают определенного размера. Размер проверяется периодически по лимиту, который вы определяете. config.AccessLogsStream = new LogStream(\"access.log\"); var rotater = new RotatingLogPolicy(config.AccessLogsStream); rotater.Configure(1024 * 1024, TimeSpan.FromHours(6)); В приведенном выше коде каждые шесть часов проверяется, достиг ли LogStream файла его лимита 1 МБ. Если да, то файл сжимается в .gz файл, а затем access.log очищается. Во время этого процесса запись в файл блокируется до тех пор, пока файл не будет сжат и очищен. Все строки, которые должны быть записаны в этот период, будут находиться в очереди ожидания окончания сжатия. Эта функция работает только с LogStreams на основе файлов. Логирование ошибок Когда сервер не выбрасывает ошибки в отладчик, он перенаправляет их в запись логов, если таковые имеются. Вы можете настроить запись ошибок с помощью: config.ThrowExceptions = false; config.ErrorsLogsStream = new LogStream(\"error.log\"); Эта свойство будет записывать что-либо в лог только в том случае, если ошибка не была захвачена обратным вызовом или свойством Router.CallbackErrorHandler. Ошибка, записанная сервером, всегда записывает дату и время, заголовки запроса (не тело), отладочную информацию об ошибке и информацию об ошибке вложенных исключений, если таковые имеются. Другие экземпляры логов Ваше приложение может иметь ноль или несколько LogStreams, нет ограничения на количество каналов логов, которые оно может иметь. Поэтому возможно направить логи вашего приложения в файл, отличный от по умолчанию AccessLog или ErrorLog. LogStream appMessages = new LogStream(\"messages.log\"); appMessages.WriteLine(\"Приложение запущено в {0}\", DateTime.Now); Расширение LogStream Вы можете расширить класс LogStream для записи пользовательских форматов, совместимых с текущей системой логов Sisk. Пример ниже позволяет записывать красочные сообщения в консоль с использованием библиотеки Spectre.Console: public class CustomLogStream : LogStream { protected override void WriteLineInternal(string line) { base.WriteLineInternal($\"[{DateTime.Now:g}] {line}\"); } } Еще один способ автоматически записывать пользовательские логи для каждого запроса/ответа - создать HttpServerHandler. Приведенный ниже пример более полный. Он записывает тело запроса и ответа в JSON в консоль. Это может быть полезно для отладки запросов в целом. Этот пример использует ContextBag и HttpServerHandler. class Program { static async Task Main(string[] args) { var app = HttpServer.CreateBuilder(host => { host.UseListeningPort(5555); host.UseHandler<JsonMessageHandler>(); }); app.Router += new Route(RouteMethod.Any, \"/json\", request => { return new HttpResponse() .WithContent(JsonContent.Create(new { method = request.Method.Method, path = request.Path, specialMessage = \"Hello, world!! \" })); }); await app.StartAsync(); } } class JsonMessageHandler : HttpServerHandler { protected override void OnHttpRequestOpen(HttpRequest request) { if (request.Method != HttpMethod.Get && request.Headers[\"Content-Type\"]?.Contains(\"json\", StringComparison.InvariantCultureIgnoreCase) == true) { // В этот момент, соединение открыто и клиент отправил заголовок, указывающий, что содержимое JSON. // Если содержимое не будет прочитано в действии запроса, GC, вероятно, удалит содержимое после отправки ответа клиенту, поэтому содержимое может быть недоступно после закрытия ответа. // _ = request.RawBody; // добавить подсказку в контекст, чтобы указать, что этот запрос имеет JSON-тело. request.Bag.Add(\"IsJsonRequest\", true); } } protected override async void OnHttpRequestClose(HttpServerExecutionResult result) { string? requestJson = null, responseJson = null, responseMessage; if (result.Request.Bag.ContainsKey(\"IsJsonRequest\")) { // переформатировать JSON с помощью библиотеки CypherPotato.LightJson var content = result.Request.Body; requestJson = JsonValue.Deserialize(content, new JsonOptions() { WriteIndented = true }.ToString(); } if (result.Response is { } response { var content = response.Content; responseMessage = $\"{(int)response.Status {HttpStatusInformation.GetStatusCodeDescription(response.Status)}\"; if (content is HttpContent httpContent && // проверка, является ли ответ JSON httpContent.Headers.ContentType?.MediaType?.Contains(\"json\", StringComparison.InvariantCultureIgnoreCase) == true) { string json = await httpContent.ReadAsStringAsync(); responseJson = JsonValue.Deserialize(json, new JsonOptions() { WriteIndented = true }.ToString(); } } else { // получает статус сервера responseMessage = result.Status.ToString(); } StringBuilder outputMessage = new StringBuilder(); if (requestJson != null) { outputMessage.AppendLine(\"-----\"); outputMessage.AppendLine($\">>> {result.Request.Method} {result.Request.Path}\"); if (requestJson is not null) outputMessage.AppendLine(requestJson); } outputMessage.AppendLine(\"<<< {responseMessage}\"); if (responseJson is not null) outputMessage.AppendLine(responseJson); outputMessage.AppendLine(\"-----\"); await Console.Out.WriteLineAsync(outputMessage.ToString()); } }"
  },
  "docs/ru/features/server-sent-events.html": {
    "href": "docs/ru/features/server-sent-events.html",
    "title": "Серверные события | Sisk Framework",
    "keywords": "Серверные события Sisk поддерживает отправку сообщений через Server Sent Events из коробки. Вы можете создавать одноразовые и постоянные соединения, получать соединения во время выполнения и использовать их. Эта функция имеет некоторые ограничения, налагаемые браузерами, такие как отправка только текстовых сообщений и невозможность постоянного закрытия соединения. Закрытие соединения серверной стороной приведет к периодическим попыткам клиента переподключиться каждые 5 секунд (3 для некоторых браузеров). Эти соединения полезны для отправки событий с сервера на клиент без необходимости запроса информации клиентом каждый раз. Создание соединения SSE Соединение SSE работает как обычный HTTP-запрос, но вместо отправки ответа и немедленного закрытия соединения соединение остается открытым для отправки сообщений. Вызов метода HttpRequest.GetEventSource(), запрос помещается в состояние ожидания, пока создается экземпляр SSE. r += new Route(RouteMethod.Get, \"/\", (req) => { var sse = req.GetEventSource(); sse.Send(\"Hello, world!\"); return sse.Close(); }); В приведенном выше коде мы создаем соединение SSE и отправляем сообщение \"Hello, world\", затем закрываем соединение SSE со стороны сервера. Note При закрытии соединения серверной стороной по умолчанию клиент попытается снова подключиться, и соединение будет перезапущено, выполняя метод снова, вечно. Обычно с сервера отправляется сообщение о завершении, когда соединение закрывается, чтобы предотвратить повторное подключение клиента. Добавление заголовков Если вам нужно отправить заголовки, вы можете использовать метод HttpRequestEventSource.AppendHeader перед отправкой каких-либо сообщений. r += new Route(RouteMethod.Get, \"/\", (req) => { var sse = req.GetEventSource(); sse.AppendHeader(\"Header-Key\", \"Header-value\"); sse.Send(\"Hello!\"); return sse.Close(); }); Обратите внимание, что необходимо отправить заголовки перед отправкой каких-либо сообщений. Соединения Wait-For-Fail Соединения обычно прерываются, когда сервер больше не может отправлять сообщения из-за возможного разрыва соединения с клиентом. В этом случае соединение автоматически прерывается, и экземпляр класса удаляется. Даже при повторном подключении экземпляр класса не будет работать, так как он связан с предыдущим соединением. В некоторых ситуациях вам может потребоваться это соединение позже, и вы не хотите управлять им через метод обратного вызова маршрута. Для этого мы можем идентифицировать соединения SSE с помощью идентификатора и получать их позже, даже вне метода обратного вызова маршрута. Кроме того, мы отмечаем соединение с помощью WaitForFail, чтобы не прерывать маршрут и не прерывать соединение автоматически. Соединение SSE в KeepAlive будет ожидать ошибки отправки (вызванной разрывом соединения), чтобы возобновить выполнение метода. Также можно установить Timeout для этого. После истечения времени, если не было отправлено сообщение, соединение прерывается, и выполнение возобновляется. r += new Route(RouteMethod.Get, \"/\", (req) => { var sse = req.GetEventSource(\"my-index-connection\"); sse.WaitForFail(TimeSpan.FromSeconds(15)); // ожидать 15 секунд без отправки сообщения, прежде чем прервать соединение return sse.Close(); }); В приведенном выше методе будет создано соединение, обработано и ожидание разрыва соединения или ошибки. HttpRequestEventSource? evs = server.EventSources.GetByIdentifier(\"my-index-connection\"); if (evs != null) { // соединение все еще активное evs.Send(\"Hello again!\"); } И фрагмент кода выше попытается найти недавно созданное соединение, и если оно существует, отправит сообщение на него. Все активные серверные соединения, которые идентифицированы, будут доступны в коллекции HttpServer.EventSources. Эта коллекция хранит только активные и идентифицированные соединения. Закрытые соединения удаляются из коллекции. Note Важно отметить, что Keep Alive имеет ограничение, установленное компонентами, которые могут быть подключены к Sisk неконтролируемым образом, например, веб-прокси, ядро HTTP или драйвер сети, и они закрывают неиспользуемые соединения после определенного периода времени. Поэтому важно поддерживать соединение открытым, отправляя периодические пинги или увеличивая максимальное время, прежде чем соединение будет закрыто. Прочитайте следующую секцию, чтобы лучше понять отправку периодических пингов. Настройка политики пингов соединений Политика пингов - это автоматизированный способ отправки периодических сообщений вашему клиенту. Эта функция позволяет серверу понимать, когда клиент отключился от этого соединения, не принуждая его постоянно держать соединение открытым. [RouteGet(\"/sse\")] public HttpResponse Events(HttpRequest request) { var sse = request.GetEventSource(); sse.WithPing(ping => { ping.DataMessage = \"ping-message\"; ping.Interval = TimeSpan.FromSeconds(5); ping.Start(); }); sse.KeepAlive(); return sse.Close(); } В приведенном выше коде каждые 5 секунд будет отправляться новое сообщение пинга клиенту. Это поддержит TCP-соединение и предотвратит его закрытие из-за неактивности. Также при неудачной отправке сообщения соединение автоматически закрывается, освобождая ресурсы, используемые соединением. Поиск соединений Вы можете искать активные соединения с помощью предиката на идентификаторе соединения, чтобы иметь возможность, например, отправлять рассылку. HttpRequestEventSource[] evs = server.EventSources.Find(es => es.StartsWith(\"my-connection-\")); foreach (HttpRequestEventSource e in evs) { e.Send(\"Рассылка всем событиям, начинающимся с 'my-connection-'\"); } Вы также можете использовать метод All для получения всех активных соединений SSE."
  },
  "docs/ru/features/websockets.html": {
    "href": "docs/ru/features/websockets.html",
    "title": "Веб-сокеты | Sisk Framework",
    "keywords": "Веб-сокеты Sisk поддерживает веб-сокеты, как для приема, так и для отправки сообщений клиенту. Эта функция работает нормально в большинстве браузеров, но в Sisk она все еще находится в экспериментальной стадии. Пожалуйста, если вы найдете какие-либо ошибки, сообщите об этом на github. Прием и обработка сообщений асинхронно Ниже приведен пример того, как работают веб-сокеты на практике, с примером открытия соединения, получения сообщения и его отображения в консоли. Все сообщения, полученные WebSocket, получаются в виде байтов, поэтому вам придется декодировать их при получении. По умолчанию сообщения фрагментируются на куски, а последний фрагмент отправляется в качестве последнего пакета сообщения. Вы можете настроить размер пакета с помощью флага WebSocketBufferSize. Этот буферизация одинакова для отправки и получения сообщений. static ListeningHost BuildLhA() { Router r = new Router(); r += new Route(RouteMethod.Get, \"/\", (req) => { var ws = req.GetWebSocket(); ws.OnReceive += (sender, msg) => { string msgText = Encoding.UTF8.GetString(msg.MessageBytes); Console.WriteLine(\"Received message: \" + msgText); // получает контекст HttpWebSocket, который получил сообщение HttpWebSocket senderWebSocket = (HttpWebSocket)sender!; senderWebSocket.Send(\"Response!\"); }; ws.WaitForClose(); return ws.Close(); }); return new ListeningHost(\"localhost\", 5551, r); } Прием и обработка сообщений синхронно В следующем примере показан способ использования синхронного веб-соккета, без асинхронного контекста, где вы получаете сообщения, обрабатываете их и завершаете работу с сокетом. static ListeningHost BuildLhA() { Router r = new Router(); r += new Route(RouteMethod.Get, \"/connect\", (req) => { var ws = req.GetWebSocket(); WebSocketMessage? msg; askName: ws.Send(\"What is your name?\"); msg = ws.WaitNext(); string? name = msg?.GetString(); if (string.IsNullOrEmpty(name)) { ws.Send(\"Please, insert your name!\"); goto askName; } askAge: ws.Send(\"And your age?\"); msg = ws.WaitNext(); if (!Int32.TryParse(msg?.GetString(), out int age)) { ws.Send(\"Please, insert an valid number\"); goto askAge; } ws.Send($\"You're {name}, and you are {age} old.\"); return ws.Close(); }); return new ListeningHost(\"localhost\", 5551, r); } Отправка сообщений Метод Send имеет три перегрузки, которые позволяют отправлять текст, массив байтов или диапазон байтов. Все они фрагментируются, если флаг WebSocketBufferSize сервера больше общего размера полезной нагрузки. static ListeningHost BuildLhA() { Router r = new Router(); r += new Route(RouteMethod.Get, \"/\", (req) => { var ws = req.GetWebSocket(); byte[] myByteArrayContent = ...; ws.Send(\"Hello, world\"); // будет закодирован как массив байтов UTF-8 ws.Send(myByteArrayContent); return ws.Close(); }); return new ListeningHost(\"localhost\", 5551, r); } Ожидание закрытия веб-сокета Метод WaitForClose() блокирует текущий вызов стека до тех пор, пока соединение не будет закрыто ни клиентом, ни сервером. Благодаря этому выполнение обратного вызова запроса будет заблокировано до тех пор, пока клиент или сервер не разорвет соединение. Вы также можете вручную закрыть соединение с помощью метода Close(). Этот метод возвращает объект HttpResponse, который не отправляется клиенту, но работает как возврат из функции, где был получен HTTP-запрос. static ListeningHost BuildLhA() { Router r = new Router(); r += new Route(RouteMethod.Get, \"/\", (req) => { var ws = req.GetWebSocket(); // ожидание закрытия соединения клиентом ws.WaitForClose(); // ожидание до тех пор, пока не будет обменено сообщений в течение 60 секунд // или пока одна из сторон не закроет соединение ws.WaitForClose(TimeSpan.FromSeconds(60)); return ws.Close(); }); return new ListeningHost(\"localhost\", 5551, r); } Политика пинга Подобно тому, как работает политика пинга в Server Side Events, вы также можете настроить политику пинга для поддержания открытого TCP-соединения, если в нем отсутствует активность. ws.WithPing(ping => { ping.DataMessage = \"ping-message\"; ping.Interval = TimeSpan.FromSeconds(5); ping.Start(); });"
  },
  "docs/ru/fundamentals/request-handlers.html": {
    "href": "docs/ru/fundamentals/request-handlers.html",
    "title": "Обработка запросов | Sisk Framework",
    "keywords": "Обработка запросов Обработчики запросов, также известные как \"中间件\", - это функции, которые выполняются до или после того, как запрос будет обработан маршрутизатором. Их можно определить для конкретного маршрута или для всего маршрутизатора. Существуют два типа обработчиков запросов: BeforeResponse: указывает, что обработчик запроса будет выполнен до вызова действия маршрутизатора. AfterResponse: указывает, что обработчик запроса будет выполнен после вызова действия маршрутизатора. Отправка HTTP-ответа в этом контексте перезапишет ответ действия маршрутизатора. Оба обработчика запросов могут перезаписать фактический ответ функции обратного вызова маршрутизатора. Кстати, обработчики запросов могут быть полезны для валидации запроса, например, аутентификации, содержимого или любой другой информации, такой как хранение информации, логирование или другие действия, которые можно выполнить до или после ответа. Таким образом, обработчик запроса может прервать все эти действия и вернуть ответ, прежде чем завершить цикл, отбросив все остальное. Пример: предположим, что обработчик запроса для аутентификации пользователя не аутентифицирует его. Это помешает продолжению жизненного цикла запроса и зависнет. Если это происходит в обработчике запроса на позиции два, то третий и последующие не будут оценены. Создание обработчика запроса Чтобы создать обработчик запроса, можно создать класс, наследующий интерфейс IRequestHandler, в следующем формате: public class AuthenticateUserRequestHandler : IRequestHandler { public RequestHandlerExecutionMode ExecutionMode { get; init; } = RequestHandlerExecutionMode.BeforeResponse; public HttpResponse? Execute(HttpRequest request, HttpContext context) { if (request.Headers.Authorization != null) { // Возвращение null указывает на то, что цикл запроса может быть продолжен return null; } else { // Возвращение объекта HttpResponse указывает на то, что этот ответ перезапишет соседние ответы. return new HttpResponse(System.Net.HttpStatusCode.Unauthorized); } } } В приведенном выше примере указано, что если запрос содержит заголовок Authorization, он должен продолжить выполнение, и будет вызван следующий обработчик запроса или обратный вызов маршрутизатора, whichever comes next. Если обработчик запроса выполняется после ответа с помощью их свойства ExecutionMode и возвращает не null значение, он перезапишет ответ маршрутизатора. Каждый раз, когда обработчик запроса возвращает null, это указывает на то, что запрос должен быть продолжен, и должен быть вызван следующий объект или цикл должен завершиться ответом маршрутизатора. Связывание обработчика запроса с отдельным маршрутом Можно определить один или несколько обработчиков запросов для маршрута. mainRouter.SetRoute(RouteMethod.Get, \"/\", IndexPage, \"\", new IRequestHandler[] { new AuthenticateUserRequestHandler(), // before request handler new ValidateJsonContentRequestHandler(), // before request handler // -- method IndexPage будет выполнен здесь new WriteToLogRequestHandler() // after request handler }); Или создание объекта Route: Route indexRoute = new Route(RouteMethod.Get, \"/\", \"\", IndexPage, null); indexRoute.RequestHandlers = new IRequestHandler[] { new AuthenticateUserRequestHandler() }; mainRouter.SetRoute(indexRoute); Связывание обработчика запроса с маршрутизатором Можно определить глобальный обработчик запроса, который будет выполняться на всех маршрутах маршрутизатора. mainRouter.GlobalRequestHandlers = new IRequestHandler[] { new AuthenticateUserRequestHandler() }; Связывание обработчика запроса с атрибутом Можно определить обработчик запроса на методе атрибута вместе с атрибутом маршрута. public class MyController { [RouteGet(\"/\")] [RequestHandler<AuthenticateUserRequestHandler>] static HttpResponse Index(HttpRequest request) { return new HttpResponse() .WithContent(new StringContent(\"Hello world!\")); } } Обратите внимание, что необходимо передать тип желаемого обработчика запроса, а не экземпляр объекта. Таким образом, обработчик запроса будет создан парсером маршрутизатора. Вы можете передавать аргументы в конструктор класса с помощью свойства ConstructorArguments. Пример: [RequestHandler<AuthenticateUserRequestHandler>(\"arg1\", 123, ...)] static HttpResponse Index(HttpRequest request) { HttpResponse res = new HttpResponse(); res.Content = new StringContent(\"Hello world!\"); return res; } Также можно создать свой собственный атрибут, который реализует RequestHandler: public class AuthenticateAttribute : RequestHandlerAttribute { public AuthenticateAttribute() : base(typeof(AuthenticateUserRequestHandler), ConstructorArguments = new object?[] { \"arg1\", 123, ... }) { ; } } И использовать его так: [Authenticate] static HttpResponse Index(HttpRequest request) { HttpResponse res = new HttpResponse(); res.Content = new StringContent(\"Hello world!\"); return res; } Игнорирование глобального обработчика запроса После определения глобального обработчика запроса на маршруте можно игнорировать этот обработчик запроса на конкретных маршрутах. var myRequestHandler = new AuthenticateUserRequestHandler(); mainRouter.GlobalRequestHandlers = new IRequestHandler[] { myRequestHandler }; mainRouter.SetRoute(new Route(RouteMethod.Get, \"/\", \"My route\", IndexPage, null) { BypassGlobalRequestHandlers = new IRequestHandler[] { myRequestHandler, // ok: the same instance of what is in the global request handlers new AuthenticateUserRequestHandler() // wrong: will not skip the global request handler } }); Note Если вы игнорируете обработчик запроса, вам необходимо использовать тот же ссылаемый объект, который был установлен ранее, чтобы пропустить его. Создание нового экземпляра обработчика запроса не позволит пропустить глобальный обработчик запроса, так как его ссылка изменится. Не забудьте использовать ту же ссылку на обработчик запроса, которая используется как в GlobalRequestHandlers, так и в BypassGlobalRequestHandlers."
  },
  "docs/ru/fundamentals/requests.html": {
    "href": "docs/ru/fundamentals/requests.html",
    "title": "Запросы | Sisk Framework",
    "keywords": "Запросы Запросы представляют собой структуры, которые представляют сообщение HTTP-запроса. Объект HttpRequest содержит полезные функции для обработки сообщений HTTP в вашем приложении. HTTP-запрос формируется методом, путем, версией, заголовками и телом. В этом документе мы научим вас, как получить каждый из этих элементов. Получение метода запроса Чтобы получить метод полученного запроса, вы можете использовать свойство Method: static HttpResponse Index(HttpRequest request) { HttpMethod requestMethod = request.Method; ... } Это свойство возвращает метод запроса, представленный объектом HttpMethod. Note В отличие от маршрутных методов, это свойство не возвращает элемент RouteMethod.Any. Вместо этого оно возвращает настоящий метод запроса. Получение компонентов URL-адреса запроса Вы можете получить различные компоненты из URL-адреса с помощью определенных свойств запроса. Для этого примера рассмотрим URL-адрес: http://localhost:5000/user/login?email=foo@bar.com Название компонента Описание Значение компонента Path Получает путь запроса. /user/login FullPath Получает путь запроса и строку запроса. /user/login?email=foo@bar.com FullUrl | Получает полный URL-адрес запроса. | http://localhost:5000/user/login?email=foo@bar.com | | Host | Получает хост запроса. | localhost | | Authority | Получает хост и порт запроса. | localhost:5000 | | QueryString | Получает запрос запроса. | ?email=foo@bar.com | | Query | Получает запрос запроса в коллекцию значений с именем. | {StringValueCollection object} | | IsSecure | Определяет, использует ли запрос SSL (true) или нет (false). | false | Вы также можете использовать свойство HttpRequest.Uri, которое включает все вышеперечисленное в одном объекте. Получение тела запроса Некоторые запросы включают тело, например, формы, файлы или транзакции API. Вы можете получить тело запроса из свойства: // получает тело запроса в виде строки, используя кодировку запроса в качестве кодировщика string body = request.Body; // или получает его в виде массива байтов byte[] bodyBytes = request.RawBody; // или иначе, вы можете получить его потоком Stream requestStream = request.GetRequestStream(); Также можно определить, есть ли тело в запросе и загружено ли оно с помощью свойств HasContents, которое определяет, имеет ли запрос содержимое, и IsContentAvailable, которое указывает на то, что HTTP-сервер полностью получил содержимое из удаленного узла. Невозможно прочитать содержимое запроса через GetRequestStream более одного раза. Если вы прочитаете с помощью этого метода, значения в RawBody и Body также не будут доступны. Не нужно освобождать поток запроса в контексте запроса, так как он освобождается в конце HTTP-сессии, в которой он был создан. Также вы можете использовать свойство HttpRequest.RequestEncoding, чтобы получить лучшую кодировку для декодирования запроса вручную. Сервер имеет ограничения для чтения содержимого запроса, которые применяются как к HttpRequest.Body, так и к HttpRequest.RawBody. Эти свойства копируют весь входной поток в локальный буфер, размером с HttpRequest.ContentLength. Ответ с кодом состояния 413 Content Too Large возвращается клиенту, если отправленное содержимое больше, чем HttpServerConfiguration.MaximumContentLength, определенный в конфигурации пользователя. Кроме того, если конфигурация не задана или она слишком велика, сервер выбросит исключение OutOfMemoryException, когда содержимое, отправленное клиентом, превышает Int32.MaxValue (2 ГБ) и если содержимое пытаются получить с помощью одного из упомянутых выше свойств. Вы все еще можете обрабатывать содержимое с помощью потоковой передачи. Note Sisk следует RFC 9110 \"HTTP Semantics\", которые не разрешают определенным методам запроса иметь тело. Эти запросы немедленно сбросят 400 (Bad Request) с статусом ContentServedOnIllegalMethod. Запросы с телами не разрешены в методах GET, OPTIONS, HEAD и TRACE. Вы можете прочитать RFC 9910 здесь. You can disable this feature by setting ThrowContentOnNonSemanticMethods to false. Получение контекста запроса HTTP-контекст - это эксклюзивный объект Sisk, который хранит информацию о HTTP-сервере, маршруте, маршрутизаторе и обработчике запроса. Вы можете использовать его, чтобы организовать себя в среде, где эти объекты сложно организовать. Объект RequestBag содержит хранимую информацию, которая передается из обработчика запроса в другое место, и может быть использована в конечном вызове. Этот объект также может быть использован обработчиками запроса, которые выполняются после вызова маршрута. Tip This property is also accessible by HttpRequest.Bag property. public class AuthenticateUserRequestHandler : IRequestHandler { public string Identifier { get; init; } = Guid.NewGuid().ToString(); public RequestHandlerExecutionMode ExecutionMode { get; init; } = RequestHandlerExecutionMode.BeforeResponse; public HttpResponse? Execute(HttpRequest request, HttpContext context) if (request.Headers[\"Authorization\"] != null) { context.RequestBag.Add(\"AuthenticatedUser\", \"Bob\"); return null; } else { return new HttpResponse(System.Net.HttpStatusCode.Unauthorized); } } The above request handler will define AuthenticatedUser in the request bag, and can be consumed later in the final callback: public class MyController { [RouteGet(\"/\")] [RequestHandler<AuthenticateUserRequestHandler> static HttpResponse Index(HttpRequest request) { var user = request.Context.RequestBag.Get<User>(); } } You can also use the Bag.Set() and Bag.Get() helper methods to get or set objects by their type singletons. public class Authenticate : RequestHandler { public override HttpResponse? Execute(HttpRequest request, HttpContext context) { request.Bag.Set<User> } } Получение данных формы You can get the values of a form data in a [NameValueCollection](https://learn. static HttpResponse Index(HttpRequest request) { var form = request.GetFormContent(); string? username = form[\"username\"]; string? password = form[\"password\"]; if (AttempLogin(username, password) == true { ... } } Получение многочленных данных формы Sisk's HTTP request lets you get uploaded multipart contents, such as files, form fields, or any binary content. static HttpResponse Index(HttpRequest request) { var multipartFormDataObjects = request.GetMultipartFormContent(); foreach (MultipartObject uploadedObject in multipartFormDataObjects { Console.WriteLine(\"File name : \" + uploadedObject.Filename; Console.WriteLine(\"Field name : \" + uploadedObject.Name; Console.WriteLine(\"Content length : \" + uploadedObject.ContentLength; Console.WriteLine(\"Common format : \" + uploadedObject.GetCommonFileFormat(); } You can read more about Sisk Multipart form objects and it's methods, properties and functionalities. Поддержка событий сервер-side events Sisk supports Server-side events Calling the HttpRequest.GetEventSource method will put the HttpRequest in it's listener state. From this, the context of this HTTP request will not expect an HttpResponse as it will overlap the packets sent by server-side events. After sending all packets, the callback must return the Close method, which will send the final response to the server and indicate that the streaming has ended. It's not possible to predict the total length of all packets that will be sent, so it's not possible to determine the end of the connection with `Content-Length header. By default, most browsers restart streams if the `EventSource.close <html> <body> <b>Fruits:</b> <ul> <li> <li> <li> <li> And progressively send the messages to the client: public class MyController"
  },
  "docs/ru/fundamentals/responses.html": {
    "href": "docs/ru/fundamentals/responses.html",
    "title": "| Sisk Framework",
    "keywords": "От Responses представляют собой объекты HTTP-ответов на HTTP-запросы. Они отправляются сервером клиенту в качестве указания на запрос ресурса, страницы, документа, файла или другого объекта. HTTP-ответ состоит из статуса, заголовков и содержимого. В этом документе мы научим вас, как архитектурировать HTTP-ответы с помощью Sisk. Установка HTTP-статуса Список HTTP-статусов тот же с HTTP/1.0, и Sisk поддерживает все их. HttpResponse res = new HttpResponse(); res.Status = System.Net.HttpStatusCode.Accepted; // 202 Или с помощью флюидной синтаксиса: new HttpResponse() .WithStatus(200) // или .WithStatus(HttpStatusCode.Ok) // или .WithStatus(HttpStatusInformation.Ok); Полный список доступных кодов HttpStatusCode можно посмотреть здесь. Вы также можете указать свой собственный код статуса, используя структуру HttpStatusInformation. Тело и content-type Sisk поддерживает использование встроенных .NET объектов контента для отправки тела в ответах. Вы можете использовать класс StringContent для отправки JSON-ответа, например: HttpResponse res = new HttpResponse(); res.Content = new StringContent(myJson, Encoding.UTF8, \"application/json\"); Сервер всегда будет пытаться рассчитать Content-Length на основе того, что вы определили в контенте, если вы не указали его явно в заголовке. Если сервер не может неявно получить заголовок Content-Length из содержимого ответа, ответ будет отправлен с кодировкой Chunked-Encoding. Вы также можете передавать ответ по потоку, отправляя StreamContent или используя метод GetResponseStream. Заголовки ответа Вы можете добавлять, изменять или удалять заголовки, которые вы отправляете в ответе. Ниже приведен пример того, как отправить ответ перенаправления клиенту. HttpResponse res = new HttpResponse(); res.Status = HttpStatusCode.Moved; res.Headers.Add(HttpKnownHeaderNames.Location, \"/login\"); Или с помощью флюидной синтаксиса: new HttpResponse(301) .WithHeader(\"Location\", \"/login\"); При использовании метода Add HttpHeaderCollection, вы добавляете заголовок к запросу без изменения уже отправленных заголовков. Метод Set заменяет заголовки с тем же именем на указанное значение. Индексатор HttpHeaderCollection внутренне вызывает метод Set для замены заголовков. Отправка cookie Sisk предоставляет методы для упрощения определения cookie в клиенте. Cookie, установленные с помощью этого метода, уже закодированы URL и соответствуют стандарту RFC-6265. HttpResponse res = new HttpResponse(); res.SetCookie(\"cookie-name\", \"cookie-value\"); Или с помощью флюидной синтаксиса: new HttpResponse(301) .WithCookie(\"cookie-name\", \"cookie-value\", expiresAt: DateTime.Now.Add(TimeSpan.FromDays(7))); Существуют другие более полные версии этого метода. Chunked ответы Вы можете установить кодировку передачи на chunked для отправки больших ответов. HttpResponse res = new HttpResponse(); res.SendChunked = true; При использовании chunked-encoding заголовок Content-Length автоматически опускается. Поток ответа Потоки ответов - это управляемый способ отправки ответов по частям. Это более низкоуровневая операция, чем использование объектов HttpResponse, так как они требуют от вас отправки заголовков и содержимого вручную, а затем закрытия соединения. Этот пример открывает для чтения поток файла, копирует поток в поток выходных данных ответа и не загружает весь файл в память. Это может быть полезно для обслуживания средних или больших файлов. // получает поток выходных данных ответа using var fileStream = File.OpenRead(\"my-big-file.zip\"); var responseStream = request.GetResponseStream(); // устанавливает кодировку ответа на chunked-encoding // также не следует отправлять заголовок Content-Length при использовании // chunked-encoding responseStream.SendChunked = true; responseStream.SetStatus(200); responseStream.SetHeader(HttpKnownHeaderNames.ContentType, contentType); // копирует поток файла в поток выходных данных ответа fileStream.CopyTo(responseStream.ResponseStream); // закрывает поток return responseStream.Close(); Сжатие GZip, Deflate и Brotli Вы можете отправлять ответы с сжатым содержимым в Sisk с помощью сжатия HTTP-контента. Сначала оберните свой объект HttpContent в один из компрессоров ниже, чтобы отправить сжатый ответ клиенту. router.MapGet(\"/hello.html\", request => { string myHtml = \"...\"; return new HttpResponse () { Content = new GZipContent(new HtmlContent(myHtml)), // или Content = new BrotliContent(new HtmlContent(myHtml)), // или Content = new DeflateContent(new HtmlContent(myHtml)), }; }); Вы также можете использовать эти сжатые контенты с потоками. router.MapGet(\"/archive.zip\", request => { // не применяйте \"using\" здесь. HttpServer будет discard your content // после отправки ответа. var archive = File.OpenRead(\"/path/to/big-file.zip\"); return new HttpResponse () { Content = new GZipContent(archive) } }); Заголовки Content-Encoding автоматически устанавливаются при использовании этих контентов. Явно определенные типы ответа С версии 0.15 вы можете использовать типы возвращаемых значений, отличные от HttpResponse, но необходимо настроить маршрутизатор, как он будет обрабатывать каждый тип объекта. Суть в том, чтобы всегда возвращать ссылку на тип объекта и преобразовывать его в валидный объект HttpResponse. Маршруты, возвращающие HttpResponse, не подвергаются преобразованию. Типы значений (структуры) не могут использоваться в качестве типа возвращаемого значения, так как они не совместимы с RouterCallback, поэтому их необходимо обернуть в ValueResult, чтобы их можно было использовать в обработчиках. Рассмотрим следующий пример из модуля маршрутизатора, который не использует HttpResponse в типе возвращаемого значения: [RoutePrefix(\"/users\")] public class UsersController : RouterModule { public List<User> Users = new List<User>(); [RouteGet] public IEnumerable<User> Index(HttpRequest request) { return Users.ToArray(); } [RouteGet(\"<id>\")] public User View(HttpRequest request) { int id = request.Query[\"id\"].GetInteger(); User dUser = Users.First(u => u.Id == id); return dUser; } [RoutePost] public ValueResult<bool> Create(HttpRequest request) { User fromBody = JsonSerializer.Deserialize<User>(request.Body)!; Users.Add(fromBody); return true; } } В этом случае необходимо определить в маршрутизаторе, как он будет обрабатывать каждый тип объекта. Объекты всегда являются первым аргументом обработчика, и тип выходного значения должен быть валидным HttpResponse. Также объекты выходных данных маршрута не должны быть null. Для типов ValueResult не нужно указывать, что входной объект - ValueResult, и только T, так как ValueResult - это объект, отраженный от его исходного компонента. Сопоставление типов не сравнивает зарегистрированный тип с типом возвращаемого объекта маршрутизатора. Вместо этого оно проверяет, является ли тип результата маршрута присваиваемым зарегистрированному типу. Регистрация обработчика типа Object будет использоваться в качестве fallback для всех ранее невалидированных типов. Порядок вставки обработчиков значений также имеет значение, поэтому регистрация обработчика Object должна быть последней, так как он будет игнорировать все другие типы, специфичные для значения. Router r = new Router(); r.SetObject(new UsersController()); r.RegisterValueHandler<bool>(bolVal => { HttpResponse res = new HttpResponse(); res.Status = (bool)bolVal ? HttpStatusCode.OK : HttpStatusCode.BadRequest; return res; }); r.RegisterValueHandler<IEnumerable>(enumerableValue => { return new HttpResponse(); // здесь можно сделать что-то с enumerableValue }); // регистрация обработчика типа object должна быть последней // и будет использоваться в качестве fallback r.RegisterValueHandler<object>(fallback => { HttpResponse res = new HttpResponse(); res.Status = HttpStatusCode.OK; res.Content = JsonContent.Create(fallback); return res; });"
  },
  "docs/ru/fundamentals/routing.html": {
    "href": "docs/ru/fundamentals/routing.html",
    "title": "Маршрутизация | Sisk Framework",
    "keywords": "Маршрутизация Маршрутизатор (Router) является первым шагом при построении сервера. Он отвечает за хранение объектов Route, которые представляют собой конечные точки, которые сопоставляют URL-адреса и их методы с действиями, выполняемыми сервером. Каждое действие отвечает за прием запроса и отправку ответа клиенту. Маршруты представляют собой пары выражений пути (\"шаблон пути\") и HTTP-метода, на который они могут реагировать. Когда поступает запрос к серверу, он пытается найти маршрут, соответствующий полученному запросу, а затем вызывает действие этого маршрута и отправляет полученный ответ клиенту. Существует несколько способов определения маршрутов в Sisk: они могут быть статическими, динамическими или автоматически сканируемыми, определены с помощью атрибутов или непосредственно в объекте Router. Router mainRouter = new Router(); // сопоставляет GET / с последующим действием mainRouter.MapGet(\"/\", request => { return new HttpResponse(\"Hello, world!\"); }); Чтобы понять, что может делать маршрут, нужно понять, что может делать запрос. HttpRequest будет содержать все необходимые сведения. Sisk также включает некоторые дополнительные функции, которые ускоряют общий процесс разработки. Для каждого действия, полученного сервером, будет вызываться делегат типа RouteAction. Этот делегат содержит параметр, содержащий HttpRequest со всеми необходимыми сведениями о запросе, полученном сервером. Результирующий объект из этого делегата должен быть HttpResponse или объектом, который отображается на него через явные типы ответов. Сопоставление маршрутов Когда к HTTP-серверу поступает запрос, Sisk ищет маршрут, который удовлетворяет выражению пути, полученному в запросе. Выражение всегда проверяется между маршрутом и путем запроса, без учета строки запроса. Этот тест не имеет приоритета и является исключительным для одного маршрута. Когда маршрут не сопоставляется с запросом, сервер возвращает клиенту ответ Router.NotFoundErrorHandler. Если шаблон пути совпадает, но HTTP-метод не совпадает, сервер возвращает клиенту ответ Router.MethodNotAllowedErrorHandler. Sisk проверяет возможность столкновения маршрутов, чтобы избежать этих проблем. При определении маршрутов Sisk будет искать возможные маршруты, которые могут столкнуться с определенным маршрутом. Этот тест включает проверку пути и метода, которые маршрут настроен принимать. Создание маршрутов с использованием шаблонов пути Вы можете определить маршруты с использованием различных методов SetRoute. // способ SetRoute mainRouter.SetRoute(RouteMethod.Get, \"/hey/<name>\", (request) => { string name = request.RouteParameters[\"name\"].GetString(); return new HttpResponse($\"Hello, {name}\"); }); // способ Map* mainRouter.MapGet(\"/form\", (request) => { var formData = request.GetFormData(); return new HttpResponse(); // пустой 200 ok }); // вспомогательные методы Route.* mainRouter += Route.Get(\"/image.png\", (request) => { var imageStream = File.OpenRead(\"image.png\"); return new HttpResponse() { // внутренний StreamContent // поток будет освобожден после отправки // ответа. Content = new StreamContent(imageStream) }; }); // несколько параметров mainRouter.MapGet(\"/hey/<name>/surname/<surname>\", (request) => { string name = request.RouteParameters[\"name\"].GetString(); string surname = request.RouteParameters[\"surname\"].GetString(); return new HttpResponse($\"Hello, {name} {surname}!\"); }); Свойство RouteParameters объекта HttpResponse содержит все сведения о переменных пути полученного запроса. Каждый путь, полученный сервером, нормализуется перед выполнением теста шаблона пути, следуя этим правилам: Все пустые сегменты удаляются из пути, например: ////foo//bar становится /foo/bar. Сопоставление путей чувствительно к регистру, если Router.MatchRoutesIgnoreCase не установлено в true. Свойства Query и RouteParameters объекта HttpRequest возвращают объект StringValueCollection, где каждая индексируемая свойство возвращает непустой StringValue, который может использоваться в качестве опции/монад для преобразования его исходного значения в управляемый объект. В следующем примере читается параметр маршрута \"id\" и извлекается из него Guid. Если параметр не является действительным Guid, вызывается исключение, и клиенту возвращается ошибка 500, если сервер не обрабатывает Router.CallbackErrorHandler. mainRouter.SetRoute(RouteMethod.Get, \"/user/<id>\", (request) => { Guid id = request.RouteParameters[\"id\"].GetGuid(); }); Note Пути игнорируют слеш в конце пути в обоих запросах и маршрутах, то есть, если вы попытаетесь получить доступ к маршруту, определенному как /index/page, вы сможете получить доступ с помощью /index/page/ также. Вы также можете принудительно заставить URL-адреса завершаться /, включив флаг ForceTrailingSlash. Создание маршрутов с использованием экземпляров классов Вы также можете динамически определять маршруты с помощью рефлексии с помощью атрибута RouteAttribute. Таким образом, экземпляр класса, в котором реализованы его методы, будут иметь свои маршруты, определенные в целевом маршрутизаторе. Для того, чтобы метод был определен как маршрут, он должен быть помечен атрибутом RouteAttribute, например, атрибут сам по себе или RouteGetAttribute. Метод может быть статическим, экземпляром класса, публичным или приватным. Когда используется метод SetObject(type) или SetObject<TType>(), статические методы игнорируются. public class MyController { // сопоставляется с GET / [RouteGet] HttpResponse Index(HttpRequest request) { HttpResponse res = new HttpResponse(); res.Content = new StringContent(\"Index!\"); return res; } // статические методы тоже работают [RouteGet(\"/hello\")] static HttpResponse Hello(HttpRequest request) { HttpResponse res = new HttpResponse(); res.Content = new StringContent(\"Hello world!\"); return res; } } Строка ниже определит методы Index и Hello класса MyController как маршруты, так как оба они помечены как маршруты, и был предоставлен экземпляр класса, а не его тип. Если бы был предоставлен тип вместо экземпляра, то были бы определены только статические методы. var myController = new MyController(); mainRouter.SetObject(myController); С версии Sisk 0.16 и выше, стало возможным включить AutoScan, который будет искать пользовательские классы, реализующие RouterModule и автоматически связывать их с маршрутизатором. Это не поддерживается при компиляции AOT. mainRouter.AutoScanModules<ApiController>(); В приведенном выше примере, указанный параметр mainRouter.AutoScanModules будет искать все типы, которые реализуют ApiController но не сам тип. Два необязательных параметра указывают, как метод будет искать эти типы. Первый аргумент подразумевает сборку, где будут искаться типы, а второй указывает, как типы будут определены. Маршруты с использованием регулярных выражений Вместо использования стандартных HTTP-методов сопоставления путей, вы можете пометить маршрут для интерпретации с помощью регулярных выражений. Route indexRoute = new Route(RouteMethod.Get, @\"\\/[a-z]+/\", \"My route\", IndexPage, null); indexRoute.UseRegex = true; mainRouter.SetRoute(indexRoute); Или с помощью класса RegexRoute RegexRoute indexRoute = new RegexRoute(RouteMethod.Get, @\"/uploads/(?<filename>.*\\.(jpeg|jpg|png)\", request => { string filename = request.Query[\"filename\"].GetString(); return new HttpResponse($\"Acessing file {filename}\"); }); mainRouter.SetRoute(indexRoute); You can also capture groups from the regex pattern into the Request.Query contents: Маршруты с любым методом You can define a route to be matched only by its path and skip the HTTP method. This can be useful for you to do method validation inside the route callback. // the following route will match all POST requests mainRouter.SetRoute(RouteMethod.Any, \"/\", callbackFunction); Маршруты с любым путем Any path routes test for any path received by the HTTP server, subject to the route method being tested. If the route method is RouteMethod.Any and the route uses Route.AnyPath in its path expression, this route will match all requests from the HTTP server, and no other routes can be defined. // the following route will match all POST requests mainRouter.SetRoute(RouteMethod.Post, Route.AnyPath, callbackFunction); Игнорирование регистра маршрутов По умолчанию, интерпретация маршрутов с запросами является регистро-чувствительной. Чтобы сделать его регистро-нечувствительным, включите этот параметр. mainRouter.MatchRoutesIgnoreCase = true; This will also enable the option RegexOptions.IgnoreCase for routes where it's regex-matching. Обработка ошибок Обработка ошибок Route callbacks can throw errors during server execution. If not handled correctly, the overall functioning of the HTTP server can be terminated. The router has a callback for when a route callback fails and prevents service interruption. This method is only reachable when ThrowExceptions is set to false. mainRouter.CallbackErrorHandler = (ex, context) => { return new HttpResponse(500.Content(\"Error: {ex.Message}\"); ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs ```cs"
  },
  "docs/ru/getting-started.html": {
    "href": "docs/ru/getting-started.html",
    "title": "Начало работы с Sisk | Sisk Framework",
    "keywords": "Начало работы с Sisk Sisk может работать в любой среде .NET. В этом руководстве мы научим вас, как создать приложение Sisk с использованием .NET. Если вы еще не установили его, пожалуйста, загрузите SDK отсюда https://dotnet.microsoft.com/en-us/download/dotnet/7.0. В этом учебном пособии мы рассмотрим, как создать структуру проекта, получить запрос, получить параметр URL и отправить ответ. В этом руководстве мы сосредоточимся на создании простого сервера с использованием C#. Вы также можете использовать свой любимый язык программирования. Note Вам может быть интересно ознакомиться с проектом quickstart. Дополнительную информацию можно найти в этом репозитории https://github.com/sisk-http/quickstart. Создание проекта Назовем наш проект \"My Sisk Application\". После того, как вы настроили .NET, вы можете создать свой проект с помощью следующей команды: dotnet new console -n my-sisk-application Затем перейдите в каталог вашего проекта и установите Sisk с помощью инструмента .NET: cd my-sisk-application dotnet add package Sisk.HttpServer Дополнительные способы установки Sisk в вашем проекте можно найти здесь. Теперь давайте создадим экземпляр нашего HTTP-сервера. В этом примере мы настроим его для прослушивания на порту 5000. Создание HTTP-сервера Sisk позволяет создавать ваше приложение пошагово вручную, так как он маршрутизирует к объекту HttpServer. Однако это может быть не очень удобно для большинства проектов. Поэтому мы можем использовать метод builder, который упрощает запуск нашего приложения. class Program { static async Task Main(string[] args) { using var app = HttpServer.CreateBuilder() .UseListeningPort(\"http://localhost:5000/\") .Build(); app.Router.MapGet(\"/\", request => { return new HttpResponse() { Status = 200, Content = new StringContent(\"Hello, world!\") }; }); await app.StartAsync(); } } Важно понимать каждый важный компонент Sisk. Позже в этом документе вы узнаете больше о том, как работает Sisk. Ручной (упрощенный) настройка Вы можете узнать, как работает каждый механизм Sisk, в этом разделе документации, который объясняет поведение и взаимосвязи HttpServer, Router, ListeningPort и других компонентов."
  },
  "docs/ru/installing.html": {
    "href": "docs/ru/installing.html",
    "title": "Установка | Sisk Framework",
    "keywords": "Установка Вы можете установить Sisk через Nuget, dotnet cli или другие варианты. Вы можете легко настроить среду Sisk, выполнив эту команду в консоли разработчика: Warning Последние версии Sisk совместимы с .NET 8 и вскоре с .NET 9. Старые версии Sisk для .NET 6 и .NET 7 будут поддерживаться до 30 ноября 2024 года, получая только исправления безопасности и исправления в ветке \"legacy\". Пожалуйста, обновите свои проекты, использующие Sisk, до .NET 8. dotnet add package Sisk.HttpServer Эта команда установит последнюю версию Sisk в вашем проекте."
  },
  "docs/ru/native-aot.html": {
    "href": "docs/ru/native-aot.html",
    "title": "Поддержка Native AOT | Sisk Framework",
    "keywords": "Поддержка Native AOT В .NET 7 была введена Native AOT, режим компиляции .NET, который позволяет экспортировать готовые двоичные файлы на любую поддерживаемую платформу без необходимости установки среды выполнения .NET на целевой машине. С Native AOT ваш код компилируется в нативный код и уже содержит все необходимое для его выполнения. Sisk экспериментировал с этой функцией с версии 0.9.1, которая улучшает поддержку Native AOT с функциями для определения динамических маршрутов приложением без влияния на компиляцию с предупреждениями. Sisk использует Reflection для получения методов, которые будут определены из типов и объектов. Кроме того, Sisk использует Reflection для атрибутов, таких как RequestHandlerAttribute, которые инициализируются из типа. Для правильной работы компиляции AOT используется тримирование, при котором должны быть указаны динамические типы, которые будут использоваться в конечном сборке. Рассмотрим пример ниже, это маршрут, который вызывает RequestHandler. [Route(RouteMethod.Get, \"/\", LogMode = LogOutput.None)] [RequestHandler(typeof(MyRequestHandler))] static HttpResponse IndexPage(HttpRequest request) { HttpResponse htmlResponse = new HttpResponse(); htmlResponse.Content = new StringContent(\"Hello, world!\", System.Text.Encoding.UTF8, \"text/plain\"); return htmlResponse; } Этот RequestHandler динамически вызывается во время выполнения, и этот вызов должен быть сегментирован, и эта сегментация должна быть явной. Чтобы лучше понять, что компилятор будет учитывать из MyRequestHandler должно быть сохранено в конечной компиляции, вот: Публичные свойства; Публичные и приватные поля; Публичные и приватные конструкторы; Публичные и приватные методы; Все, что у вас есть в RequestHandler, что не указано выше, будет удалено компилятором. Помните, что все остальные компоненты, классы и пакеты, которые вы используете в своем приложении, должны быть совместимы с AOT Trimming, иначе ваш код может работать не так, как ожидалось. Кстати, Sisk не оставит вас, если вы хотите построить что-то, где производительность является приоритетом. Вы можете прочитать больше о Native AOT и о том, как она работает, в официальной документации Microsoft."
  },
  "docs/ru/registering-namespace.html": {
    "href": "docs/ru/registering-namespace.html",
    "title": "Настройка резервирования имен пространств имен в Windows | Sisk Framework",
    "keywords": "Настройка резервирования имен пространств имен в Windows Sisk работает с сетевым интерфейсом HttpListener, который связывает виртуальный хост с системой для прослушивания запросов. В Windows эта связка несколько ограничительна, позволяя только localhost как действительный хост. При попытке прослушивания другого хоста на сервере возникает ошибка отказа в доступе. В этом руководстве объясняется, как предоставить разрешение на прослушивание на любом хосте, который вам нужен в системе. @echo off :: вставьте префикс здесь, без пробелов или кавычек SET PREFIX= SET DOMAIN=%ComputerName%\\%USERNAME% netsh http add urlacl url=%PREFIX% user=%DOMAIN% pause Где в PREFIX указан префикс (\"Хост прослушивания->Порт\"), на который будет прослушиваться ваш сервер. Он должен быть отформатирован с использованием схемы URL, хоста, порта и слеша в конце, например: SET PREFIX=http://my-application.example.test/ Чтобы вы могли прослушивать ваше приложение через: class Program { static async Task Main(string[] args) { using var app = HttpServer.CreateBuilder() .UseListeningPort(\"http://my-application.example.test/\") .Build(); app.Router.MapGet(\"/\", request => { return new HttpResponse() { Status = 200, Content = new StringContent(\"Hello, world!\") }; }); await app.StartAsync(); } }"
  },
  "docs/ru/ssl.html": {
    "href": "docs/ru/ssl.html",
    "title": "Работа с SSL | Sisk Framework",
    "keywords": "Работа с SSL Работа с SSL при разработке может быть необходима при работе в контекстах, требующих безопасности, таких как большинство сценариев веб-разработки. Sisk работает поверх HttpListener, который не поддерживает native HTTPS, только HTTP. Однако существуют обходные пути, которые позволяют работать с SSL в Sisk. Узнайте о них ниже: Через IIS на Windows Доступно на: Windows Уровень сложности: средний Если вы работаете на Windows, вы можете использовать IIS для включения SSL на вашем HTTP-сервере. Для того чтобы это работало, рекомендуется следовать этой инструкции заранее, если вы хотите, чтобы ваше приложение слушало на хосте, отличном от \"localhost\". Для этого вам необходимо установить IIS через функции Windows. IIS доступен бесплатно для пользователей Windows и Windows Server. Чтобы настроить SSL в вашем приложении, имейте готов SSL-сертификат, даже если он самоподписанный. Далее вы можете увидеть как настроить SSL в IIS 7 или выше. Через mitmproxy Доступно на: Linux, macOS, Windows Уровень сложности: простой mitmproxy - это инструмент перехвата прокси, который позволяет разработчикам и тестировщикам безопасности просматривать, изменять и записывать HTTP- и HTTPS-трафик между клиентом (например, веб-браузером) и сервером. Вы можете использовать утилиту mitmdump, чтобы запустить обратный SSL-прокси между вашим клиентом и вашим приложением Sisk. Прежде всего, установите mitmprxy на вашем компьютере. Запустите ваше приложение Sisk. Для этого примера мы будем использовать порт 8000 в качестве неsecure HTTP порта. Запустите сервер mitmproxy для прослушивания защищенного порта 8001: mitmdump --mode reverse:http://localhost:8000/ -p 8001 И вы готовы начать! Вы уже можете использовать ваше приложение через https://localhost:8001/. Вашему приложению не нужно быть запущенным, чтобы вы могли запустить mitmdump. Через пакет Sisk.SslProxy Доступно на: Linux, macOS, Windows Уровень сложности: простой Пакет Sisk.SslProxy - это простой способ включить SSL в вашем приложении Sisk. Однако это чрезвычайно экспериментальный пакет. Работа с этим пакетом может быть нестабильной, но вы можете стать частью небольшого процента людей, которые будут способствовать тому, чтобы этот пакет стал жизнеспособным и стабильным. Чтобы начать, вы можете установить пакет Sisk.SslProxy с помощью: dotnet add package Sisk.SslProxy Note Вам необходимо включить \"Enable pre-release packages\" в менеджере пакетов Visual Studio, чтобы установить Sisk.SslProxy. Еще раз, это экспериментальный проект, поэтому даже не думайте о том, чтобы поместить его в производство. В настоящее время Sisk.SslProxy может обрабатывать большинство функций HTTP/1.1, включая HTTP Continue, Chunked-Encoding, WebSockets и SSE. Узнайте больше о SslProxy здесь."
  },
  "docs/ssl.html": {
    "href": "docs/ssl.html",
    "title": "Working with SSL | Sisk Framework",
    "keywords": "Working with SSL Working with SSL for development may be necessary when working in contexts that require security, such as most web development scenarios. Sisk operates on top of HttpListener, which does not support native HTTPS, only HTTP. However, there are workarounds that allow you to work with SSL in Sisk. See them below: Through IIS on Windows Available on: Windows Effort: medium If you are on Windows, you can use IIS to enable SSL on your HTTP server. For this to work, it is advisable that you follow this tutorial beforehand if you want your application to be listening on a host other than \"localhost.\" For this to work, you must install IIS through Windows features. IIS is available for free to Windows and Windows Server users. To configure SSL in your application, have the SSL certificate ready, even if it is self-signed. Next, you can see how to set up SSL on IIS 7 or higher. Through mitmproxy Available on: Linux, macOS, Windows Effort: easy mitmproxy is an interception proxy tool that allows developers and security testers to inspect, modify, and record HTTP and HTTPS traffic between a client (such as a web browser) and a server. You can use the mitmdump utility to start an reverse SSL proxy between your client and your Sisk application. Firstly, install the mitmprxy in your machine. Start your Sisk application. For this example, we'll use the 8000 port as the insecure HTTP port. Start the mitmproxy server to listen the secure port at 8001: mitmdump --mode reverse:http://localhost:8000/ -p 8001 And you're ready to go! You can already your application through https://localhost:8001/. Your application does not need to be running for you to start mitmdump. Through Sisk.SslProxy package Available on: Linux, macOS, Windows Effort: easy The Sisk.SslProxy package is a simple way to enable SSL on your Sisk application. However, it is an extremely experimental package. It may be unstable to work with this package, but you can be part of the small percentage of people who will contribute to making this package viable and stable. To get started, you can install the Sisk.SslProxy package with: dotnet add package Sisk.SslProxy Note You must enable \"Enable pre-release packages\" in the Visual Studio Package Manger to install Sisk.SslProxy. Again, it is an experimental project, so don't even think about putting it into production. At the moment, Sisk.SslProxy can handle most HTTP/1.1 features, including HTTP Continue, Chunked-Encoding, WebSockets, and SSE. Read more about SslProxy here."
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome! | Sisk Framework",
    "keywords": "Welcome! Welcome to the Sisk Framework! This project was initially created to explore the capabilities of the native .NET HttpListener and has gradually evolved into a more commercially oriented framework as I began applying it to personal and commercial projects. What is Sisk? Sisk is a lightweight, agnostic, simple, and robust web development framework. Its core idea is to create a service that runs on the internet, following the patterns you define. Moreover, Sisk adapts to your preferred working style, rather than the other way around. Due to its explicit nature, Sisk's behavior is predictable. The main differentiator from ASP.NET is that Sisk can be up and running with very few lines of code, avoiding unnecessary configurations and requiring minimal setup to get your server operational. Additionally, it does not require any additional .NET SDK packages for development, as the base package of .NET 6 is sufficient to start working with Sisk. Sisk's philosophy emphasizes simplicity and provides all the essential tools for building cloud applications without relying on specific or proprietary technologies from other companies. However, the Sisk environment allows for the implementation of both proprietary and non-proprietary technologies, enabling their use, development, and support within the framework. Furthermore, the term \"framework\" refers to the collection of methods, tools, and libraries that make Sisk a complete web development ecosystem. Contributions must adhere to this philosophy and maintain readable, maintainable code that anyone with a basic understanding can read, maintain, and compile. Sisk has a strict policy of transparency in its code. All technologies used to build Sisk must be open source, traceable, maintainable, and compilable, allowing anyone to edit, view, and create their own version of Sisk. What is Sisk for? With Sisk, you can create RESTful applications, gRPC services, WebSockets, file servers, GraphQL APIs, Entity Framework integrations, and more—essentially, whatever you need. Sisk is an extremely modular and sustainable framework. Its current development is intense, with much more to be added, but the focus remains on keeping it simple, easy to maintain, and enjoyable for developers working on projects of any size. Sisk has also been tested in low-performance environments, such as machines with less than 1GB of RAM, handling over 20,000 requests per second. The code, from the moment it arrives on the server to the response sent back, is extremely concise, with very few steps before reaching the client. One of the pillars of developing with Sisk is its compatibility with any machine that supports .NET, including those that do not require Native AOT. Additional implementations are also provided within the Sisk ecosystem, such as porting projects to other machines using configuration files and a view engine based on LISP, among others, served with packages beyond the core Sisk package. By design, Sisk is built to work with routers, but you are not obligated to use them. Sisk provides all the necessary infrastructure to create a secure application without obfuscating your code. There's no need for excessive ceremony, fluff, or spending hours on tedious documentation. Sisk is simple and elegant in its syntax, facilitating the development of fast and complex systems. But why not just use ASP.NET? ASP.NET is a great and well-established web framework, and many features present in Sisk were inspired by it. However, Sisk focuses on simpler and more performant development, eliminating the need to install additional components in your system, project, or editor. Sisk was designed to be straightforward and robust, enabling you to create anything you desire. Moreover, its development model allows you to choose how you want to work. You can handle requests in a simple, efficient, explicit, and fast manner. A basic understanding of HTTP is required if you want to manage everything manually, but even then, Sisk can greatly simplify the process with the functions it provides in its core package. Getting started with Sisk is easy. Those with prior web development experience typically learn Sisk in one or two days. The Sisk documentation is a valuable resource, serving not just as a specification but as a complete manual with examples and support. You can get started with Sisk here. Let's get started with Sisk."
  },
  "readme.html": {
    "href": "readme.html",
    "title": "Sisk Documentation | Sisk Framework",
    "keywords": "Sisk Documentation This repository contains the source code of the Sisk Documentation website. Building Firstly, make sure you have docfx installed in your machine. You'll need .NET SDK to install it. Clone this repository. Build the Sisk Framework project and put the .DLL binaries and XML documentation file at the ref/ directory, on the repository root. Run docfx, then docfx serve. Warning Please, do not use the docfx version 2.78.0 or later. This version has a bug that changes the documentation navigation layout. See the tracking issue. Prefer the version 2.76.0: dotnet tool install -g docfx --version 2.76.0 Then you're ready to go and you'll have the static website files at /_site. Contributing Contributions are always welcome. Contribute with spelling corrections, fixing broken links and more. Note Please do not edit API specification files (XML). These files are generated. If you want to edit any API documentation, edit it in the repository where the code is hosted."
  }
}